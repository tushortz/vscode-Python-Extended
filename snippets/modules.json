{
// _thread completion
	"LockType from the _thread module": {
		"description": "LockType from the _thread module",
		"prefix": "LockType",
		"body": ["LockType"]},
	"TIMEOUT_MAX from the _thread module": {
		"description": "TIMEOUT_MAX from the _thread module",
		"prefix": "TIMEOUT_MAX",
		"body": ["TIMEOUT_MAX"]},
	"acquire() from the _thread module": {
		"description": "acquire() from the _thread module",
		"prefix": "acquire",
		"body": ["acquire(${1:waitflag=1}, ${2:timeout=-1})"]},
	"allocate_lock() from the _thread module": {
		"description": "allocate_lock() from the _thread module",
		"prefix": "allocate_lock",
		"body": ["allocate_lock(${1:})"]},
	"error() from the _thread module": {
		"description": "error() from the _thread module",
		"prefix": "error",
		"body": ["error()"]},
	"exit() from the _thread module": {
		"description": "exit() from the _thread module",
		"prefix": "exit",
		"body": ["exit(${1:})"]},
	"get_ident() from the _thread module": {
		"description": "get_ident() from the _thread module",
		"prefix": "get_ident",
		"body": ["get_ident(${1:})"]},
	"interrupt_main() from the _thread module": {
		"description": "interrupt_main() from the _thread module",
		"prefix": "interrupt_main",
		"body": ["interrupt_main(${1:})"]},
	"locked() from the _thread module": {
		"description": "locked() from the _thread module",
		"prefix": "locked",
		"body": ["locked(${1:})"]},
	"release() from the _thread module": {
		"description": "release() from the _thread module",
		"prefix": "release",
		"body": ["release(${1:})"]},
	"stack_size() from the _thread module": {
		"description": "stack_size() from the _thread module",
		"prefix": "stack_size",
		"body": ["stack_size(${1:[size]})"]},
	"start_new_thread() from the _thread module": {
		"description": "start_new_thread() from the _thread module",
		"prefix": "start_new_thread",
		"body": ["start_new_thread(${1:function,})"]},
// abc completion
	"ABC from the abc module": {
		"description": "ABC from the abc module",
		"prefix": "ABC",
		"body": ["ABC"]},
	"ABCMeta from the abc module": {
		"description": "ABCMeta from the abc module",
		"prefix": "ABCMeta",
		"body": ["ABCMeta"]},
	"abstractclassmethod() from the abc module": {
		"description": "abstractclassmethod() from the abc module",
		"prefix": "abstractclassmethod",
		"body": ["abstractclassmethod()"]},
	"abstractmethod() from the abc module": {
		"description": "abstractmethod() from the abc module",
		"prefix": "abstractmethod",
		"body": ["abstractmethod()"]},
	"abstractproperty() from the abc module": {
		"description": "abstractproperty() from the abc module",
		"prefix": "abstractproperty",
		"body": ["abstractproperty(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})"]},
	"abstractstaticmethod() from the abc module": {
		"description": "abstractstaticmethod() from the abc module",
		"prefix": "abstractstaticmethod",
		"body": ["abstractstaticmethod()"]},
	"get_cache_token() from the abc module": {
		"description": "get_cache_token() from the abc module",
		"prefix": "get_cache_token",
		"body": ["get_cache_token(${1:})"]},
// aifc completion
	"aifc() from the aifc module": {
		"description": "aifc() from the aifc module",
		"prefix": "aifc",
		"body": ["aifc(${1:})"]},
	"aiff() from the aifc module": {
		"description": "aiff() from the aifc module",
		"prefix": "aiff",
		"body": ["aiff(${1:})"]},
	"close() from the aifc module": {
		"description": "close() from the aifc module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"getcompname() from the aifc module": {
		"description": "getcompname() from the aifc module",
		"prefix": "getcompname",
		"body": ["getcompname(${1:})"]},
	"getcomptype() from the aifc module": {
		"description": "getcomptype() from the aifc module",
		"prefix": "getcomptype",
		"body": ["getcomptype(${1:})"]},
	"getframerate() from the aifc module": {
		"description": "getframerate() from the aifc module",
		"prefix": "getframerate",
		"body": ["getframerate(${1:})"]},
	"getmark() from the aifc module": {
		"description": "getmark() from the aifc module",
		"prefix": "getmark",
		"body": ["getmark(${1:id})"]},
	"getmarkers() from the aifc module": {
		"description": "getmarkers() from the aifc module",
		"prefix": "getmarkers",
		"body": ["getmarkers(${1:})"]},
	"getnchannels() from the aifc module": {
		"description": "getnchannels() from the aifc module",
		"prefix": "getnchannels",
		"body": ["getnchannels(${1:})"]},
	"getnframes() from the aifc module": {
		"description": "getnframes() from the aifc module",
		"prefix": "getnframes",
		"body": ["getnframes(${1:})"]},
	"getparams() from the aifc module": {
		"description": "getparams() from the aifc module",
		"prefix": "getparams",
		"body": ["getparams(${1:})"]},
	"getsampwidth() from the aifc module": {
		"description": "getsampwidth() from the aifc module",
		"prefix": "getsampwidth",
		"body": ["getsampwidth(${1:})"]},
	"open() from the aifc module": {
		"description": "open() from the aifc module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:mode=None})"]},
	"readframes() from the aifc module": {
		"description": "readframes() from the aifc module",
		"prefix": "readframes",
		"body": ["readframes(${1:nframes})"]},
	"rewind() from the aifc module": {
		"description": "rewind() from the aifc module",
		"prefix": "rewind",
		"body": ["rewind(${1:})"]},
	"setcomptype() from the aifc module": {
		"description": "setcomptype() from the aifc module",
		"prefix": "setcomptype",
		"body": ["setcomptype(${1:type}, ${2:name})"]},
	"setframerate() from the aifc module": {
		"description": "setframerate() from the aifc module",
		"prefix": "setframerate",
		"body": ["setframerate(${1:rate})"]},
	"setmark() from the aifc module": {
		"description": "setmark() from the aifc module",
		"prefix": "setmark",
		"body": ["setmark(${1:id}, ${2:pos}, ${3:name})"]},
	"setnchannels() from the aifc module": {
		"description": "setnchannels() from the aifc module",
		"prefix": "setnchannels",
		"body": ["setnchannels(${1:nchannels})"]},
	"setnframes() from the aifc module": {
		"description": "setnframes() from the aifc module",
		"prefix": "setnframes",
		"body": ["setnframes(${1:nframes})"]},
	"setparams() from the aifc module": {
		"description": "setparams() from the aifc module",
		"prefix": "setparams",
		"body": ["setparams(${1:nchannels}, ${2:sampwidth}, ${3:framerate}, ${4:comptype}, ${5:compname})"]},
	"setpos() from the aifc module": {
		"description": "setpos() from the aifc module",
		"prefix": "setpos",
		"body": ["setpos(${1:pos})"]},
	"setsampwidth() from the aifc module": {
		"description": "setsampwidth() from the aifc module",
		"prefix": "setsampwidth",
		"body": ["setsampwidth(${1:width})"]},
	"tell() from the aifc module": {
		"description": "tell() from the aifc module",
		"prefix": "tell",
		"body": ["tell(${1:})"]},
	"tell() from the aifc module": {
		"description": "tell() from the aifc module",
		"prefix": "tell",
		"body": ["tell(${1:})"]},
	"writeframes() from the aifc module": {
		"description": "writeframes() from the aifc module",
		"prefix": "writeframes",
		"body": ["writeframes(${1:data})"]},
	"writeframesraw() from the aifc module": {
		"description": "writeframesraw() from the aifc module",
		"prefix": "writeframesraw",
		"body": ["writeframesraw(${1:data})"]},
// argparse completion
	"Action from the argparse module": {
		"description": "Action from the argparse module",
		"prefix": "Action",
		"body": ["Action(${1:option_strings}, ${2:dest}, ${3:nargs=None}, ${4:const=None}, ${5:default=None}, ${6:type=None}, ${7:choices=None}, ${8:required=False}, ${9:help=None}, ${10:metavar=None})"]},
	"ArgumentDefaultsHelpFormatter from the argparse module": {
		"description": "ArgumentDefaultsHelpFormatter from the argparse module",
		"prefix": "ArgumentDefaultsHelpFormatter",
		"body": ["ArgumentDefaultsHelpFormatter"]},
	"ArgumentParser from the argparse module": {
		"description": "ArgumentParser from the argparse module",
		"prefix": "ArgumentParser",
		"body": ["ArgumentParser(${1:prog=None}, ${2:usage=None}, ${3:description=None}, ${4:epilog=None}, ${5:parents=[]}, ${6:formatter_class=argparse.HelpFormatter}, ${7:prefix_chars='-'}, ${8:fromfile_prefix_chars=None}, ${9:argument_default=None}, ${10:conflict_handler='error'}, ${11:add_help=True}, ${12:allow_abbrev=True})"]},
	"FileType from the argparse module": {
		"description": "FileType from the argparse module",
		"prefix": "FileType",
		"body": ["FileType(${1:mode='r'}, ${2:bufsize=-1}, ${3:encoding=None}, ${4:errors=None})"]},
	"MetavarTypeHelpFormatter from the argparse module": {
		"description": "MetavarTypeHelpFormatter from the argparse module",
		"prefix": "MetavarTypeHelpFormatter",
		"body": ["MetavarTypeHelpFormatter"]},
	"Namespace from the argparse module": {
		"description": "Namespace from the argparse module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"RawDescriptionHelpFormatter from the argparse module": {
		"description": "RawDescriptionHelpFormatter from the argparse module",
		"prefix": "RawDescriptionHelpFormatter",
		"body": ["RawDescriptionHelpFormatter"]},
	"RawTextHelpFormatter from the argparse module": {
		"description": "RawTextHelpFormatter from the argparse module",
		"prefix": "RawTextHelpFormatter",
		"body": ["RawTextHelpFormatter"]},
	"add_argument() from the argparse module": {
		"description": "add_argument() from the argparse module",
		"prefix": "add_argument",
		"body": ["add_argument(${1:name or flags...[}, ${2:action][}, ${3:nargs][}, ${4:const][}, ${5:default][}, ${6:type][}, ${7:choices][}, ${8:required][}, ${9:help][}, ${10:metavar][}, ${11:dest]})"]},
	"add_argument_group() from the argparse module": {
		"description": "add_argument_group() from the argparse module",
		"prefix": "add_argument_group",
		"body": ["add_argument_group(${1:title=None}, ${2:description=None})"]},
	"add_mutually_exclusive_group() from the argparse module": {
		"description": "add_mutually_exclusive_group() from the argparse module",
		"prefix": "add_mutually_exclusive_group",
		"body": ["add_mutually_exclusive_group(${1:required=False})"]},
	"add_subparsers() from the argparse module": {
		"description": "add_subparsers() from the argparse module",
		"prefix": "add_subparsers",
		"body": ["add_subparsers(${1:[title][}, ${2:description][}, ${3:prog][}, ${4:parser_class][}, ${5:action][}, ${6:option_string][}, ${7:dest][}, ${8:help][}, ${9:metavar]})"]},
	"convert_arg_line_to_args() from the argparse module": {
		"description": "convert_arg_line_to_args() from the argparse module",
		"prefix": "convert_arg_line_to_args",
		"body": ["convert_arg_line_to_args(${1:arg_line})"]},
	"error() from the argparse module": {
		"description": "error() from the argparse module",
		"prefix": "error",
		"body": ["error(${1:message})"]},
	"exit() from the argparse module": {
		"description": "exit() from the argparse module",
		"prefix": "exit",
		"body": ["exit(${1:status=0}, ${2:message=None})"]},
	"format_help() from the argparse module": {
		"description": "format_help() from the argparse module",
		"prefix": "format_help",
		"body": ["format_help(${1:})"]},
	"format_usage() from the argparse module": {
		"description": "format_usage() from the argparse module",
		"prefix": "format_usage",
		"body": ["format_usage(${1:})"]},
	"get_default() from the argparse module": {
		"description": "get_default() from the argparse module",
		"prefix": "get_default",
		"body": ["get_default(${1:dest})"]},
	"parse_args() from the argparse module": {
		"description": "parse_args() from the argparse module",
		"prefix": "parse_args",
		"body": ["parse_args(${1:args=None}, ${2:namespace=None})"]},
	"parse_known_args() from the argparse module": {
		"description": "parse_known_args() from the argparse module",
		"prefix": "parse_known_args",
		"body": ["parse_known_args(${1:args=None}, ${2:namespace=None})"]},
	"print_help() from the argparse module": {
		"description": "print_help() from the argparse module",
		"prefix": "print_help",
		"body": ["print_help(${1:file=None})"]},
	"print_usage() from the argparse module": {
		"description": "print_usage() from the argparse module",
		"prefix": "print_usage",
		"body": ["print_usage(${1:file=None})"]},
	"set_defaults() from the argparse module": {
		"description": "set_defaults() from the argparse module",
		"prefix": "set_defaults",
		"body": ["set_defaults(${1:**kwargs})"]},
// array completion
	"append() from the array module": {
		"description": "append() from the array module",
		"prefix": "append",
		"body": ["append(${1:x})"]},
	"array() from the array module": {
		"description": "array() from the array module",
		"prefix": "array",
		"body": ["array(${1:typecode[}, ${2:initializer]})"]},
	"buffer_info() from the array module": {
		"description": "buffer_info() from the array module",
		"prefix": "buffer_info",
		"body": ["buffer_info(${1:})"]},
	"byteswap() from the array module": {
		"description": "byteswap() from the array module",
		"prefix": "byteswap",
		"body": ["byteswap(${1:})"]},
	"count() from the array module": {
		"description": "count() from the array module",
		"prefix": "count",
		"body": ["count(${1:x})"]},
	"extend() from the array module": {
		"description": "extend() from the array module",
		"prefix": "extend",
		"body": ["extend(${1:iterable})"]},
	"frombytes() from the array module": {
		"description": "frombytes() from the array module",
		"prefix": "frombytes",
		"body": ["frombytes(${1:s})"]},
	"fromfile() from the array module": {
		"description": "fromfile() from the array module",
		"prefix": "fromfile",
		"body": ["fromfile(${1:f}, ${2:n})"]},
	"fromlist() from the array module": {
		"description": "fromlist() from the array module",
		"prefix": "fromlist",
		"body": ["fromlist(${1:list})"]},
	"fromstring() from the array module": {
		"description": "fromstring() from the array module",
		"prefix": "fromstring",
		"body": ["fromstring(${1:})"]},
	"fromunicode() from the array module": {
		"description": "fromunicode() from the array module",
		"prefix": "fromunicode",
		"body": ["fromunicode(${1:s})"]},
	"index() from the array module": {
		"description": "index() from the array module",
		"prefix": "index",
		"body": ["index(${1:x})"]},
	"insert() from the array module": {
		"description": "insert() from the array module",
		"prefix": "insert",
		"body": ["insert(${1:i}, ${2:x})"]},
	"itemsize() from the array module": {
		"description": "itemsize() from the array module",
		"prefix": "itemsize",
		"body": ["itemsize()"]},
	"pop() from the array module": {
		"description": "pop() from the array module",
		"prefix": "pop",
		"body": ["pop(${1:[i]})"]},
	"remove() from the array module": {
		"description": "remove() from the array module",
		"prefix": "remove",
		"body": ["remove(${1:x})"]},
	"reverse() from the array module": {
		"description": "reverse() from the array module",
		"prefix": "reverse",
		"body": ["reverse(${1:})"]},
	"tobytes() from the array module": {
		"description": "tobytes() from the array module",
		"prefix": "tobytes",
		"body": ["tobytes(${1:})"]},
	"tofile() from the array module": {
		"description": "tofile() from the array module",
		"prefix": "tofile",
		"body": ["tofile(${1:f})"]},
	"tolist() from the array module": {
		"description": "tolist() from the array module",
		"prefix": "tolist",
		"body": ["tolist(${1:})"]},
	"tostring() from the array module": {
		"description": "tostring() from the array module",
		"prefix": "tostring",
		"body": ["tostring(${1:})"]},
	"tounicode() from the array module": {
		"description": "tounicode() from the array module",
		"prefix": "tounicode",
		"body": ["tounicode(${1:})"]},
	"typecode() from the array module": {
		"description": "typecode() from the array module",
		"prefix": "typecode",
		"body": ["typecode()"]},
	"typecodes() from the array module": {
		"description": "typecodes() from the array module",
		"prefix": "typecodes",
		"body": ["typecodes()"]},
// ast completion
	"AST from the ast module": {
		"description": "AST from the ast module",
		"prefix": "AST",
		"body": ["AST"]},
	"NodeTransformer from the ast module": {
		"description": "NodeTransformer from the ast module",
		"prefix": "NodeTransformer",
		"body": ["NodeTransformer"]},
	"NodeVisitor from the ast module": {
		"description": "NodeVisitor from the ast module",
		"prefix": "NodeVisitor",
		"body": ["NodeVisitor"]},
	"copy_location() from the ast module": {
		"description": "copy_location() from the ast module",
		"prefix": "copy_location",
		"body": ["copy_location(${1:new_node}, ${2:old_node})"]},
	"dump() from the ast module": {
		"description": "dump() from the ast module",
		"prefix": "dump",
		"body": ["dump(${1:node}, ${2:annotate_fields=True}, ${3:include_attributes=False})"]},
	"fix_missing_locations() from the ast module": {
		"description": "fix_missing_locations() from the ast module",
		"prefix": "fix_missing_locations",
		"body": ["fix_missing_locations(${1:node})"]},
	"get_docstring() from the ast module": {
		"description": "get_docstring() from the ast module",
		"prefix": "get_docstring",
		"body": ["get_docstring(${1:node}, ${2:clean=True})"]},
	"increment_lineno() from the ast module": {
		"description": "increment_lineno() from the ast module",
		"prefix": "increment_lineno",
		"body": ["increment_lineno(${1:node}, ${2:n=1})"]},
	"iter_child_nodes() from the ast module": {
		"description": "iter_child_nodes() from the ast module",
		"prefix": "iter_child_nodes",
		"body": ["iter_child_nodes(${1:node})"]},
	"iter_fields() from the ast module": {
		"description": "iter_fields() from the ast module",
		"prefix": "iter_fields",
		"body": ["iter_fields(${1:node})"]},
	"literal_eval() from the ast module": {
		"description": "literal_eval() from the ast module",
		"prefix": "literal_eval",
		"body": ["literal_eval(${1:node_or_string})"]},
	"parse() from the ast module": {
		"description": "parse() from the ast module",
		"prefix": "parse",
		"body": ["parse(${1:source}, ${2:filename=''}, ${3:mode='exec'})"]},
	"walk() from the ast module": {
		"description": "walk() from the ast module",
		"prefix": "walk",
		"body": ["walk(${1:node})"]},
// asynchat completion
	"async_chat() from the asynchat module": {
		"description": "async_chat() from the asynchat module",
		"prefix": "async_chat",
		"body": ["async_chat()"]},
	"close_when_done() from the asynchat module": {
		"description": "close_when_done() from the asynchat module",
		"prefix": "close_when_done",
		"body": ["close_when_done(${1:})"]},
	"collect_incoming_data() from the asynchat module": {
		"description": "collect_incoming_data() from the asynchat module",
		"prefix": "collect_incoming_data",
		"body": ["collect_incoming_data(${1:data})"]},
	"discard_buffers() from the asynchat module": {
		"description": "discard_buffers() from the asynchat module",
		"prefix": "discard_buffers",
		"body": ["discard_buffers(${1:})"]},
	"found_terminator() from the asynchat module": {
		"description": "found_terminator() from the asynchat module",
		"prefix": "found_terminator",
		"body": ["found_terminator(${1:})"]},
	"get_terminator() from the asynchat module": {
		"description": "get_terminator() from the asynchat module",
		"prefix": "get_terminator",
		"body": ["get_terminator(${1:})"]},
	"push() from the asynchat module": {
		"description": "push() from the asynchat module",
		"prefix": "push",
		"body": ["push(${1:data})"]},
	"push_with_producer() from the asynchat module": {
		"description": "push_with_producer() from the asynchat module",
		"prefix": "push_with_producer",
		"body": ["push_with_producer(${1:producer})"]},
	"set_terminator() from the asynchat module": {
		"description": "set_terminator() from the asynchat module",
		"prefix": "set_terminator",
		"body": ["set_terminator(${1:term})"]},
// asyncore completion
	"dispatcher() from the asyncore module": {
		"description": "dispatcher() from the asyncore module",
		"prefix": "dispatcher",
		"body": ["dispatcher()"]},
	"dispatcher_with_send() from the asyncore module": {
		"description": "dispatcher_with_send() from the asyncore module",
		"prefix": "dispatcher_with_send",
		"body": ["dispatcher_with_send()"]},
	"file_dispatcher() from the asyncore module": {
		"description": "file_dispatcher() from the asyncore module",
		"prefix": "file_dispatcher",
		"body": ["file_dispatcher()"]},
	"file_wrapper() from the asyncore module": {
		"description": "file_wrapper() from the asyncore module",
		"prefix": "file_wrapper",
		"body": ["file_wrapper()"]},
	"loop() from the asyncore module": {
		"description": "loop() from the asyncore module",
		"prefix": "loop",
		"body": ["loop(${1:[timeout[,})"]},
// atexit completion
	"register() from the atexit module": {
		"description": "register() from the atexit module",
		"prefix": "register",
		"body": ["register(${1:func}, ${2:*args}, ${3:**kargs})"]},
	"unregister() from the atexit module": {
		"description": "unregister() from the atexit module",
		"prefix": "unregister",
		"body": ["unregister(${1:func})"]},
// audioop completion
	"add() from the audioop module": {
		"description": "add() from the audioop module",
		"prefix": "add",
		"body": ["add(${1:fragment1}, ${2:fragment2}, ${3:width})"]},
	"adpcm2lin() from the audioop module": {
		"description": "adpcm2lin() from the audioop module",
		"prefix": "adpcm2lin",
		"body": ["adpcm2lin(${1:adpcmfragment}, ${2:width}, ${3:state})"]},
	"alaw2lin() from the audioop module": {
		"description": "alaw2lin() from the audioop module",
		"prefix": "alaw2lin",
		"body": ["alaw2lin(${1:fragment}, ${2:width})"]},
	"avg() from the audioop module": {
		"description": "avg() from the audioop module",
		"prefix": "avg",
		"body": ["avg(${1:fragment}, ${2:width})"]},
	"avgpp() from the audioop module": {
		"description": "avgpp() from the audioop module",
		"prefix": "avgpp",
		"body": ["avgpp(${1:fragment}, ${2:width})"]},
	"bias() from the audioop module": {
		"description": "bias() from the audioop module",
		"prefix": "bias",
		"body": ["bias(${1:fragment}, ${2:width}, ${3:bias})"]},
	"byteswap() from the audioop module": {
		"description": "byteswap() from the audioop module",
		"prefix": "byteswap",
		"body": ["byteswap(${1:fragment}, ${2:width})"]},
	"cross() from the audioop module": {
		"description": "cross() from the audioop module",
		"prefix": "cross",
		"body": ["cross(${1:fragment}, ${2:width})"]},
	"error() from the audioop module": {
		"description": "error() from the audioop module",
		"prefix": "error",
		"body": ["error()"]},
	"findfactor() from the audioop module": {
		"description": "findfactor() from the audioop module",
		"prefix": "findfactor",
		"body": ["findfactor(${1:fragment}, ${2:reference})"]},
	"findfit() from the audioop module": {
		"description": "findfit() from the audioop module",
		"prefix": "findfit",
		"body": ["findfit(${1:fragment}, ${2:reference})"]},
	"findmax() from the audioop module": {
		"description": "findmax() from the audioop module",
		"prefix": "findmax",
		"body": ["findmax(${1:fragment}, ${2:length})"]},
	"getsample() from the audioop module": {
		"description": "getsample() from the audioop module",
		"prefix": "getsample",
		"body": ["getsample(${1:fragment}, ${2:width}, ${3:index})"]},
	"lin2adpcm() from the audioop module": {
		"description": "lin2adpcm() from the audioop module",
		"prefix": "lin2adpcm",
		"body": ["lin2adpcm(${1:fragment}, ${2:width}, ${3:state})"]},
	"lin2alaw() from the audioop module": {
		"description": "lin2alaw() from the audioop module",
		"prefix": "lin2alaw",
		"body": ["lin2alaw(${1:fragment}, ${2:width})"]},
	"lin2lin() from the audioop module": {
		"description": "lin2lin() from the audioop module",
		"prefix": "lin2lin",
		"body": ["lin2lin(${1:fragment}, ${2:width}, ${3:newwidth})"]},
	"lin2ulaw() from the audioop module": {
		"description": "lin2ulaw() from the audioop module",
		"prefix": "lin2ulaw",
		"body": ["lin2ulaw(${1:fragment}, ${2:width})"]},
	"max() from the audioop module": {
		"description": "max() from the audioop module",
		"prefix": "max",
		"body": ["max(${1:fragment}, ${2:width})"]},
	"maxpp() from the audioop module": {
		"description": "maxpp() from the audioop module",
		"prefix": "maxpp",
		"body": ["maxpp(${1:fragment}, ${2:width})"]},
	"minmax() from the audioop module": {
		"description": "minmax() from the audioop module",
		"prefix": "minmax",
		"body": ["minmax(${1:fragment}, ${2:width})"]},
	"mul() from the audioop module": {
		"description": "mul() from the audioop module",
		"prefix": "mul",
		"body": ["mul(${1:fragment}, ${2:width}, ${3:factor})"]},
	"ratecv() from the audioop module": {
		"description": "ratecv() from the audioop module",
		"prefix": "ratecv",
		"body": ["ratecv(${1:fragment}, ${2:width}, ${3:nchannels}, ${4:inrate}, ${5:outrate}, ${6:state[}, ${7:weightA[}, ${8:weightB]]})"]},
	"reverse() from the audioop module": {
		"description": "reverse() from the audioop module",
		"prefix": "reverse",
		"body": ["reverse(${1:fragment}, ${2:width})"]},
	"rms() from the audioop module": {
		"description": "rms() from the audioop module",
		"prefix": "rms",
		"body": ["rms(${1:fragment}, ${2:width})"]},
	"tomono() from the audioop module": {
		"description": "tomono() from the audioop module",
		"prefix": "tomono",
		"body": ["tomono(${1:fragment}, ${2:width}, ${3:lfactor}, ${4:rfactor})"]},
	"tostereo() from the audioop module": {
		"description": "tostereo() from the audioop module",
		"prefix": "tostereo",
		"body": ["tostereo(${1:fragment}, ${2:width}, ${3:lfactor}, ${4:rfactor})"]},
	"ulaw2lin() from the audioop module": {
		"description": "ulaw2lin() from the audioop module",
		"prefix": "ulaw2lin",
		"body": ["ulaw2lin(${1:fragment,})"]},
// base64 completion
	"a85decode() from the base64 module": {
		"description": "a85decode() from the base64 module",
		"prefix": "a85decode",
		"body": ["a85decode(${1:b}, ${2:*}, ${3:foldspaces=False}, ${4:adobe=False}, ${5:ignorechars=b'  v'})"]},
	"a85encode() from the base64 module": {
		"description": "a85encode() from the base64 module",
		"prefix": "a85encode",
		"body": ["a85encode(${1:b}, ${2:*}, ${3:foldspaces=False}, ${4:wrapcol=0}, ${5:pad=False}, ${6:adobe=False})"]},
	"b16decode() from the base64 module": {
		"description": "b16decode() from the base64 module",
		"prefix": "b16decode",
		"body": ["b16decode(${1:s}, ${2:casefold=False})"]},
	"b16encode() from the base64 module": {
		"description": "b16encode() from the base64 module",
		"prefix": "b16encode",
		"body": ["b16encode(${1:s})"]},
	"b32decode() from the base64 module": {
		"description": "b32decode() from the base64 module",
		"prefix": "b32decode",
		"body": ["b32decode(${1:s}, ${2:casefold=False}, ${3:map01=None})"]},
	"b32encode() from the base64 module": {
		"description": "b32encode() from the base64 module",
		"prefix": "b32encode",
		"body": ["b32encode(${1:s})"]},
	"b64decode() from the base64 module": {
		"description": "b64decode() from the base64 module",
		"prefix": "b64decode",
		"body": ["b64decode(${1:s}, ${2:altchars=None}, ${3:validate=False})"]},
	"b64encode() from the base64 module": {
		"description": "b64encode() from the base64 module",
		"prefix": "b64encode",
		"body": ["b64encode(${1:s}, ${2:altchars=None})"]},
	"b85decode() from the base64 module": {
		"description": "b85decode() from the base64 module",
		"prefix": "b85decode",
		"body": ["b85decode(${1:b})"]},
	"b85encode() from the base64 module": {
		"description": "b85encode() from the base64 module",
		"prefix": "b85encode",
		"body": ["b85encode(${1:b}, ${2:pad=False})"]},
	"decode() from the base64 module": {
		"description": "decode() from the base64 module",
		"prefix": "decode",
		"body": ["decode(${1:input}, ${2:output})"]},
	"decodebytes() from the base64 module": {
		"description": "decodebytes() from the base64 module",
		"prefix": "decodebytes",
		"body": ["decodebytes(${1:s})"]},
	"decodestring() from the base64 module": {
		"description": "decodestring() from the base64 module",
		"prefix": "decodestring",
		"body": ["decodestring(${1:s})"]},
	"encode() from the base64 module": {
		"description": "encode() from the base64 module",
		"prefix": "encode",
		"body": ["encode(${1:input}, ${2:output})"]},
	"encodebytes() from the base64 module": {
		"description": "encodebytes() from the base64 module",
		"prefix": "encodebytes",
		"body": ["encodebytes(${1:s})"]},
	"encodestring() from the base64 module": {
		"description": "encodestring() from the base64 module",
		"prefix": "encodestring",
		"body": ["encodestring(${1:s})"]},
	"standard_b64decode() from the base64 module": {
		"description": "standard_b64decode() from the base64 module",
		"prefix": "standard_b64decode",
		"body": ["standard_b64decode(${1:s})"]},
	"standard_b64encode() from the base64 module": {
		"description": "standard_b64encode() from the base64 module",
		"prefix": "standard_b64encode",
		"body": ["standard_b64encode(${1:s})"]},
	"urlsafe_b64decode() from the base64 module": {
		"description": "urlsafe_b64decode() from the base64 module",
		"prefix": "urlsafe_b64decode",
		"body": ["urlsafe_b64decode(${1:s})"]},
	"urlsafe_b64encode() from the base64 module": {
		"description": "urlsafe_b64encode() from the base64 module",
		"prefix": "urlsafe_b64encode",
		"body": ["urlsafe_b64encode(${1:s})"]},
// bdb completion
	"Bdb from the bdb module": {
		"description": "Bdb from the bdb module",
		"prefix": "Bdb",
		"body": ["Bdb(${1:skip=None})"]},
	"BdbQuit from the bdb module": {
		"description": "BdbQuit from the bdb module",
		"prefix": "BdbQuit",
		"body": ["BdbQuit"]},
	"Breakpoint from the bdb module": {
		"description": "Breakpoint from the bdb module",
		"prefix": "Breakpoint",
		"body": ["Breakpoint(${1:self}, ${2:file}, ${3:line}, ${4:temporary=0}, ${5:cond=None}, ${6:funcname=None})"]},
	"checkfuncname() from the bdb module": {
		"description": "checkfuncname() from the bdb module",
		"prefix": "checkfuncname",
		"body": ["checkfuncname(${1:b}, ${2:frame})"]},
	"effective() from the bdb module": {
		"description": "effective() from the bdb module",
		"prefix": "effective",
		"body": ["effective(${1:file}, ${2:line}, ${3:frame})"]},
	"set_trace() from the bdb module": {
		"description": "set_trace() from the bdb module",
		"prefix": "set_trace",
		"body": ["set_trace(${1:})"]},
// binascii completion
	"Error from the binascii module": {
		"description": "Error from the binascii module",
		"prefix": "Error",
		"body": ["Error"]},
	"Incomplete from the binascii module": {
		"description": "Incomplete from the binascii module",
		"prefix": "Incomplete",
		"body": ["Incomplete"]},
	"a2b_base64() from the binascii module": {
		"description": "a2b_base64() from the binascii module",
		"prefix": "a2b_base64",
		"body": ["a2b_base64(${1:string})"]},
	"a2b_hex() from the binascii module": {
		"description": "a2b_hex() from the binascii module",
		"prefix": "a2b_hex",
		"body": ["a2b_hex(${1:hexstr})"]},
	"a2b_hqx() from the binascii module": {
		"description": "a2b_hqx() from the binascii module",
		"prefix": "a2b_hqx",
		"body": ["a2b_hqx(${1:string})"]},
	"a2b_qp() from the binascii module": {
		"description": "a2b_qp() from the binascii module",
		"prefix": "a2b_qp",
		"body": ["a2b_qp(${1:data}, ${2:header=False})"]},
	"a2b_uu() from the binascii module": {
		"description": "a2b_uu() from the binascii module",
		"prefix": "a2b_uu",
		"body": ["a2b_uu(${1:string})"]},
	"b2a_base64() from the binascii module": {
		"description": "b2a_base64() from the binascii module",
		"prefix": "b2a_base64",
		"body": ["b2a_base64(${1:data})"]},
	"b2a_hex() from the binascii module": {
		"description": "b2a_hex() from the binascii module",
		"prefix": "b2a_hex",
		"body": ["b2a_hex(${1:data})"]},
	"b2a_hqx() from the binascii module": {
		"description": "b2a_hqx() from the binascii module",
		"prefix": "b2a_hqx",
		"body": ["b2a_hqx(${1:data})"]},
	"b2a_qp() from the binascii module": {
		"description": "b2a_qp() from the binascii module",
		"prefix": "b2a_qp",
		"body": ["b2a_qp(${1:data}, ${2:quotetabs=False}, ${3:istext=True}, ${4:header=False})"]},
	"b2a_uu() from the binascii module": {
		"description": "b2a_uu() from the binascii module",
		"prefix": "b2a_uu",
		"body": ["b2a_uu(${1:data})"]},
	"crc32() from the binascii module": {
		"description": "crc32() from the binascii module",
		"prefix": "crc32",
		"body": ["crc32(${1:data[}, ${2:value]})"]},
	"crc_hqx() from the binascii module": {
		"description": "crc_hqx() from the binascii module",
		"prefix": "crc_hqx",
		"body": ["crc_hqx(${1:data}, ${2:value})"]},
	"hexlify() from the binascii module": {
		"description": "hexlify() from the binascii module",
		"prefix": "hexlify",
		"body": ["hexlify(${1:data})"]},
	"rlecode_hqx() from the binascii module": {
		"description": "rlecode_hqx() from the binascii module",
		"prefix": "rlecode_hqx",
		"body": ["rlecode_hqx(${1:data})"]},
	"rledecode_hqx() from the binascii module": {
		"description": "rledecode_hqx() from the binascii module",
		"prefix": "rledecode_hqx",
		"body": ["rledecode_hqx(${1:data})"]},
	"unhexlify() from the binascii module": {
		"description": "unhexlify() from the binascii module",
		"prefix": "unhexlify",
		"body": ["unhexlify(${1:hexstr})"]},
// binhex completion
	"Error from the binhex module": {
		"description": "Error from the binhex module",
		"prefix": "Error",
		"body": ["Error"]},
	"binhex() from the binhex module": {
		"description": "binhex() from the binhex module",
		"prefix": "binhex",
		"body": ["binhex(${1:input}, ${2:output})"]},
	"hexbin() from the binhex module": {
		"description": "hexbin() from the binhex module",
		"prefix": "hexbin",
		"body": ["hexbin(${1:input,})"]},
// bisect completion
	"bisect() from the bisect module": {
		"description": "bisect() from the bisect module",
		"prefix": "bisect",
		"body": ["bisect(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})"]},
	"bisect_left() from the bisect module": {
		"description": "bisect_left() from the bisect module",
		"prefix": "bisect_left",
		"body": ["bisect_left(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})"]},
	"bisect_right() from the bisect module": {
		"description": "bisect_right() from the bisect module",
		"prefix": "bisect_right",
		"body": ["bisect_right(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})"]},
	"insort() from the bisect module": {
		"description": "insort() from the bisect module",
		"prefix": "insort",
		"body": ["insort(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})"]},
	"insort_left() from the bisect module": {
		"description": "insort_left() from the bisect module",
		"prefix": "insort_left",
		"body": ["insort_left(${1:a}, ${2:x}, ${3:lo=0}, ${4:hi=len}, ${5:a})"]},
	"insort_right() from the bisect module": {
		"description": "insort_right() from the bisect module",
		"prefix": "insort_right",
		"body": ["insort_right(${1:a,})"]},
// bz2 completion
	"BZ2Compressor from the bz2 module": {
		"description": "BZ2Compressor from the bz2 module",
		"prefix": "BZ2Compressor",
		"body": ["BZ2Compressor(${1:compresslevel=9})"]},
	"BZ2Decompressor from the bz2 module": {
		"description": "BZ2Decompressor from the bz2 module",
		"prefix": "BZ2Decompressor",
		"body": ["BZ2Decompressor"]},
	"BZ2File from the bz2 module": {
		"description": "BZ2File from the bz2 module",
		"prefix": "BZ2File",
		"body": ["BZ2File(${1:filename}, ${2:mode='r'}, ${3:buffering=None}, ${4:compresslevel=9})"]},
	"compress() from the bz2 module": {
		"description": "compress() from the bz2 module",
		"prefix": "compress",
		"body": ["compress(${1:data}, ${2:compresslevel=9})"]},
	"decompress() from the bz2 module": {
		"description": "decompress() from the bz2 module",
		"prefix": "decompress",
		"body": ["decompress(${1:data})"]},
	"open() from the bz2 module": {
		"description": "open() from the bz2 module",
		"prefix": "open",
		"body": ["open(${1:filename,})"]},
// calendar completion
	"Calendar from the calendar module": {
		"description": "Calendar from the calendar module",
		"prefix": "Calendar",
		"body": ["Calendar(${1:firstweekday=0})"]},
	"HTMLCalendar from the calendar module": {
		"description": "HTMLCalendar from the calendar module",
		"prefix": "HTMLCalendar",
		"body": ["HTMLCalendar(${1:firstweekday=0})"]},
	"LocaleHTMLCalendar from the calendar module": {
		"description": "LocaleHTMLCalendar from the calendar module",
		"prefix": "LocaleHTMLCalendar",
		"body": ["LocaleHTMLCalendar(${1:firstweekday=0}, ${2:locale=None})"]},
	"LocaleTextCalendar from the calendar module": {
		"description": "LocaleTextCalendar from the calendar module",
		"prefix": "LocaleTextCalendar",
		"body": ["LocaleTextCalendar(${1:firstweekday=0}, ${2:locale=None})"]},
	"TextCalendar from the calendar module": {
		"description": "TextCalendar from the calendar module",
		"prefix": "TextCalendar",
		"body": ["TextCalendar(${1:firstweekday=0})"]},
	"calendar() from the calendar module": {
		"description": "calendar() from the calendar module",
		"prefix": "calendar",
		"body": ["calendar(${1:year}, ${2:w=2}, ${3:l=1}, ${4:c=6}, ${5:m=3})"]},
	"day_abbr() from the calendar module": {
		"description": "day_abbr() from the calendar module",
		"prefix": "day_abbr",
		"body": ["day_abbr()"]},
	"day_name() from the calendar module": {
		"description": "day_name() from the calendar module",
		"prefix": "day_name",
		"body": ["day_name()"]},
	"firstweekday() from the calendar module": {
		"description": "firstweekday() from the calendar module",
		"prefix": "firstweekday",
		"body": ["firstweekday(${1:})"]},
	"isleap() from the calendar module": {
		"description": "isleap() from the calendar module",
		"prefix": "isleap",
		"body": ["isleap(${1:year})"]},
	"leapdays() from the calendar module": {
		"description": "leapdays() from the calendar module",
		"prefix": "leapdays",
		"body": ["leapdays(${1:y1}, ${2:y2})"]},
	"month() from the calendar module": {
		"description": "month() from the calendar module",
		"prefix": "month",
		"body": ["month(${1:theyear}, ${2:themonth}, ${3:w=0}, ${4:l=0})"]},
	"month_abbr() from the calendar module": {
		"description": "month_abbr() from the calendar module",
		"prefix": "month_abbr",
		"body": ["month_abbr()"]},
	"month_name() from the calendar module": {
		"description": "month_name() from the calendar module",
		"prefix": "month_name",
		"body": ["month_name()"]},
	"monthcalendar() from the calendar module": {
		"description": "monthcalendar() from the calendar module",
		"prefix": "monthcalendar",
		"body": ["monthcalendar(${1:year}, ${2:month})"]},
	"monthrange() from the calendar module": {
		"description": "monthrange() from the calendar module",
		"prefix": "monthrange",
		"body": ["monthrange(${1:year}, ${2:month})"]},
	"prcal() from the calendar module": {
		"description": "prcal() from the calendar module",
		"prefix": "prcal",
		"body": ["prcal(${1:year}, ${2:w=0}, ${3:l=0}, ${4:c=6}, ${5:m=3})"]},
	"prmonth() from the calendar module": {
		"description": "prmonth() from the calendar module",
		"prefix": "prmonth",
		"body": ["prmonth(${1:theyear}, ${2:themonth}, ${3:w=0}, ${4:l=0})"]},
	"setfirstweekday() from the calendar module": {
		"description": "setfirstweekday() from the calendar module",
		"prefix": "setfirstweekday",
		"body": ["setfirstweekday(${1:weekday})"]},
	"timegm() from the calendar module": {
		"description": "timegm() from the calendar module",
		"prefix": "timegm",
		"body": ["timegm(${1:tuple})"]},
	"weekday() from the calendar module": {
		"description": "weekday() from the calendar module",
		"prefix": "weekday",
		"body": ["weekday(${1:year}, ${2:month}, ${3:day})"]},
	"weekheader() from the calendar module": {
		"description": "weekheader() from the calendar module",
		"prefix": "weekheader",
		"body": ["weekheader(${1:n})"]},
// cgi completion
	"escape() from the cgi module": {
		"description": "escape() from the cgi module",
		"prefix": "escape",
		"body": ["escape(${1:s}, ${2:quote=False})"]},
	"getfirst() from the cgi module": {
		"description": "getfirst() from the cgi module",
		"prefix": "getfirst",
		"body": ["getfirst(${1:name}, ${2:default=None})"]},
	"getlist() from the cgi module": {
		"description": "getlist() from the cgi module",
		"prefix": "getlist",
		"body": ["getlist(${1:name})"]},
	"parse() from the cgi module": {
		"description": "parse() from the cgi module",
		"prefix": "parse",
		"body": ["parse(${1:fp=None}, ${2:environ=os.environ}, ${3:keep_blank_values=False}, ${4:strict_parsing=False})"]},
	"parse_header() from the cgi module": {
		"description": "parse_header() from the cgi module",
		"prefix": "parse_header",
		"body": ["parse_header(${1:string})"]},
	"parse_multipart() from the cgi module": {
		"description": "parse_multipart() from the cgi module",
		"prefix": "parse_multipart",
		"body": ["parse_multipart(${1:fp}, ${2:pdict})"]},
	"parse_qs() from the cgi module": {
		"description": "parse_qs() from the cgi module",
		"prefix": "parse_qs",
		"body": ["parse_qs(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False})"]},
	"parse_qsl() from the cgi module": {
		"description": "parse_qsl() from the cgi module",
		"prefix": "parse_qsl",
		"body": ["parse_qsl(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False})"]},
	"print_directory() from the cgi module": {
		"description": "print_directory() from the cgi module",
		"prefix": "print_directory",
		"body": ["print_directory(${1:})"]},
	"print_environ() from the cgi module": {
		"description": "print_environ() from the cgi module",
		"prefix": "print_environ",
		"body": ["print_environ(${1:})"]},
	"print_environ_usage() from the cgi module": {
		"description": "print_environ_usage() from the cgi module",
		"prefix": "print_environ_usage",
		"body": ["print_environ_usage(${1:})"]},
	"print_form() from the cgi module": {
		"description": "print_form() from the cgi module",
		"prefix": "print_form",
		"body": ["print_form(${1:form})"]},
	"test() from the cgi module": {
		"description": "test() from the cgi module",
		"prefix": "test",
		"body": ["test(${1:})"]},
// cgitb completion
	"enable() from the cgitb module": {
		"description": "enable() from the cgitb module",
		"prefix": "enable",
		"body": ["enable(${1:display=1}, ${2:logdir=None}, ${3:context=5}, ${4:format=\"html\"})"]},
	"handler() from the cgitb module": {
		"description": "handler() from the cgitb module",
		"prefix": "handler",
		"body": ["handler(${1:info=None})"]},
// chunk completion
	"Chunk from the chunk module": {
		"description": "Chunk from the chunk module",
		"prefix": "Chunk",
		"body": ["Chunk(${1:file,})"]},
// cmath completion
	"acos() from the cmath module": {
		"description": "acos() from the cmath module",
		"prefix": "acos",
		"body": ["acos(${1:x})"]},
	"acosh() from the cmath module": {
		"description": "acosh() from the cmath module",
		"prefix": "acosh",
		"body": ["acosh(${1:x})"]},
	"asin() from the cmath module": {
		"description": "asin() from the cmath module",
		"prefix": "asin",
		"body": ["asin(${1:x})"]},
	"asinh() from the cmath module": {
		"description": "asinh() from the cmath module",
		"prefix": "asinh",
		"body": ["asinh(${1:x})"]},
	"atan() from the cmath module": {
		"description": "atan() from the cmath module",
		"prefix": "atan",
		"body": ["atan(${1:x})"]},
	"atanh() from the cmath module": {
		"description": "atanh() from the cmath module",
		"prefix": "atanh",
		"body": ["atanh(${1:x})"]},
	"cos() from the cmath module": {
		"description": "cos() from the cmath module",
		"prefix": "cos",
		"body": ["cos(${1:x})"]},
	"cosh() from the cmath module": {
		"description": "cosh() from the cmath module",
		"prefix": "cosh",
		"body": ["cosh(${1:x})"]},
	"e() from the cmath module": {
		"description": "e() from the cmath module",
		"prefix": "e",
		"body": ["e()"]},
	"exp() from the cmath module": {
		"description": "exp() from the cmath module",
		"prefix": "exp",
		"body": ["exp(${1:x})"]},
	"isclose() from the cmath module": {
		"description": "isclose() from the cmath module",
		"prefix": "isclose",
		"body": ["isclose(${1:a}, ${2:b}, ${3:*}, ${4:rel_tol=1e-09}, ${5:abs_tol=0.0})"]},
	"isfinite() from the cmath module": {
		"description": "isfinite() from the cmath module",
		"prefix": "isfinite",
		"body": ["isfinite(${1:x})"]},
	"isinf() from the cmath module": {
		"description": "isinf() from the cmath module",
		"prefix": "isinf",
		"body": ["isinf(${1:x})"]},
	"isnan() from the cmath module": {
		"description": "isnan() from the cmath module",
		"prefix": "isnan",
		"body": ["isnan(${1:x})"]},
	"log10() from the cmath module": {
		"description": "log10() from the cmath module",
		"prefix": "log10",
		"body": ["log10(${1:x})"]},
	"log() from the cmath module": {
		"description": "log() from the cmath module",
		"prefix": "log",
		"body": ["log(${1:x[}, ${2:base]})"]},
	"phase() from the cmath module": {
		"description": "phase() from the cmath module",
		"prefix": "phase",
		"body": ["phase(${1:x})"]},
	"pi() from the cmath module": {
		"description": "pi() from the cmath module",
		"prefix": "pi",
		"body": ["pi()"]},
	"polar() from the cmath module": {
		"description": "polar() from the cmath module",
		"prefix": "polar",
		"body": ["polar(${1:x})"]},
	"rect() from the cmath module": {
		"description": "rect() from the cmath module",
		"prefix": "rect",
		"body": ["rect(${1:r}, ${2:phi})"]},
	"sin() from the cmath module": {
		"description": "sin() from the cmath module",
		"prefix": "sin",
		"body": ["sin(${1:x})"]},
	"sinh() from the cmath module": {
		"description": "sinh() from the cmath module",
		"prefix": "sinh",
		"body": ["sinh(${1:x})"]},
	"sqrt() from the cmath module": {
		"description": "sqrt() from the cmath module",
		"prefix": "sqrt",
		"body": ["sqrt(${1:x})"]},
	"tan() from the cmath module": {
		"description": "tan() from the cmath module",
		"prefix": "tan",
		"body": ["tan(${1:x})"]},
	"tanh() from the cmath module": {
		"description": "tanh() from the cmath module",
		"prefix": "tanh",
		"body": ["tanh(${1:x})"]},
// cmd completion
	"Cmd from the cmd module": {
		"description": "Cmd from the cmd module",
		"prefix": "Cmd",
		"body": ["Cmd(${1:completekey='tab'}, ${2:stdin=None}, ${3:stdout=None})"]},
	"cmdloop() from the cmd module": {
		"description": "cmdloop() from the cmd module",
		"prefix": "cmdloop",
		"body": ["cmdloop(${1:intro=None})"]},
	"cmdqueue() from the cmd module": {
		"description": "cmdqueue() from the cmd module",
		"prefix": "cmdqueue",
		"body": ["cmdqueue()"]},
	"completedefault() from the cmd module": {
		"description": "completedefault() from the cmd module",
		"prefix": "completedefault",
		"body": ["completedefault(${1:text}, ${2:line}, ${3:begidx}, ${4:endidx})"]},
	"default() from the cmd module": {
		"description": "default() from the cmd module",
		"prefix": "default",
		"body": ["default(${1:line})"]},
	"doc_header() from the cmd module": {
		"description": "doc_header() from the cmd module",
		"prefix": "doc_header",
		"body": ["doc_header()"]},
	"emptyline() from the cmd module": {
		"description": "emptyline() from the cmd module",
		"prefix": "emptyline",
		"body": ["emptyline(${1:})"]},
	"identchars() from the cmd module": {
		"description": "identchars() from the cmd module",
		"prefix": "identchars",
		"body": ["identchars()"]},
	"intro() from the cmd module": {
		"description": "intro() from the cmd module",
		"prefix": "intro",
		"body": ["intro()"]},
	"lastcmd() from the cmd module": {
		"description": "lastcmd() from the cmd module",
		"prefix": "lastcmd",
		"body": ["lastcmd()"]},
	"misc_header() from the cmd module": {
		"description": "misc_header() from the cmd module",
		"prefix": "misc_header",
		"body": ["misc_header()"]},
	"onecmd() from the cmd module": {
		"description": "onecmd() from the cmd module",
		"prefix": "onecmd",
		"body": ["onecmd(${1:str})"]},
	"postcmd() from the cmd module": {
		"description": "postcmd() from the cmd module",
		"prefix": "postcmd",
		"body": ["postcmd(${1:stop}, ${2:line})"]},
	"postloop() from the cmd module": {
		"description": "postloop() from the cmd module",
		"prefix": "postloop",
		"body": ["postloop(${1:})"]},
	"precmd() from the cmd module": {
		"description": "precmd() from the cmd module",
		"prefix": "precmd",
		"body": ["precmd(${1:line})"]},
	"preloop() from the cmd module": {
		"description": "preloop() from the cmd module",
		"prefix": "preloop",
		"body": ["preloop(${1:})"]},
	"prompt() from the cmd module": {
		"description": "prompt() from the cmd module",
		"prefix": "prompt",
		"body": ["prompt()"]},
	"ruler() from the cmd module": {
		"description": "ruler() from the cmd module",
		"prefix": "ruler",
		"body": ["ruler()"]},
	"undoc_header() from the cmd module": {
		"description": "undoc_header() from the cmd module",
		"prefix": "undoc_header",
		"body": ["undoc_header()"]},
	"use_rawinput() from the cmd module": {
		"description": "use_rawinput() from the cmd module",
		"prefix": "use_rawinput",
		"body": ["use_rawinput()"]},
// code completion
	"InteractiveConsole from the code module": {
		"description": "InteractiveConsole from the code module",
		"prefix": "InteractiveConsole",
		"body": ["InteractiveConsole(${1:locals=None}, ${2:filename=\"\"})"]},
	"InteractiveInterpreter from the code module": {
		"description": "InteractiveInterpreter from the code module",
		"prefix": "InteractiveInterpreter",
		"body": ["InteractiveInterpreter(${1:locals=None})"]},
	"compile_command() from the code module": {
		"description": "compile_command() from the code module",
		"prefix": "compile_command",
		"body": ["compile_command(${1:source}, ${2:filename=\"\"}, ${3:symbol=\"single\"})"]},
	"interact() from the code module": {
		"description": "interact() from the code module",
		"prefix": "interact",
		"body": ["interact(${1:banner=None}, ${2:readfunc=None}, ${3:local=None})"]},
	"interact() from the code module": {
		"description": "interact() from the code module",
		"prefix": "interact",
		"body": ["interact(${1:banner=None})"]},
	"push() from the code module": {
		"description": "push() from the code module",
		"prefix": "push",
		"body": ["push(${1:line})"]},
	"raw_input() from the code module": {
		"description": "raw_input() from the code module",
		"prefix": "raw_input",
		"body": ["raw_input(${1:prompt=\"\"})"]},
	"resetbuffer() from the code module": {
		"description": "resetbuffer() from the code module",
		"prefix": "resetbuffer",
		"body": ["resetbuffer(${1:})"]},
	"runcode() from the code module": {
		"description": "runcode() from the code module",
		"prefix": "runcode",
		"body": ["runcode(${1:code})"]},
	"runsource() from the code module": {
		"description": "runsource() from the code module",
		"prefix": "runsource",
		"body": ["runsource(${1:source}, ${2:filename=\"\"}, ${3:symbol=\"single\"})"]},
	"showsyntaxerror() from the code module": {
		"description": "showsyntaxerror() from the code module",
		"prefix": "showsyntaxerror",
		"body": ["showsyntaxerror(${1:filename=None})"]},
	"showtraceback() from the code module": {
		"description": "showtraceback() from the code module",
		"prefix": "showtraceback",
		"body": ["showtraceback(${1:})"]},
	"write() from the code module": {
		"description": "write() from the code module",
		"prefix": "write",
		"body": ["write(${1:data})"]},
// codecs completion
	"BOM from the codecs module": {
		"description": "BOM from the codecs module",
		"prefix": "BOM",
		"body": ["BOM"]},
	"BOM_BE from the codecs module": {
		"description": "BOM_BE from the codecs module",
		"prefix": "BOM_BE",
		"body": ["BOM_BE"]},
	"BOM_LE from the codecs module": {
		"description": "BOM_LE from the codecs module",
		"prefix": "BOM_LE",
		"body": ["BOM_LE"]},
	"BOM_UTF16 from the codecs module": {
		"description": "BOM_UTF16 from the codecs module",
		"prefix": "BOM_UTF16",
		"body": ["BOM_UTF16"]},
	"BOM_UTF16_BE from the codecs module": {
		"description": "BOM_UTF16_BE from the codecs module",
		"prefix": "BOM_UTF16_BE",
		"body": ["BOM_UTF16_BE"]},
	"BOM_UTF16_LE from the codecs module": {
		"description": "BOM_UTF16_LE from the codecs module",
		"prefix": "BOM_UTF16_LE",
		"body": ["BOM_UTF16_LE"]},
	"BOM_UTF32 from the codecs module": {
		"description": "BOM_UTF32 from the codecs module",
		"prefix": "BOM_UTF32",
		"body": ["BOM_UTF32"]},
	"BOM_UTF32_BE from the codecs module": {
		"description": "BOM_UTF32_BE from the codecs module",
		"prefix": "BOM_UTF32_BE",
		"body": ["BOM_UTF32_BE"]},
	"BOM_UTF32_LE from the codecs module": {
		"description": "BOM_UTF32_LE from the codecs module",
		"prefix": "BOM_UTF32_LE",
		"body": ["BOM_UTF32_LE"]},
	"BOM_UTF8 from the codecs module": {
		"description": "BOM_UTF8 from the codecs module",
		"prefix": "BOM_UTF8",
		"body": ["BOM_UTF8"]},
	"CodecInfo from the codecs module": {
		"description": "CodecInfo from the codecs module",
		"prefix": "CodecInfo",
		"body": ["CodecInfo(${1:encode}, ${2:decode}, ${3:streamreader=None}, ${4:streamwriter=None}, ${5:incrementalencoder=None}, ${6:incrementaldecoder=None}, ${7:name=None})"]},
	"EncodedFile from the codecs module": {
		"description": "EncodedFile from the codecs module",
		"prefix": "EncodedFile",
		"body": ["EncodedFile(${1:file}, ${2:data_encoding}, ${3:file_encoding=None}, ${4:errors='strict'})"]},
	"IncrementalDecoder from the codecs module": {
		"description": "IncrementalDecoder from the codecs module",
		"prefix": "IncrementalDecoder",
		"body": ["IncrementalDecoder(${1:errors='strict'})"]},
	"IncrementalEncoder from the codecs module": {
		"description": "IncrementalEncoder from the codecs module",
		"prefix": "IncrementalEncoder",
		"body": ["IncrementalEncoder(${1:errors='strict'})"]},
	"StreamReader from the codecs module": {
		"description": "StreamReader from the codecs module",
		"prefix": "StreamReader",
		"body": ["StreamReader(${1:stream}, ${2:errors='strict'})"]},
	"StreamReaderWriter from the codecs module": {
		"description": "StreamReaderWriter from the codecs module",
		"prefix": "StreamReaderWriter",
		"body": ["StreamReaderWriter(${1:stream}, ${2:Reader}, ${3:Writer}, ${4:errors})"]},
	"StreamRecoder from the codecs module": {
		"description": "StreamRecoder from the codecs module",
		"prefix": "StreamRecoder",
		"body": ["StreamRecoder(${1:stream}, ${2:encode}, ${3:decode}, ${4:Reader}, ${5:Writer}, ${6:errors})"]},
	"StreamWriter from the codecs module": {
		"description": "StreamWriter from the codecs module",
		"prefix": "StreamWriter",
		"body": ["StreamWriter(${1:stream}, ${2:errors='strict'})"]},
	"ToASCII from the codecs module": {
		"description": "ToASCII from the codecs module",
		"prefix": "ToASCII",
		"body": ["ToASCII(${1:label})"]},
	"ToUnicode from the codecs module": {
		"description": "ToUnicode from the codecs module",
		"prefix": "ToUnicode",
		"body": ["ToUnicode(${1:label})"]},
	"backslashreplace_errors() from the codecs module": {
		"description": "backslashreplace_errors() from the codecs module",
		"prefix": "backslashreplace_errors",
		"body": ["backslashreplace_errors(${1:exception})"]},
	"decode() from the codecs module": {
		"description": "decode() from the codecs module",
		"prefix": "decode",
		"body": ["decode(${1:input[}, ${2:errors]})"]},
	"decode() from the codecs module": {
		"description": "decode() from the codecs module",
		"prefix": "decode",
		"body": ["decode(${1:obj}, ${2:encoding='utf-8'}, ${3:errors='strict'})"]},
	"encode() from the codecs module": {
		"description": "encode() from the codecs module",
		"prefix": "encode",
		"body": ["encode(${1:input[}, ${2:errors]})"]},
	"encode() from the codecs module": {
		"description": "encode() from the codecs module",
		"prefix": "encode",
		"body": ["encode(${1:obj}, ${2:encoding='utf-8'}, ${3:errors='strict'})"]},
	"getdecoder() from the codecs module": {
		"description": "getdecoder() from the codecs module",
		"prefix": "getdecoder",
		"body": ["getdecoder(${1:encoding})"]},
	"getencoder() from the codecs module": {
		"description": "getencoder() from the codecs module",
		"prefix": "getencoder",
		"body": ["getencoder(${1:encoding})"]},
	"getincrementaldecoder() from the codecs module": {
		"description": "getincrementaldecoder() from the codecs module",
		"prefix": "getincrementaldecoder",
		"body": ["getincrementaldecoder(${1:encoding})"]},
	"getincrementalencoder() from the codecs module": {
		"description": "getincrementalencoder() from the codecs module",
		"prefix": "getincrementalencoder",
		"body": ["getincrementalencoder(${1:encoding})"]},
	"getreader() from the codecs module": {
		"description": "getreader() from the codecs module",
		"prefix": "getreader",
		"body": ["getreader(${1:encoding})"]},
	"getstate() from the codecs module": {
		"description": "getstate() from the codecs module",
		"prefix": "getstate",
		"body": ["getstate(${1:})"]},
	"getwriter() from the codecs module": {
		"description": "getwriter() from the codecs module",
		"prefix": "getwriter",
		"body": ["getwriter(${1:encoding})"]},
	"ignore_errors() from the codecs module": {
		"description": "ignore_errors() from the codecs module",
		"prefix": "ignore_errors",
		"body": ["ignore_errors(${1:exception})"]},
	"iterdecode() from the codecs module": {
		"description": "iterdecode() from the codecs module",
		"prefix": "iterdecode",
		"body": ["iterdecode(${1:iterator}, ${2:encoding}, ${3:errors='strict'}, ${4:**kwargs})"]},
	"iterencode() from the codecs module": {
		"description": "iterencode() from the codecs module",
		"prefix": "iterencode",
		"body": ["iterencode(${1:iterator}, ${2:encoding}, ${3:errors='strict'}, ${4:**kwargs})"]},
	"lookup() from the codecs module": {
		"description": "lookup() from the codecs module",
		"prefix": "lookup",
		"body": ["lookup(${1:encoding})"]},
	"lookup_error() from the codecs module": {
		"description": "lookup_error() from the codecs module",
		"prefix": "lookup_error",
		"body": ["lookup_error(${1:name})"]},
	"nameprep() from the codecs module": {
		"description": "nameprep() from the codecs module",
		"prefix": "nameprep",
		"body": ["nameprep(${1:label})"]},
	"namereplace_errors() from the codecs module": {
		"description": "namereplace_errors() from the codecs module",
		"prefix": "namereplace_errors",
		"body": ["namereplace_errors(${1:exception})"]},
	"open() from the codecs module": {
		"description": "open() from the codecs module",
		"prefix": "open",
		"body": ["open(${1:filename}, ${2:mode='r'}, ${3:encoding=None}, ${4:errors='strict'}, ${5:buffering=1})"]},
	"register() from the codecs module": {
		"description": "register() from the codecs module",
		"prefix": "register",
		"body": ["register(${1:search_function})"]},
	"register_error() from the codecs module": {
		"description": "register_error() from the codecs module",
		"prefix": "register_error",
		"body": ["register_error(${1:name}, ${2:error_handler})"]},
	"replace_errors() from the codecs module": {
		"description": "replace_errors() from the codecs module",
		"prefix": "replace_errors",
		"body": ["replace_errors(${1:exception})"]},
	"setstate() from the codecs module": {
		"description": "setstate() from the codecs module",
		"prefix": "setstate",
		"body": ["setstate(${1:state})"]},
	"strict_errors() from the codecs module": {
		"description": "strict_errors() from the codecs module",
		"prefix": "strict_errors",
		"body": ["strict_errors(${1:exception})"]},
	"xmlcharrefreplace_errors() from the codecs module": {
		"description": "xmlcharrefreplace_errors() from the codecs module",
		"prefix": "xmlcharrefreplace_errors",
		"body": ["xmlcharrefreplace_errors(${1:exception})"]},
// codeop completion
	"CommandCompiler from the codeop module": {
		"description": "CommandCompiler from the codeop module",
		"prefix": "CommandCompiler",
		"body": ["CommandCompiler"]},
	"Compile from the codeop module": {
		"description": "Compile from the codeop module",
		"prefix": "Compile",
		"body": ["Compile"]},
	"compile_command() from the codeop module": {
		"description": "compile_command() from the codeop module",
		"prefix": "compile_command",
		"body": ["compile_command(${1:source,})"]},
// collections completion
	"ChainMap from the collections module": {
		"description": "ChainMap from the collections module",
		"prefix": "ChainMap",
		"body": ["ChainMap(${1:*maps})"]},
	"Counter from the collections module": {
		"description": "Counter from the collections module",
		"prefix": "Counter",
		"body": ["Counter(${1:[iterable-or-mapping]})"]},
	"OrderedDict from the collections module": {
		"description": "OrderedDict from the collections module",
		"prefix": "OrderedDict",
		"body": ["OrderedDict(${1:[items]})"]},
	"UserDict from the collections module": {
		"description": "UserDict from the collections module",
		"prefix": "UserDict",
		"body": ["UserDict(${1:[initialdata]})"]},
	"UserList from the collections module": {
		"description": "UserList from the collections module",
		"prefix": "UserList",
		"body": ["UserList(${1:[list]})"]},
	"UserString from the collections module": {
		"description": "UserString from the collections module",
		"prefix": "UserString",
		"body": ["UserString(${1:[sequence]})"]},
	"_asdict() from the collections module": {
		"description": "_asdict() from the collections module",
		"prefix": "_asdict",
		"body": ["_asdict(${1:})"]},
	"_fields() from the collections module": {
		"description": "_fields() from the collections module",
		"prefix": "_fields",
		"body": ["_fields()"]},
	"_make() from the collections module": {
		"description": "_make() from the collections module",
		"prefix": "_make",
		"body": ["_make(${1:iterable})"]},
	"_replace() from the collections module": {
		"description": "_replace() from the collections module",
		"prefix": "_replace",
		"body": ["_replace(${1:kwargs})"]},
	"_source() from the collections module": {
		"description": "_source() from the collections module",
		"prefix": "_source",
		"body": ["_source()"]},
	"defaultdict() from the collections module": {
		"description": "defaultdict() from the collections module",
		"prefix": "defaultdict",
		"body": ["defaultdict(${1:[default_factory[}, ${2:...]]})"]},
	"deque() from the collections module": {
		"description": "deque() from the collections module",
		"prefix": "deque",
		"body": ["deque(${1:[iterable[}, ${2:maxlen]]})"]},
	"namedtuple() from the collections module": {
		"description": "namedtuple() from the collections module",
		"prefix": "namedtuple",
		"body": ["namedtuple(${1:typename,})"]},
// collections.abc completion
	"AsyncIterable from the collections.abc module": {
		"description": "AsyncIterable from the collections.abc module",
		"prefix": "AsyncIterable",
		"body": ["AsyncIterable"]},
	"AsyncIterator from the collections.abc module": {
		"description": "AsyncIterator from the collections.abc module",
		"prefix": "AsyncIterator",
		"body": ["AsyncIterator"]},
	"Awaitable from the collections.abc module": {
		"description": "Awaitable from the collections.abc module",
		"prefix": "Awaitable",
		"body": ["Awaitable"]},
	"Callable from the collections.abc module": {
		"description": "Callable from the collections.abc module",
		"prefix": "Callable",
		"body": ["Callable"]},
	"Container from the collections.abc module": {
		"description": "Container from the collections.abc module",
		"prefix": "Container",
		"body": ["Container"]},
	"Coroutine from the collections.abc module": {
		"description": "Coroutine from the collections.abc module",
		"prefix": "Coroutine",
		"body": ["Coroutine"]},
	"Generator from the collections.abc module": {
		"description": "Generator from the collections.abc module",
		"prefix": "Generator",
		"body": ["Generator"]},
	"Hashable from the collections.abc module": {
		"description": "Hashable from the collections.abc module",
		"prefix": "Hashable",
		"body": ["Hashable"]},
	"ItemsView from the collections.abc module": {
		"description": "ItemsView from the collections.abc module",
		"prefix": "ItemsView",
		"body": ["ItemsView"]},
	"Iterable from the collections.abc module": {
		"description": "Iterable from the collections.abc module",
		"prefix": "Iterable",
		"body": ["Iterable"]},
	"Iterator from the collections.abc module": {
		"description": "Iterator from the collections.abc module",
		"prefix": "Iterator",
		"body": ["Iterator"]},
	"KeysView from the collections.abc module": {
		"description": "KeysView from the collections.abc module",
		"prefix": "KeysView",
		"body": ["KeysView"]},
	"Mapping from the collections.abc module": {
		"description": "Mapping from the collections.abc module",
		"prefix": "Mapping",
		"body": ["Mapping"]},
	"MappingView from the collections.abc module": {
		"description": "MappingView from the collections.abc module",
		"prefix": "MappingView",
		"body": ["MappingView"]},
	"MutableMapping from the collections.abc module": {
		"description": "MutableMapping from the collections.abc module",
		"prefix": "MutableMapping",
		"body": ["MutableMapping"]},
	"MutableSequence from the collections.abc module": {
		"description": "MutableSequence from the collections.abc module",
		"prefix": "MutableSequence",
		"body": ["MutableSequence"]},
	"MutableSet from the collections.abc module": {
		"description": "MutableSet from the collections.abc module",
		"prefix": "MutableSet",
		"body": ["MutableSet"]},
	"Sequence from the collections.abc module": {
		"description": "Sequence from the collections.abc module",
		"prefix": "Sequence",
		"body": ["Sequence"]},
	"Set from the collections.abc module": {
		"description": "Set from the collections.abc module",
		"prefix": "Set",
		"body": ["Set"]},
	"Sized from the collections.abc module": {
		"description": "Sized from the collections.abc module",
		"prefix": "Sized",
		"body": ["Sized"]},
	"ValuesView from the collections.abc module": {
		"description": "ValuesView from the collections.abc module",
		"prefix": "ValuesView",
		"body": ["ValuesView"]},
// colorsys completion
	"hls_to_rgb() from the colorsys module": {
		"description": "hls_to_rgb() from the colorsys module",
		"prefix": "hls_to_rgb",
		"body": ["hls_to_rgb(${1:h}, ${2:l}, ${3:s})"]},
	"hsv_to_rgb() from the colorsys module": {
		"description": "hsv_to_rgb() from the colorsys module",
		"prefix": "hsv_to_rgb",
		"body": ["hsv_to_rgb(${1:h}, ${2:s}, ${3:v})"]},
	"rgb_to_hls() from the colorsys module": {
		"description": "rgb_to_hls() from the colorsys module",
		"prefix": "rgb_to_hls",
		"body": ["rgb_to_hls(${1:r}, ${2:g}, ${3:b})"]},
	"rgb_to_hsv() from the colorsys module": {
		"description": "rgb_to_hsv() from the colorsys module",
		"prefix": "rgb_to_hsv",
		"body": ["rgb_to_hsv(${1:r}, ${2:g}, ${3:b})"]},
	"rgb_to_yiq() from the colorsys module": {
		"description": "rgb_to_yiq() from the colorsys module",
		"prefix": "rgb_to_yiq",
		"body": ["rgb_to_yiq(${1:r}, ${2:g}, ${3:b})"]},
	"yiq_to_rgb() from the colorsys module": {
		"description": "yiq_to_rgb() from the colorsys module",
		"prefix": "yiq_to_rgb",
		"body": ["yiq_to_rgb(${1:y,})"]},
// compileall completion
	"compile_dir() from the compileall module": {
		"description": "compile_dir() from the compileall module",
		"prefix": "compile_dir",
		"body": ["compile_dir(${1:dir}, ${2:maxlevels=10}, ${3:ddir=None}, ${4:force=False}, ${5:rx=None}, ${6:quiet=0}, ${7:legacy=False}, ${8:optimize=-1}, ${9:workers=1})"]},
	"compile_file() from the compileall module": {
		"description": "compile_file() from the compileall module",
		"prefix": "compile_file",
		"body": ["compile_file(${1:fullname}, ${2:ddir=None}, ${3:force=False}, ${4:rx=None}, ${5:quiet=0}, ${6:legacy=False}, ${7:optimize=-1})"]},
	"compile_path() from the compileall module": {
		"description": "compile_path() from the compileall module",
		"prefix": "compile_path",
		"body": ["compile_path(${1:skip_curdir=True,})"]},
// concurrent.futures completion
	"BrokenProcessPool from the concurrent.futures module": {
		"description": "BrokenProcessPool from the concurrent.futures module",
		"prefix": "BrokenProcessPool",
		"body": ["BrokenProcessPool"]},
	"CancelledError from the concurrent.futures module": {
		"description": "CancelledError from the concurrent.futures module",
		"prefix": "CancelledError",
		"body": ["CancelledError"]},
	"Executor from the concurrent.futures module": {
		"description": "Executor from the concurrent.futures module",
		"prefix": "Executor",
		"body": ["Executor"]},
	"Future from the concurrent.futures module": {
		"description": "Future from the concurrent.futures module",
		"prefix": "Future",
		"body": ["Future"]},
	"ProcessPoolExecutor from the concurrent.futures module": {
		"description": "ProcessPoolExecutor from the concurrent.futures module",
		"prefix": "ProcessPoolExecutor",
		"body": ["ProcessPoolExecutor(${1:max_workers=None})"]},
	"ThreadPoolExecutor from the concurrent.futures module": {
		"description": "ThreadPoolExecutor from the concurrent.futures module",
		"prefix": "ThreadPoolExecutor",
		"body": ["ThreadPoolExecutor(${1:max_workers=None})"]},
	"TimeoutError from the concurrent.futures module": {
		"description": "TimeoutError from the concurrent.futures module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"as_completed() from the concurrent.futures module": {
		"description": "as_completed() from the concurrent.futures module",
		"prefix": "as_completed",
		"body": ["as_completed(${1:fs}, ${2:timeout=None})"]},
	"wait() from the concurrent.futures module": {
		"description": "wait() from the concurrent.futures module",
		"prefix": "wait",
		"body": ["wait(${1:fs,})"]},
// configparser completion
	"BOOLEAN_STATES from the configparser module": {
		"description": "BOOLEAN_STATES from the configparser module",
		"prefix": "BOOLEAN_STATES",
		"body": ["BOOLEAN_STATES"]},
	"BasicInterpolation from the configparser module": {
		"description": "BasicInterpolation from the configparser module",
		"prefix": "BasicInterpolation",
		"body": ["BasicInterpolation"]},
	"ConfigParser from the configparser module": {
		"description": "ConfigParser from the configparser module",
		"prefix": "ConfigParser",
		"body": ["ConfigParser(${1:defaults=None}, ${2:dict_type=collections.OrderedDict}, ${3:allow_no_value=False}, ${4:delimiters=}, ${5:'='}, ${6:':'})"]},
	"DuplicateOptionError from the configparser module": {
		"description": "DuplicateOptionError from the configparser module",
		"prefix": "DuplicateOptionError",
		"body": ["DuplicateOptionError"]},
	"DuplicateSectionError from the configparser module": {
		"description": "DuplicateSectionError from the configparser module",
		"prefix": "DuplicateSectionError",
		"body": ["DuplicateSectionError"]},
	"Error from the configparser module": {
		"description": "Error from the configparser module",
		"prefix": "Error",
		"body": ["Error"]},
	"ExtendedInterpolation from the configparser module": {
		"description": "ExtendedInterpolation from the configparser module",
		"prefix": "ExtendedInterpolation",
		"body": ["ExtendedInterpolation"]},
	"InterpolationDepthError from the configparser module": {
		"description": "InterpolationDepthError from the configparser module",
		"prefix": "InterpolationDepthError",
		"body": ["InterpolationDepthError"]},
	"InterpolationError from the configparser module": {
		"description": "InterpolationError from the configparser module",
		"prefix": "InterpolationError",
		"body": ["InterpolationError"]},
	"InterpolationMissingOptionError from the configparser module": {
		"description": "InterpolationMissingOptionError from the configparser module",
		"prefix": "InterpolationMissingOptionError",
		"body": ["InterpolationMissingOptionError"]},
	"InterpolationSyntaxError from the configparser module": {
		"description": "InterpolationSyntaxError from the configparser module",
		"prefix": "InterpolationSyntaxError",
		"body": ["InterpolationSyntaxError"]},
	"MAX_INTERPOLATION_DEPTH from the configparser module": {
		"description": "MAX_INTERPOLATION_DEPTH from the configparser module",
		"prefix": "MAX_INTERPOLATION_DEPTH",
		"body": ["MAX_INTERPOLATION_DEPTH"]},
	"MissingSectionHeaderError from the configparser module": {
		"description": "MissingSectionHeaderError from the configparser module",
		"prefix": "MissingSectionHeaderError",
		"body": ["MissingSectionHeaderError"]},
	"NoOptionError from the configparser module": {
		"description": "NoOptionError from the configparser module",
		"prefix": "NoOptionError",
		"body": ["NoOptionError"]},
	"NoSectionError from the configparser module": {
		"description": "NoSectionError from the configparser module",
		"prefix": "NoSectionError",
		"body": ["NoSectionError"]},
	"ParsingError from the configparser module": {
		"description": "ParsingError from the configparser module",
		"prefix": "ParsingError",
		"body": ["ParsingError"]},
	"RawConfigParser from the configparser module": {
		"description": "RawConfigParser from the configparser module",
		"prefix": "RawConfigParser",
		"body": ["RawConfigParser(${1:defaults=None}, ${2:dict_type=collections.OrderedDict}, ${3:allow_no_value=False}, ${4:*}, ${5:delimiters=}, ${6:'='}, ${7:':'})"]},
	"SECTCRE from the configparser module": {
		"description": "SECTCRE from the configparser module",
		"prefix": "SECTCRE",
		"body": ["SECTCRE"]},
	"optionxform() from the configparser module": {
		"description": "optionxform() from the configparser module",
		"prefix": "optionxform",
		"body": ["optionxform(${1:option})"]},
// contextlib completion
	"ContextDecorator from the contextlib module": {
		"description": "ContextDecorator from the contextlib module",
		"prefix": "ContextDecorator",
		"body": ["ContextDecorator"]},
	"ExitStack from the contextlib module": {
		"description": "ExitStack from the contextlib module",
		"prefix": "ExitStack",
		"body": ["ExitStack"]},
	"closing() from the contextlib module": {
		"description": "closing() from the contextlib module",
		"prefix": "closing",
		"body": ["closing(${1:thing})"]},
	"contextmanager() from the contextlib module": {
		"description": "contextmanager() from the contextlib module",
		"prefix": "contextmanager",
		"body": ["contextmanager()"]},
	"redirect_stderr() from the contextlib module": {
		"description": "redirect_stderr() from the contextlib module",
		"prefix": "redirect_stderr",
		"body": ["redirect_stderr(${1:new_target})"]},
	"redirect_stdout() from the contextlib module": {
		"description": "redirect_stdout() from the contextlib module",
		"prefix": "redirect_stdout",
		"body": ["redirect_stdout(${1:new_target})"]},
	"suppress() from the contextlib module": {
		"description": "suppress() from the contextlib module",
		"prefix": "suppress",
		"body": ["suppress(${1:*exceptions})"]},
// copy completion
	"copy() from the copy module": {
		"description": "copy() from the copy module",
		"prefix": "copy",
		"body": ["copy(${1:x})"]},
	"deepcopy() from the copy module": {
		"description": "deepcopy() from the copy module",
		"prefix": "deepcopy",
		"body": ["deepcopy(${1:x})"]},
	"error() from the copy module": {
		"description": "error() from the copy module",
		"prefix": "error",
		"body": ["error()"]},
// copyreg completion
	"constructor() from the copyreg module": {
		"description": "constructor() from the copyreg module",
		"prefix": "constructor",
		"body": ["constructor(${1:object})"]},
	"pickle() from the copyreg module": {
		"description": "pickle() from the copyreg module",
		"prefix": "pickle",
		"body": ["pickle(${1:type,})"]},
// cProfile completion
	"constructor() from the cProfile module": {
		"description": "constructor() from the cProfile module",
		"prefix": "constructor",
		"body": ["constructor(${1:object})"]},
	"pickle() from the cProfile module": {
		"description": "pickle() from the cProfile module",
		"prefix": "pickle",
		"body": ["pickle(${1:type,})"]},
// crypt completion
	"METHOD_CRYPT from the crypt module": {
		"description": "METHOD_CRYPT from the crypt module",
		"prefix": "METHOD_CRYPT",
		"body": ["METHOD_CRYPT"]},
	"METHOD_MD5 from the crypt module": {
		"description": "METHOD_MD5 from the crypt module",
		"prefix": "METHOD_MD5",
		"body": ["METHOD_MD5"]},
	"METHOD_SHA256 from the crypt module": {
		"description": "METHOD_SHA256 from the crypt module",
		"prefix": "METHOD_SHA256",
		"body": ["METHOD_SHA256"]},
	"METHOD_SHA512 from the crypt module": {
		"description": "METHOD_SHA512 from the crypt module",
		"prefix": "METHOD_SHA512",
		"body": ["METHOD_SHA512"]},
	"crypt() from the crypt module": {
		"description": "crypt() from the crypt module",
		"prefix": "crypt",
		"body": ["crypt(${1:word}, ${2:salt=None})"]},
	"methods() from the crypt module": {
		"description": "methods() from the crypt module",
		"prefix": "methods",
		"body": ["methods()"]},
	"mksalt() from the crypt module": {
		"description": "mksalt() from the crypt module",
		"prefix": "mksalt",
		"body": ["mksalt(${1:method=None})"]},
// csv completion
	"Dialect from the csv module": {
		"description": "Dialect from the csv module",
		"prefix": "Dialect",
		"body": ["Dialect"]},
	"DictReader from the csv module": {
		"description": "DictReader from the csv module",
		"prefix": "DictReader",
		"body": ["DictReader(${1:csvfile}, ${2:fieldnames=None}, ${3:restkey=None}, ${4:restval=None}, ${5:dialect='excel'}, ${6:*args}, ${7:**kwds})"]},
	"DictWriter from the csv module": {
		"description": "DictWriter from the csv module",
		"prefix": "DictWriter",
		"body": ["DictWriter(${1:csvfile}, ${2:fieldnames}, ${3:restval=''}, ${4:extrasaction='raise'}, ${5:dialect='excel'}, ${6:*args}, ${7:**kwds})"]},
	"Error from the csv module": {
		"description": "Error from the csv module",
		"prefix": "Error",
		"body": ["Error"]},
	"QUOTE_ALL from the csv module": {
		"description": "QUOTE_ALL from the csv module",
		"prefix": "QUOTE_ALL",
		"body": ["QUOTE_ALL"]},
	"QUOTE_MINIMAL from the csv module": {
		"description": "QUOTE_MINIMAL from the csv module",
		"prefix": "QUOTE_MINIMAL",
		"body": ["QUOTE_MINIMAL"]},
	"QUOTE_NONE from the csv module": {
		"description": "QUOTE_NONE from the csv module",
		"prefix": "QUOTE_NONE",
		"body": ["QUOTE_NONE"]},
	"QUOTE_NONNUMERIC from the csv module": {
		"description": "QUOTE_NONNUMERIC from the csv module",
		"prefix": "QUOTE_NONNUMERIC",
		"body": ["QUOTE_NONNUMERIC"]},
	"Sniffer from the csv module": {
		"description": "Sniffer from the csv module",
		"prefix": "Sniffer",
		"body": ["Sniffer"]},
	"__next__() from the csv module": {
		"description": "__next__() from the csv module",
		"prefix": "__next__",
		"body": ["__next__(${1:})"]},
	"delimiter() from the csv module": {
		"description": "delimiter() from the csv module",
		"prefix": "delimiter",
		"body": ["delimiter()"]},
	"dialect() from the csv module": {
		"description": "dialect() from the csv module",
		"prefix": "dialect",
		"body": ["dialect()"]},
	"doublequote() from the csv module": {
		"description": "doublequote() from the csv module",
		"prefix": "doublequote",
		"body": ["doublequote()"]},
	"escapechar() from the csv module": {
		"description": "escapechar() from the csv module",
		"prefix": "escapechar",
		"body": ["escapechar()"]},
	"excel() from the csv module": {
		"description": "excel() from the csv module",
		"prefix": "excel",
		"body": ["excel()"]},
	"excel_tab() from the csv module": {
		"description": "excel_tab() from the csv module",
		"prefix": "excel_tab",
		"body": ["excel_tab()"]},
	"field_size_limit() from the csv module": {
		"description": "field_size_limit() from the csv module",
		"prefix": "field_size_limit",
		"body": ["field_size_limit(${1:[new_limit]})"]},
	"fieldnames() from the csv module": {
		"description": "fieldnames() from the csv module",
		"prefix": "fieldnames",
		"body": ["fieldnames()"]},
	"get_dialect() from the csv module": {
		"description": "get_dialect() from the csv module",
		"prefix": "get_dialect",
		"body": ["get_dialect(${1:name})"]},
	"line_num() from the csv module": {
		"description": "line_num() from the csv module",
		"prefix": "line_num",
		"body": ["line_num()"]},
	"lineterminator() from the csv module": {
		"description": "lineterminator() from the csv module",
		"prefix": "lineterminator",
		"body": ["lineterminator()"]},
	"list_dialects() from the csv module": {
		"description": "list_dialects() from the csv module",
		"prefix": "list_dialects",
		"body": ["list_dialects(${1:})"]},
	"quotechar() from the csv module": {
		"description": "quotechar() from the csv module",
		"prefix": "quotechar",
		"body": ["quotechar()"]},
	"quoting() from the csv module": {
		"description": "quoting() from the csv module",
		"prefix": "quoting",
		"body": ["quoting()"]},
	"reader() from the csv module": {
		"description": "reader() from the csv module",
		"prefix": "reader",
		"body": ["reader(${1:csvfile}, ${2:dialect='excel'}, ${3:**fmtparams})"]},
	"register_dialect() from the csv module": {
		"description": "register_dialect() from the csv module",
		"prefix": "register_dialect",
		"body": ["register_dialect(${1:name[}, ${2:dialect[}, ${3:**fmtparams]]})"]},
	"skipinitialspace() from the csv module": {
		"description": "skipinitialspace() from the csv module",
		"prefix": "skipinitialspace",
		"body": ["skipinitialspace()"]},
	"strict() from the csv module": {
		"description": "strict() from the csv module",
		"prefix": "strict",
		"body": ["strict()"]},
	"unix_dialect() from the csv module": {
		"description": "unix_dialect() from the csv module",
		"prefix": "unix_dialect",
		"body": ["unix_dialect()"]},
	"unregister_dialect() from the csv module": {
		"description": "unregister_dialect() from the csv module",
		"prefix": "unregister_dialect",
		"body": ["unregister_dialect(${1:name})"]},
	"writeheader() from the csv module": {
		"description": "writeheader() from the csv module",
		"prefix": "writeheader",
		"body": ["writeheader(${1:})"]},
	"writer() from the csv module": {
		"description": "writer() from the csv module",
		"prefix": "writer",
		"body": ["writer(${1:csvfile}, ${2:dialect='excel'}, ${3:**fmtparams})"]},
	"writerow() from the csv module": {
		"description": "writerow() from the csv module",
		"prefix": "writerow",
		"body": ["writerow(${1:row})"]},
	"writerows() from the csv module": {
		"description": "writerows() from the csv module",
		"prefix": "writerows",
		"body": ["writerows(${1:rows})"]},
// ctypes completion
	"ArgumentError from the ctypes module": {
		"description": "ArgumentError from the ctypes module",
		"prefix": "ArgumentError",
		"body": ["ArgumentError"]},
	"Array from the ctypes module": {
		"description": "Array from the ctypes module",
		"prefix": "Array",
		"body": ["Array(${1:*args})"]},
	"BigEndianStructure from the ctypes module": {
		"description": "BigEndianStructure from the ctypes module",
		"prefix": "BigEndianStructure",
		"body": ["BigEndianStructure(${1:*args}, ${2:**kw})"]},
	"CDLL from the ctypes module": {
		"description": "CDLL from the ctypes module",
		"prefix": "CDLL",
		"body": ["CDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"]},
	"CFUNCTYPE from the ctypes module": {
		"description": "CFUNCTYPE from the ctypes module",
		"prefix": "CFUNCTYPE",
		"body": ["CFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})"]},
	"DllCanUnloadNow from the ctypes module": {
		"description": "DllCanUnloadNow from the ctypes module",
		"prefix": "DllCanUnloadNow",
		"body": ["DllCanUnloadNow(${1:})"]},
	"DllGetClassObject from the ctypes module": {
		"description": "DllGetClassObject from the ctypes module",
		"prefix": "DllGetClassObject",
		"body": ["DllGetClassObject(${1:})"]},
	"FormatError from the ctypes module": {
		"description": "FormatError from the ctypes module",
		"prefix": "FormatError",
		"body": ["FormatError(${1:[code]})"]},
	"GetLastError from the ctypes module": {
		"description": "GetLastError from the ctypes module",
		"prefix": "GetLastError",
		"body": ["GetLastError(${1:})"]},
	"HRESULT from the ctypes module": {
		"description": "HRESULT from the ctypes module",
		"prefix": "HRESULT",
		"body": ["HRESULT"]},
	"LibraryLoader from the ctypes module": {
		"description": "LibraryLoader from the ctypes module",
		"prefix": "LibraryLoader",
		"body": ["LibraryLoader(${1:dlltype})"]},
	"LittleEndianStructure from the ctypes module": {
		"description": "LittleEndianStructure from the ctypes module",
		"prefix": "LittleEndianStructure",
		"body": ["LittleEndianStructure(${1:*args}, ${2:**kw})"]},
	"OleDLL from the ctypes module": {
		"description": "OleDLL from the ctypes module",
		"prefix": "OleDLL",
		"body": ["OleDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"]},
	"POINTER from the ctypes module": {
		"description": "POINTER from the ctypes module",
		"prefix": "POINTER",
		"body": ["POINTER(${1:type})"]},
	"PYFUNCTYPE from the ctypes module": {
		"description": "PYFUNCTYPE from the ctypes module",
		"prefix": "PYFUNCTYPE",
		"body": ["PYFUNCTYPE(${1:restype}, ${2:*argtypes})"]},
	"PyDLL from the ctypes module": {
		"description": "PyDLL from the ctypes module",
		"prefix": "PyDLL",
		"body": ["PyDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None})"]},
	"RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available from the ctypes module": {
		"description": "RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available from the ctypes module",
		"prefix": "RTLD_GLOBAL",
		"body": ["RTLD_GLOBAL"]},
	"Structure from the ctypes module": {
		"description": "Structure from the ctypes module",
		"prefix": "Structure",
		"body": ["Structure(${1:*args}, ${2:**kw})"]},
	"Union from the ctypes module": {
		"description": "Union from the ctypes module",
		"prefix": "Union",
		"body": ["Union(${1:*args}, ${2:**kw})"]},
	"WINFUNCTYPE from the ctypes module": {
		"description": "WINFUNCTYPE from the ctypes module",
		"prefix": "WINFUNCTYPE",
		"body": ["WINFUNCTYPE(${1:restype}, ${2:*argtypes}, ${3:use_errno=False}, ${4:use_last_error=False})"]},
	"WinDLL from the ctypes module": {
		"description": "WinDLL from the ctypes module",
		"prefix": "WinDLL",
		"body": ["WinDLL(${1:name}, ${2:mode=DEFAULT_MODE}, ${3:handle=None}, ${4:use_errno=False}, ${5:use_last_error=False})"]},
	"WinError from the ctypes module": {
		"description": "WinError from the ctypes module",
		"prefix": "WinError",
		"body": ["WinError(${1:code=None}, ${2:descr=None})"]},
	"_CData() from the ctypes module": {
		"description": "_CData() from the ctypes module",
		"prefix": "_CData",
		"body": ["_CData()"]},
	"_FuncPtr() from the ctypes module": {
		"description": "_FuncPtr() from the ctypes module",
		"prefix": "_FuncPtr",
		"body": ["_FuncPtr()"]},
	"_Pointer() from the ctypes module": {
		"description": "_Pointer() from the ctypes module",
		"prefix": "_Pointer",
		"body": ["_Pointer()"]},
	"_SimpleCData() from the ctypes module": {
		"description": "_SimpleCData() from the ctypes module",
		"prefix": "_SimpleCData",
		"body": ["_SimpleCData()"]},
	"_name() from the ctypes module": {
		"description": "_name() from the ctypes module",
		"prefix": "_name",
		"body": ["_name()"]},
	"addressof() from the ctypes module": {
		"description": "addressof() from the ctypes module",
		"prefix": "addressof",
		"body": ["addressof(${1:obj})"]},
	"alignment() from the ctypes module": {
		"description": "alignment() from the ctypes module",
		"prefix": "alignment",
		"body": ["alignment(${1:obj_or_type})"]},
	"byref() from the ctypes module": {
		"description": "byref() from the ctypes module",
		"prefix": "byref",
		"body": ["byref(${1:obj[}, ${2:offset]})"]},
	"c_bool() from the ctypes module": {
		"description": "c_bool() from the ctypes module",
		"prefix": "c_bool",
		"body": ["c_bool()"]},
	"c_byte() from the ctypes module": {
		"description": "c_byte() from the ctypes module",
		"prefix": "c_byte",
		"body": ["c_byte()"]},
	"c_char() from the ctypes module": {
		"description": "c_char() from the ctypes module",
		"prefix": "c_char",
		"body": ["c_char()"]},
	"c_char_p() from the ctypes module": {
		"description": "c_char_p() from the ctypes module",
		"prefix": "c_char_p",
		"body": ["c_char_p()"]},
	"c_double() from the ctypes module": {
		"description": "c_double() from the ctypes module",
		"prefix": "c_double",
		"body": ["c_double()"]},
	"c_float() from the ctypes module": {
		"description": "c_float() from the ctypes module",
		"prefix": "c_float",
		"body": ["c_float()"]},
	"c_int16() from the ctypes module": {
		"description": "c_int16() from the ctypes module",
		"prefix": "c_int16",
		"body": ["c_int16()"]},
	"c_int32() from the ctypes module": {
		"description": "c_int32() from the ctypes module",
		"prefix": "c_int32",
		"body": ["c_int32()"]},
	"c_int64() from the ctypes module": {
		"description": "c_int64() from the ctypes module",
		"prefix": "c_int64",
		"body": ["c_int64()"]},
	"c_int8() from the ctypes module": {
		"description": "c_int8() from the ctypes module",
		"prefix": "c_int8",
		"body": ["c_int8()"]},
	"c_int() from the ctypes module": {
		"description": "c_int() from the ctypes module",
		"prefix": "c_int",
		"body": ["c_int()"]},
	"c_long() from the ctypes module": {
		"description": "c_long() from the ctypes module",
		"prefix": "c_long",
		"body": ["c_long()"]},
	"c_longdouble() from the ctypes module": {
		"description": "c_longdouble() from the ctypes module",
		"prefix": "c_longdouble",
		"body": ["c_longdouble()"]},
	"c_longlong() from the ctypes module": {
		"description": "c_longlong() from the ctypes module",
		"prefix": "c_longlong",
		"body": ["c_longlong()"]},
	"c_short() from the ctypes module": {
		"description": "c_short() from the ctypes module",
		"prefix": "c_short",
		"body": ["c_short()"]},
	"c_size_t() from the ctypes module": {
		"description": "c_size_t() from the ctypes module",
		"prefix": "c_size_t",
		"body": ["c_size_t()"]},
	"c_ssize_t() from the ctypes module": {
		"description": "c_ssize_t() from the ctypes module",
		"prefix": "c_ssize_t",
		"body": ["c_ssize_t()"]},
	"c_ubyte() from the ctypes module": {
		"description": "c_ubyte() from the ctypes module",
		"prefix": "c_ubyte",
		"body": ["c_ubyte()"]},
	"c_uint16() from the ctypes module": {
		"description": "c_uint16() from the ctypes module",
		"prefix": "c_uint16",
		"body": ["c_uint16()"]},
	"c_uint32() from the ctypes module": {
		"description": "c_uint32() from the ctypes module",
		"prefix": "c_uint32",
		"body": ["c_uint32()"]},
	"c_uint64() from the ctypes module": {
		"description": "c_uint64() from the ctypes module",
		"prefix": "c_uint64",
		"body": ["c_uint64()"]},
	"c_uint8() from the ctypes module": {
		"description": "c_uint8() from the ctypes module",
		"prefix": "c_uint8",
		"body": ["c_uint8()"]},
	"c_uint() from the ctypes module": {
		"description": "c_uint() from the ctypes module",
		"prefix": "c_uint",
		"body": ["c_uint()"]},
	"c_ulong() from the ctypes module": {
		"description": "c_ulong() from the ctypes module",
		"prefix": "c_ulong",
		"body": ["c_ulong()"]},
	"c_ulonglong() from the ctypes module": {
		"description": "c_ulonglong() from the ctypes module",
		"prefix": "c_ulonglong",
		"body": ["c_ulonglong()"]},
	"c_ushort() from the ctypes module": {
		"description": "c_ushort() from the ctypes module",
		"prefix": "c_ushort",
		"body": ["c_ushort()"]},
	"c_void_p() from the ctypes module": {
		"description": "c_void_p() from the ctypes module",
		"prefix": "c_void_p",
		"body": ["c_void_p()"]},
	"c_wchar() from the ctypes module": {
		"description": "c_wchar() from the ctypes module",
		"prefix": "c_wchar",
		"body": ["c_wchar()"]},
	"c_wchar_p() from the ctypes module": {
		"description": "c_wchar_p() from the ctypes module",
		"prefix": "c_wchar_p",
		"body": ["c_wchar_p()"]},
	"cast() from the ctypes module": {
		"description": "cast() from the ctypes module",
		"prefix": "cast",
		"body": ["cast(${1:obj}, ${2:type})"]},
	"cdll Creates () from the ctypes module": {
		"description": "cdll Creates () from the ctypes module",
		"prefix": "cdll Creates ",
		"body": ["cdll Creates ()"]},
	"create_string_buffer() from the ctypes module": {
		"description": "create_string_buffer() from the ctypes module",
		"prefix": "create_string_buffer",
		"body": ["create_string_buffer(${1:init_or_size}, ${2:size=None})"]},
	"create_unicode_buffer() from the ctypes module": {
		"description": "create_unicode_buffer() from the ctypes module",
		"prefix": "create_unicode_buffer",
		"body": ["create_unicode_buffer(${1:init_or_size}, ${2:size=None})"]},
	"find_library() from the ctypes module": {
		"description": "find_library() from the ctypes module",
		"prefix": "find_library",
		"body": ["find_library(${1:name})"]},
	"find_library() from the ctypes module": {
		"description": "find_library() from the ctypes module",
		"prefix": "find_library",
		"body": ["find_library(${1:name})"]},
	"find_msvcrt() from the ctypes module": {
		"description": "find_msvcrt() from the ctypes module",
		"prefix": "find_msvcrt",
		"body": ["find_msvcrt(${1:})"]},
	"get_errno() from the ctypes module": {
		"description": "get_errno() from the ctypes module",
		"prefix": "get_errno",
		"body": ["get_errno(${1:})"]},
	"get_last_error() from the ctypes module": {
		"description": "get_last_error() from the ctypes module",
		"prefix": "get_last_error",
		"body": ["get_last_error(${1:})"]},
	"memmove() from the ctypes module": {
		"description": "memmove() from the ctypes module",
		"prefix": "memmove",
		"body": ["memmove(${1:dst}, ${2:src}, ${3:count})"]},
	"memset() from the ctypes module": {
		"description": "memset() from the ctypes module",
		"prefix": "memset",
		"body": ["memset(${1:dst}, ${2:c}, ${3:count})"]},
	"oledll Windows only: Creates () from the ctypes module": {
		"description": "oledll Windows only: Creates () from the ctypes module",
		"prefix": "oledll Windows only; Creates ",
		"body": ["oledll Windows only: Creates ()"]},
	"pointer() from the ctypes module": {
		"description": "pointer() from the ctypes module",
		"prefix": "pointer",
		"body": ["pointer(${1:obj})"]},
	"py_object() from the ctypes module": {
		"description": "py_object() from the ctypes module",
		"prefix": "py_object",
		"body": ["py_object()"]},
	"pydll Creates () from the ctypes module": {
		"description": "pydll Creates () from the ctypes module",
		"prefix": "pydll Creates ",
		"body": ["pydll Creates ()"]},
	"pythonapi An instance of () from the ctypes module": {
		"description": "pythonapi An instance of () from the ctypes module",
		"prefix": "pythonapi An instance of ",
		"body": ["pythonapi An instance of ()"]},
	"resize() from the ctypes module": {
		"description": "resize() from the ctypes module",
		"prefix": "resize",
		"body": ["resize(${1:obj}, ${2:size})"]},
	"set_errno() from the ctypes module": {
		"description": "set_errno() from the ctypes module",
		"prefix": "set_errno",
		"body": ["set_errno(${1:value})"]},
	"set_last_error() from the ctypes module": {
		"description": "set_last_error() from the ctypes module",
		"prefix": "set_last_error",
		"body": ["set_last_error(${1:value})"]},
	"sizeof() from the ctypes module": {
		"description": "sizeof() from the ctypes module",
		"prefix": "sizeof",
		"body": ["sizeof(${1:obj_or_type})"]},
	"string_at() from the ctypes module": {
		"description": "string_at() from the ctypes module",
		"prefix": "string_at",
		"body": ["string_at(${1:address}, ${2:size=-1})"]},
	"windll Windows only: Creates () from the ctypes module": {
		"description": "windll Windows only: Creates () from the ctypes module",
		"prefix": "windll Windows only; Creates ",
		"body": ["windll Windows only: Creates ()"]},
	"wstring_at() from the ctypes module": {
		"description": "wstring_at() from the ctypes module",
		"prefix": "wstring_at",
		"body": ["wstring_at(${1:address,})"]},
// curses completion
	"ERR from the curses module": {
		"description": "ERR from the curses module",
		"prefix": "ERR",
		"body": ["ERR"]},
	"OK from the curses module": {
		"description": "OK from the curses module",
		"prefix": "OK",
		"body": ["OK"]},
	"Textbox from the curses module": {
		"description": "Textbox from the curses module",
		"prefix": "Textbox",
		"body": ["Textbox(${1:win})"]},
	"addch() from the curses module": {
		"description": "addch() from the curses module",
		"prefix": "addch",
		"body": ["addch(${1:ch[}, ${2:attr]})"]},
	"addch() from the curses module": {
		"description": "addch() from the curses module",
		"prefix": "addch",
		"body": ["addch(${1:y}, ${2:x}, ${3:ch[}, ${4:attr]})"]},
	"addnstr() from the curses module": {
		"description": "addnstr() from the curses module",
		"prefix": "addnstr",
		"body": ["addnstr(${1:str}, ${2:n[}, ${3:attr]})"]},
	"addnstr() from the curses module": {
		"description": "addnstr() from the curses module",
		"prefix": "addnstr",
		"body": ["addnstr(${1:y}, ${2:x}, ${3:str}, ${4:n[}, ${5:attr]})"]},
	"addstr() from the curses module": {
		"description": "addstr() from the curses module",
		"prefix": "addstr",
		"body": ["addstr(${1:y}, ${2:x}, ${3:str[}, ${4:attr]})"]},
	"attron() from the curses module": {
		"description": "attron() from the curses module",
		"prefix": "attron",
		"body": ["attron(${1:attr})"]},
	"attrset() from the curses module": {
		"description": "attrset() from the curses module",
		"prefix": "attrset",
		"body": ["attrset(${1:attr})"]},
	"baudrate() from the curses module": {
		"description": "baudrate() from the curses module",
		"prefix": "baudrate",
		"body": ["baudrate(${1:})"]},
	"beep() from the curses module": {
		"description": "beep() from the curses module",
		"prefix": "beep",
		"body": ["beep(${1:})"]},
	"bkgd() from the curses module": {
		"description": "bkgd() from the curses module",
		"prefix": "bkgd",
		"body": ["bkgd(${1:ch[}, ${2:attr]})"]},
	"bkgdset() from the curses module": {
		"description": "bkgdset() from the curses module",
		"prefix": "bkgdset",
		"body": ["bkgdset(${1:ch[}, ${2:attr]})"]},
	"border() from the curses module": {
		"description": "border() from the curses module",
		"prefix": "border",
		"body": ["border(${1:[ls[}, ${2:rs[}, ${3:ts[}, ${4:bs[}, ${5:tl[}, ${6:tr[}, ${7:bl[}, ${8:br]]]]]]]]})"]},
	"box() from the curses module": {
		"description": "box() from the curses module",
		"prefix": "box",
		"body": ["box(${1:[vertch}, ${2:horch]})"]},
	"can_change_color() from the curses module": {
		"description": "can_change_color() from the curses module",
		"prefix": "can_change_color",
		"body": ["can_change_color(${1:})"]},
	"cbreak() from the curses module": {
		"description": "cbreak() from the curses module",
		"prefix": "cbreak",
		"body": ["cbreak(${1:})"]},
	"chgat() from the curses module": {
		"description": "chgat() from the curses module",
		"prefix": "chgat",
		"body": ["chgat(${1:attr})"]},
	"chgat() from the curses module": {
		"description": "chgat() from the curses module",
		"prefix": "chgat",
		"body": ["chgat(${1:num}, ${2:attr})"]},
	"clear() from the curses module": {
		"description": "clear() from the curses module",
		"prefix": "clear",
		"body": ["clear(${1:})"]},
	"clearok() from the curses module": {
		"description": "clearok() from the curses module",
		"prefix": "clearok",
		"body": ["clearok(${1:yes})"]},
	"clrtobot() from the curses module": {
		"description": "clrtobot() from the curses module",
		"prefix": "clrtobot",
		"body": ["clrtobot(${1:})"]},
	"clrtoeol() from the curses module": {
		"description": "clrtoeol() from the curses module",
		"prefix": "clrtoeol",
		"body": ["clrtoeol(${1:})"]},
	"color_content() from the curses module": {
		"description": "color_content() from the curses module",
		"prefix": "color_content",
		"body": ["color_content(${1:color_number})"]},
	"color_pair() from the curses module": {
		"description": "color_pair() from the curses module",
		"prefix": "color_pair",
		"body": ["color_pair(${1:color_number})"]},
	"curs_set() from the curses module": {
		"description": "curs_set() from the curses module",
		"prefix": "curs_set",
		"body": ["curs_set(${1:visibility})"]},
	"cursyncup() from the curses module": {
		"description": "cursyncup() from the curses module",
		"prefix": "cursyncup",
		"body": ["cursyncup(${1:})"]},
	"def_prog_mode() from the curses module": {
		"description": "def_prog_mode() from the curses module",
		"prefix": "def_prog_mode",
		"body": ["def_prog_mode(${1:})"]},
	"def_shell_mode() from the curses module": {
		"description": "def_shell_mode() from the curses module",
		"prefix": "def_shell_mode",
		"body": ["def_shell_mode(${1:})"]},
	"delay_output() from the curses module": {
		"description": "delay_output() from the curses module",
		"prefix": "delay_output",
		"body": ["delay_output(${1:ms})"]},
	"delch() from the curses module": {
		"description": "delch() from the curses module",
		"prefix": "delch",
		"body": ["delch(${1:[y}, ${2:x]})"]},
	"deleteln() from the curses module": {
		"description": "deleteln() from the curses module",
		"prefix": "deleteln",
		"body": ["deleteln(${1:})"]},
	"derwin() from the curses module": {
		"description": "derwin() from the curses module",
		"prefix": "derwin",
		"body": ["derwin(${1:begin_y}, ${2:begin_x})"]},
	"derwin() from the curses module": {
		"description": "derwin() from the curses module",
		"prefix": "derwin",
		"body": ["derwin(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})"]},
	"doupdate() from the curses module": {
		"description": "doupdate() from the curses module",
		"prefix": "doupdate",
		"body": ["doupdate(${1:})"]},
	"echo() from the curses module": {
		"description": "echo() from the curses module",
		"prefix": "echo",
		"body": ["echo(${1:})"]},
	"echochar() from the curses module": {
		"description": "echochar() from the curses module",
		"prefix": "echochar",
		"body": ["echochar(${1:ch[}, ${2:attr]})"]},
	"enclose() from the curses module": {
		"description": "enclose() from the curses module",
		"prefix": "enclose",
		"body": ["enclose(${1:y}, ${2:x})"]},
	"encoding() from the curses module": {
		"description": "encoding() from the curses module",
		"prefix": "encoding",
		"body": ["encoding()"]},
	"endwin() from the curses module": {
		"description": "endwin() from the curses module",
		"prefix": "endwin",
		"body": ["endwin(${1:})"]},
	"erase() from the curses module": {
		"description": "erase() from the curses module",
		"prefix": "erase",
		"body": ["erase(${1:})"]},
	"erasechar() from the curses module": {
		"description": "erasechar() from the curses module",
		"prefix": "erasechar",
		"body": ["erasechar(${1:})"]},
	"error() from the curses module": {
		"description": "error() from the curses module",
		"prefix": "error",
		"body": ["error()"]},
	"filter() from the curses module": {
		"description": "filter() from the curses module",
		"prefix": "filter",
		"body": ["filter(${1:})"]},
	"flash() from the curses module": {
		"description": "flash() from the curses module",
		"prefix": "flash",
		"body": ["flash(${1:})"]},
	"flushinp() from the curses module": {
		"description": "flushinp() from the curses module",
		"prefix": "flushinp",
		"body": ["flushinp(${1:})"]},
	"get_wch() from the curses module": {
		"description": "get_wch() from the curses module",
		"prefix": "get_wch",
		"body": ["get_wch(${1:[y}, ${2:x]})"]},
	"getbegyx() from the curses module": {
		"description": "getbegyx() from the curses module",
		"prefix": "getbegyx",
		"body": ["getbegyx(${1:})"]},
	"getbkgd() from the curses module": {
		"description": "getbkgd() from the curses module",
		"prefix": "getbkgd",
		"body": ["getbkgd(${1:})"]},
	"getch() from the curses module": {
		"description": "getch() from the curses module",
		"prefix": "getch",
		"body": ["getch(${1:[y}, ${2:x]})"]},
	"getkey() from the curses module": {
		"description": "getkey() from the curses module",
		"prefix": "getkey",
		"body": ["getkey(${1:[y}, ${2:x]})"]},
	"getmaxyx() from the curses module": {
		"description": "getmaxyx() from the curses module",
		"prefix": "getmaxyx",
		"body": ["getmaxyx(${1:})"]},
	"getmouse() from the curses module": {
		"description": "getmouse() from the curses module",
		"prefix": "getmouse",
		"body": ["getmouse(${1:})"]},
	"getparyx() from the curses module": {
		"description": "getparyx() from the curses module",
		"prefix": "getparyx",
		"body": ["getparyx(${1:})"]},
	"getstr() from the curses module": {
		"description": "getstr() from the curses module",
		"prefix": "getstr",
		"body": ["getstr(${1:[y}, ${2:x]})"]},
	"getsyx() from the curses module": {
		"description": "getsyx() from the curses module",
		"prefix": "getsyx",
		"body": ["getsyx(${1:})"]},
	"getwin() from the curses module": {
		"description": "getwin() from the curses module",
		"prefix": "getwin",
		"body": ["getwin(${1:file})"]},
	"getyx() from the curses module": {
		"description": "getyx() from the curses module",
		"prefix": "getyx",
		"body": ["getyx(${1:})"]},
	"halfdelay() from the curses module": {
		"description": "halfdelay() from the curses module",
		"prefix": "halfdelay",
		"body": ["halfdelay(${1:tenths})"]},
	"has_colors() from the curses module": {
		"description": "has_colors() from the curses module",
		"prefix": "has_colors",
		"body": ["has_colors(${1:})"]},
	"has_ic() from the curses module": {
		"description": "has_ic() from the curses module",
		"prefix": "has_ic",
		"body": ["has_ic(${1:})"]},
	"has_il() from the curses module": {
		"description": "has_il() from the curses module",
		"prefix": "has_il",
		"body": ["has_il(${1:})"]},
	"has_key() from the curses module": {
		"description": "has_key() from the curses module",
		"prefix": "has_key",
		"body": ["has_key(${1:ch})"]},
	"hline() from the curses module": {
		"description": "hline() from the curses module",
		"prefix": "hline",
		"body": ["hline(${1:ch}, ${2:n})"]},
	"hline() from the curses module": {
		"description": "hline() from the curses module",
		"prefix": "hline",
		"body": ["hline(${1:y}, ${2:x}, ${3:ch}, ${4:n})"]},
	"idlok() from the curses module": {
		"description": "idlok() from the curses module",
		"prefix": "idlok",
		"body": ["idlok(${1:yes})"]},
	"immedok() from the curses module": {
		"description": "immedok() from the curses module",
		"prefix": "immedok",
		"body": ["immedok(${1:flag})"]},
	"inch() from the curses module": {
		"description": "inch() from the curses module",
		"prefix": "inch",
		"body": ["inch(${1:[y}, ${2:x]})"]},
	"init_color() from the curses module": {
		"description": "init_color() from the curses module",
		"prefix": "init_color",
		"body": ["init_color(${1:color_number}, ${2:r}, ${3:g}, ${4:b})"]},
	"init_pair() from the curses module": {
		"description": "init_pair() from the curses module",
		"prefix": "init_pair",
		"body": ["init_pair(${1:pair_number}, ${2:fg}, ${3:bg})"]},
	"initscr() from the curses module": {
		"description": "initscr() from the curses module",
		"prefix": "initscr",
		"body": ["initscr(${1:})"]},
	"insch() from the curses module": {
		"description": "insch() from the curses module",
		"prefix": "insch",
		"body": ["insch(${1:ch[}, ${2:attr]})"]},
	"insch() from the curses module": {
		"description": "insch() from the curses module",
		"prefix": "insch",
		"body": ["insch(${1:y}, ${2:x}, ${3:ch[}, ${4:attr]})"]},
	"insertln() from the curses module": {
		"description": "insertln() from the curses module",
		"prefix": "insertln",
		"body": ["insertln(${1:})"]},
	"insnstr() from the curses module": {
		"description": "insnstr() from the curses module",
		"prefix": "insnstr",
		"body": ["insnstr(${1:str}, ${2:n[}, ${3:attr]})"]},
	"insnstr() from the curses module": {
		"description": "insnstr() from the curses module",
		"prefix": "insnstr",
		"body": ["insnstr(${1:y}, ${2:x}, ${3:str}, ${4:n[}, ${5:attr]})"]},
	"insstr() from the curses module": {
		"description": "insstr() from the curses module",
		"prefix": "insstr",
		"body": ["insstr(${1:y}, ${2:x}, ${3:str[}, ${4:attr]})"]},
	"instr() from the curses module": {
		"description": "instr() from the curses module",
		"prefix": "instr",
		"body": ["instr(${1:y}, ${2:x[}, ${3:n]})"]},
	"is_linetouched() from the curses module": {
		"description": "is_linetouched() from the curses module",
		"prefix": "is_linetouched",
		"body": ["is_linetouched(${1:line})"]},
	"is_term_resized() from the curses module": {
		"description": "is_term_resized() from the curses module",
		"prefix": "is_term_resized",
		"body": ["is_term_resized(${1:nlines}, ${2:ncols})"]},
	"is_wintouched() from the curses module": {
		"description": "is_wintouched() from the curses module",
		"prefix": "is_wintouched",
		"body": ["is_wintouched(${1:})"]},
	"isendwin() from the curses module": {
		"description": "isendwin() from the curses module",
		"prefix": "isendwin",
		"body": ["isendwin(${1:})"]},
	"keyname() from the curses module": {
		"description": "keyname() from the curses module",
		"prefix": "keyname",
		"body": ["keyname(${1:k})"]},
	"keypad() from the curses module": {
		"description": "keypad() from the curses module",
		"prefix": "keypad",
		"body": ["keypad(${1:yes})"]},
	"killchar() from the curses module": {
		"description": "killchar() from the curses module",
		"prefix": "killchar",
		"body": ["killchar(${1:})"]},
	"leaveok() from the curses module": {
		"description": "leaveok() from the curses module",
		"prefix": "leaveok",
		"body": ["leaveok(${1:yes})"]},
	"longname() from the curses module": {
		"description": "longname() from the curses module",
		"prefix": "longname",
		"body": ["longname(${1:})"]},
	"meta() from the curses module": {
		"description": "meta() from the curses module",
		"prefix": "meta",
		"body": ["meta(${1:yes})"]},
	"mouseinterval() from the curses module": {
		"description": "mouseinterval() from the curses module",
		"prefix": "mouseinterval",
		"body": ["mouseinterval(${1:interval})"]},
	"mousemask() from the curses module": {
		"description": "mousemask() from the curses module",
		"prefix": "mousemask",
		"body": ["mousemask(${1:mousemask})"]},
	"move() from the curses module": {
		"description": "move() from the curses module",
		"prefix": "move",
		"body": ["move(${1:new_y}, ${2:new_x})"]},
	"mvderwin() from the curses module": {
		"description": "mvderwin() from the curses module",
		"prefix": "mvderwin",
		"body": ["mvderwin(${1:y}, ${2:x})"]},
	"mvwin() from the curses module": {
		"description": "mvwin() from the curses module",
		"prefix": "mvwin",
		"body": ["mvwin(${1:new_y}, ${2:new_x})"]},
	"napms() from the curses module": {
		"description": "napms() from the curses module",
		"prefix": "napms",
		"body": ["napms(${1:ms})"]},
	"newpad() from the curses module": {
		"description": "newpad() from the curses module",
		"prefix": "newpad",
		"body": ["newpad(${1:nlines}, ${2:ncols})"]},
	"newwin() from the curses module": {
		"description": "newwin() from the curses module",
		"prefix": "newwin",
		"body": ["newwin(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})"]},
	"newwin() from the curses module": {
		"description": "newwin() from the curses module",
		"prefix": "newwin",
		"body": ["newwin(${1:nlines}, ${2:ncols})"]},
	"nocbreak() from the curses module": {
		"description": "nocbreak() from the curses module",
		"prefix": "nocbreak",
		"body": ["nocbreak(${1:})"]},
	"nodelay() from the curses module": {
		"description": "nodelay() from the curses module",
		"prefix": "nodelay",
		"body": ["nodelay(${1:yes})"]},
	"noecho() from the curses module": {
		"description": "noecho() from the curses module",
		"prefix": "noecho",
		"body": ["noecho(${1:})"]},
	"nonl() from the curses module": {
		"description": "nonl() from the curses module",
		"prefix": "nonl",
		"body": ["nonl(${1:})"]},
	"noqiflush() from the curses module": {
		"description": "noqiflush() from the curses module",
		"prefix": "noqiflush",
		"body": ["noqiflush(${1:})"]},
	"noraw() from the curses module": {
		"description": "noraw() from the curses module",
		"prefix": "noraw",
		"body": ["noraw(${1:})"]},
	"notimeout() from the curses module": {
		"description": "notimeout() from the curses module",
		"prefix": "notimeout",
		"body": ["notimeout(${1:yes})"]},
	"noutrefresh() from the curses module": {
		"description": "noutrefresh() from the curses module",
		"prefix": "noutrefresh",
		"body": ["noutrefresh(${1:})"]},
	"overlay() from the curses module": {
		"description": "overlay() from the curses module",
		"prefix": "overlay",
		"body": ["overlay(${1:destwin[}, ${2:sminrow}, ${3:smincol}, ${4:dminrow}, ${5:dmincol}, ${6:dmaxrow}, ${7:dmaxcol]})"]},
	"overwrite() from the curses module": {
		"description": "overwrite() from the curses module",
		"prefix": "overwrite",
		"body": ["overwrite(${1:destwin[}, ${2:sminrow}, ${3:smincol}, ${4:dminrow}, ${5:dmincol}, ${6:dmaxrow}, ${7:dmaxcol]})"]},
	"pair_content() from the curses module": {
		"description": "pair_content() from the curses module",
		"prefix": "pair_content",
		"body": ["pair_content(${1:pair_number})"]},
	"pair_number() from the curses module": {
		"description": "pair_number() from the curses module",
		"prefix": "pair_number",
		"body": ["pair_number(${1:attr})"]},
	"putp() from the curses module": {
		"description": "putp() from the curses module",
		"prefix": "putp",
		"body": ["putp(${1:string})"]},
	"putwin() from the curses module": {
		"description": "putwin() from the curses module",
		"prefix": "putwin",
		"body": ["putwin(${1:file})"]},
	"qiflush() from the curses module": {
		"description": "qiflush() from the curses module",
		"prefix": "qiflush",
		"body": ["qiflush(${1:[flag]})"]},
	"raw() from the curses module": {
		"description": "raw() from the curses module",
		"prefix": "raw",
		"body": ["raw(${1:})"]},
	"rectangle() from the curses module": {
		"description": "rectangle() from the curses module",
		"prefix": "rectangle",
		"body": ["rectangle(${1:win}, ${2:uly}, ${3:ulx}, ${4:lry}, ${5:lrx})"]},
	"redrawln() from the curses module": {
		"description": "redrawln() from the curses module",
		"prefix": "redrawln",
		"body": ["redrawln(${1:beg}, ${2:num})"]},
	"redrawwin() from the curses module": {
		"description": "redrawwin() from the curses module",
		"prefix": "redrawwin",
		"body": ["redrawwin(${1:})"]},
	"refresh() from the curses module": {
		"description": "refresh() from the curses module",
		"prefix": "refresh",
		"body": ["refresh(${1:[pminrow}, ${2:pmincol}, ${3:sminrow}, ${4:smincol}, ${5:smaxrow}, ${6:smaxcol]})"]},
	"reset_prog_mode() from the curses module": {
		"description": "reset_prog_mode() from the curses module",
		"prefix": "reset_prog_mode",
		"body": ["reset_prog_mode(${1:})"]},
	"reset_shell_mode() from the curses module": {
		"description": "reset_shell_mode() from the curses module",
		"prefix": "reset_shell_mode",
		"body": ["reset_shell_mode(${1:})"]},
	"resetty() from the curses module": {
		"description": "resetty() from the curses module",
		"prefix": "resetty",
		"body": ["resetty(${1:})"]},
	"resize() from the curses module": {
		"description": "resize() from the curses module",
		"prefix": "resize",
		"body": ["resize(${1:nlines}, ${2:ncols})"]},
	"resize_term() from the curses module": {
		"description": "resize_term() from the curses module",
		"prefix": "resize_term",
		"body": ["resize_term(${1:nlines}, ${2:ncols})"]},
	"resizeterm() from the curses module": {
		"description": "resizeterm() from the curses module",
		"prefix": "resizeterm",
		"body": ["resizeterm(${1:nlines}, ${2:ncols})"]},
	"savetty() from the curses module": {
		"description": "savetty() from the curses module",
		"prefix": "savetty",
		"body": ["savetty(${1:})"]},
	"scroll() from the curses module": {
		"description": "scroll() from the curses module",
		"prefix": "scroll",
		"body": ["scroll(${1:[lines=1]})"]},
	"scrollok() from the curses module": {
		"description": "scrollok() from the curses module",
		"prefix": "scrollok",
		"body": ["scrollok(${1:flag})"]},
	"setscrreg() from the curses module": {
		"description": "setscrreg() from the curses module",
		"prefix": "setscrreg",
		"body": ["setscrreg(${1:top}, ${2:bottom})"]},
	"setsyx() from the curses module": {
		"description": "setsyx() from the curses module",
		"prefix": "setsyx",
		"body": ["setsyx(${1:y}, ${2:x})"]},
	"setupterm() from the curses module": {
		"description": "setupterm() from the curses module",
		"prefix": "setupterm",
		"body": ["setupterm(${1:[termstr}, ${2:fd]})"]},
	"standend() from the curses module": {
		"description": "standend() from the curses module",
		"prefix": "standend",
		"body": ["standend(${1:})"]},
	"standout() from the curses module": {
		"description": "standout() from the curses module",
		"prefix": "standout",
		"body": ["standout(${1:})"]},
	"start_color() from the curses module": {
		"description": "start_color() from the curses module",
		"prefix": "start_color",
		"body": ["start_color(${1:})"]},
	"subpad() from the curses module": {
		"description": "subpad() from the curses module",
		"prefix": "subpad",
		"body": ["subpad(${1:begin_y}, ${2:begin_x})"]},
	"subpad() from the curses module": {
		"description": "subpad() from the curses module",
		"prefix": "subpad",
		"body": ["subpad(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})"]},
	"subwin() from the curses module": {
		"description": "subwin() from the curses module",
		"prefix": "subwin",
		"body": ["subwin(${1:nlines}, ${2:ncols}, ${3:begin_y}, ${4:begin_x})"]},
	"syncok() from the curses module": {
		"description": "syncok() from the curses module",
		"prefix": "syncok",
		"body": ["syncok(${1:flag})"]},
	"syncup() from the curses module": {
		"description": "syncup() from the curses module",
		"prefix": "syncup",
		"body": ["syncup(${1:})"]},
	"termattrs() from the curses module": {
		"description": "termattrs() from the curses module",
		"prefix": "termattrs",
		"body": ["termattrs(${1:})"]},
	"termname() from the curses module": {
		"description": "termname() from the curses module",
		"prefix": "termname",
		"body": ["termname(${1:})"]},
	"tigetflag() from the curses module": {
		"description": "tigetflag() from the curses module",
		"prefix": "tigetflag",
		"body": ["tigetflag(${1:capname})"]},
	"tigetnum() from the curses module": {
		"description": "tigetnum() from the curses module",
		"prefix": "tigetnum",
		"body": ["tigetnum(${1:capname})"]},
	"tigetstr() from the curses module": {
		"description": "tigetstr() from the curses module",
		"prefix": "tigetstr",
		"body": ["tigetstr(${1:capname})"]},
	"timeout() from the curses module": {
		"description": "timeout() from the curses module",
		"prefix": "timeout",
		"body": ["timeout(${1:delay})"]},
	"touchline() from the curses module": {
		"description": "touchline() from the curses module",
		"prefix": "touchline",
		"body": ["touchline(${1:start}, ${2:count[}, ${3:changed]})"]},
	"touchwin() from the curses module": {
		"description": "touchwin() from the curses module",
		"prefix": "touchwin",
		"body": ["touchwin(${1:})"]},
	"tparm() from the curses module": {
		"description": "tparm() from the curses module",
		"prefix": "tparm",
		"body": ["tparm(${1:str[}, ${2:...]})"]},
	"typeahead() from the curses module": {
		"description": "typeahead() from the curses module",
		"prefix": "typeahead",
		"body": ["typeahead(${1:fd})"]},
	"unctrl() from the curses module": {
		"description": "unctrl() from the curses module",
		"prefix": "unctrl",
		"body": ["unctrl(${1:ch})"]},
	"unget_wch() from the curses module": {
		"description": "unget_wch() from the curses module",
		"prefix": "unget_wch",
		"body": ["unget_wch(${1:ch})"]},
	"ungetch() from the curses module": {
		"description": "ungetch() from the curses module",
		"prefix": "ungetch",
		"body": ["ungetch(${1:ch})"]},
	"ungetmouse() from the curses module": {
		"description": "ungetmouse() from the curses module",
		"prefix": "ungetmouse",
		"body": ["ungetmouse(${1:id}, ${2:x}, ${3:y}, ${4:z}, ${5:bstate})"]},
	"untouchwin() from the curses module": {
		"description": "untouchwin() from the curses module",
		"prefix": "untouchwin",
		"body": ["untouchwin(${1:})"]},
	"update_lines_cols() from the curses module": {
		"description": "update_lines_cols() from the curses module",
		"prefix": "update_lines_cols",
		"body": ["update_lines_cols(${1:})"]},
	"use_default_colors() from the curses module": {
		"description": "use_default_colors() from the curses module",
		"prefix": "use_default_colors",
		"body": ["use_default_colors(${1:})"]},
	"use_env() from the curses module": {
		"description": "use_env() from the curses module",
		"prefix": "use_env",
		"body": ["use_env(${1:flag})"]},
	"version() from the curses module": {
		"description": "version() from the curses module",
		"prefix": "version",
		"body": ["version()"]},
	"vline() from the curses module": {
		"description": "vline() from the curses module",
		"prefix": "vline",
		"body": ["vline(${1:ch}, ${2:n})"]},
	"vline() from the curses module": {
		"description": "vline() from the curses module",
		"prefix": "vline",
		"body": ["vline(${1:y}, ${2:x}, ${3:ch}, ${4:n})"]},
	"wrapper() from the curses module": {
		"description": "wrapper() from the curses module",
		"prefix": "wrapper",
		"body": ["wrapper(${1:func,})"]},
// curses.ascii completion
	"alt() from the curses.ascii module": {
		"description": "alt() from the curses.ascii module",
		"prefix": "alt",
		"body": ["alt(${1:c})"]},
	"ascii() from the curses.ascii module": {
		"description": "ascii() from the curses.ascii module",
		"prefix": "ascii",
		"body": ["ascii(${1:c})"]},
	"controlnames() from the curses.ascii module": {
		"description": "controlnames() from the curses.ascii module",
		"prefix": "controlnames",
		"body": ["controlnames()"]},
	"ctrl() from the curses.ascii module": {
		"description": "ctrl() from the curses.ascii module",
		"prefix": "ctrl",
		"body": ["ctrl(${1:c})"]},
	"isalnum() from the curses.ascii module": {
		"description": "isalnum() from the curses.ascii module",
		"prefix": "isalnum",
		"body": ["isalnum(${1:c})"]},
	"isalpha() from the curses.ascii module": {
		"description": "isalpha() from the curses.ascii module",
		"prefix": "isalpha",
		"body": ["isalpha(${1:c})"]},
	"isascii() from the curses.ascii module": {
		"description": "isascii() from the curses.ascii module",
		"prefix": "isascii",
		"body": ["isascii(${1:c})"]},
	"isblank() from the curses.ascii module": {
		"description": "isblank() from the curses.ascii module",
		"prefix": "isblank",
		"body": ["isblank(${1:c})"]},
	"iscntrl() from the curses.ascii module": {
		"description": "iscntrl() from the curses.ascii module",
		"prefix": "iscntrl",
		"body": ["iscntrl(${1:c})"]},
	"isctrl() from the curses.ascii module": {
		"description": "isctrl() from the curses.ascii module",
		"prefix": "isctrl",
		"body": ["isctrl(${1:c})"]},
	"isdigit() from the curses.ascii module": {
		"description": "isdigit() from the curses.ascii module",
		"prefix": "isdigit",
		"body": ["isdigit(${1:c})"]},
	"isgraph() from the curses.ascii module": {
		"description": "isgraph() from the curses.ascii module",
		"prefix": "isgraph",
		"body": ["isgraph(${1:c})"]},
	"islower() from the curses.ascii module": {
		"description": "islower() from the curses.ascii module",
		"prefix": "islower",
		"body": ["islower(${1:c})"]},
	"ismeta() from the curses.ascii module": {
		"description": "ismeta() from the curses.ascii module",
		"prefix": "ismeta",
		"body": ["ismeta(${1:c})"]},
	"isprint() from the curses.ascii module": {
		"description": "isprint() from the curses.ascii module",
		"prefix": "isprint",
		"body": ["isprint(${1:c})"]},
	"ispunct() from the curses.ascii module": {
		"description": "ispunct() from the curses.ascii module",
		"prefix": "ispunct",
		"body": ["ispunct(${1:c})"]},
	"isspace() from the curses.ascii module": {
		"description": "isspace() from the curses.ascii module",
		"prefix": "isspace",
		"body": ["isspace(${1:c})"]},
	"isupper() from the curses.ascii module": {
		"description": "isupper() from the curses.ascii module",
		"prefix": "isupper",
		"body": ["isupper(${1:c})"]},
	"isxdigit() from the curses.ascii module": {
		"description": "isxdigit() from the curses.ascii module",
		"prefix": "isxdigit",
		"body": ["isxdigit(${1:c})"]},
	"unctrl() from the curses.ascii module": {
		"description": "unctrl() from the curses.ascii module",
		"prefix": "unctrl",
		"body": ["unctrl(${1:c})"]},
// curses.panel completion
	"above() from the curses.panel module": {
		"description": "above() from the curses.panel module",
		"prefix": "above",
		"body": ["above(${1:})"]},
	"below() from the curses.panel module": {
		"description": "below() from the curses.panel module",
		"prefix": "below",
		"body": ["below(${1:})"]},
	"bottom() from the curses.panel module": {
		"description": "bottom() from the curses.panel module",
		"prefix": "bottom",
		"body": ["bottom(${1:})"]},
	"bottom_panel() from the curses.panel module": {
		"description": "bottom_panel() from the curses.panel module",
		"prefix": "bottom_panel",
		"body": ["bottom_panel(${1:})"]},
	"hidden() from the curses.panel module": {
		"description": "hidden() from the curses.panel module",
		"prefix": "hidden",
		"body": ["hidden(${1:})"]},
	"hide() from the curses.panel module": {
		"description": "hide() from the curses.panel module",
		"prefix": "hide",
		"body": ["hide(${1:})"]},
	"move() from the curses.panel module": {
		"description": "move() from the curses.panel module",
		"prefix": "move",
		"body": ["move(${1:y}, ${2:x})"]},
	"new_panel() from the curses.panel module": {
		"description": "new_panel() from the curses.panel module",
		"prefix": "new_panel",
		"body": ["new_panel(${1:win})"]},
	"replace() from the curses.panel module": {
		"description": "replace() from the curses.panel module",
		"prefix": "replace",
		"body": ["replace(${1:win})"]},
	"set_userptr() from the curses.panel module": {
		"description": "set_userptr() from the curses.panel module",
		"prefix": "set_userptr",
		"body": ["set_userptr(${1:obj})"]},
	"show() from the curses.panel module": {
		"description": "show() from the curses.panel module",
		"prefix": "show",
		"body": ["show(${1:})"]},
	"top() from the curses.panel module": {
		"description": "top() from the curses.panel module",
		"prefix": "top",
		"body": ["top(${1:})"]},
	"top_panel() from the curses.panel module": {
		"description": "top_panel() from the curses.panel module",
		"prefix": "top_panel",
		"body": ["top_panel(${1:})"]},
	"update_panels() from the curses.panel module": {
		"description": "update_panels() from the curses.panel module",
		"prefix": "update_panels",
		"body": ["update_panels(${1:})"]},
	"userptr() from the curses.panel module": {
		"description": "userptr() from the curses.panel module",
		"prefix": "userptr",
		"body": ["userptr(${1:})"]},
	"window() from the curses.panel module": {
		"description": "window() from the curses.panel module",
		"prefix": "window",
		"body": ["window(${1:})"]},
// curses.textpad completion
	"above() from the curses.textpad module": {
		"description": "above() from the curses.textpad module",
		"prefix": "above",
		"body": ["above(${1:})"]},
	"below() from the curses.textpad module": {
		"description": "below() from the curses.textpad module",
		"prefix": "below",
		"body": ["below(${1:})"]},
	"bottom() from the curses.textpad module": {
		"description": "bottom() from the curses.textpad module",
		"prefix": "bottom",
		"body": ["bottom(${1:})"]},
	"bottom_panel() from the curses.textpad module": {
		"description": "bottom_panel() from the curses.textpad module",
		"prefix": "bottom_panel",
		"body": ["bottom_panel(${1:})"]},
	"hidden() from the curses.textpad module": {
		"description": "hidden() from the curses.textpad module",
		"prefix": "hidden",
		"body": ["hidden(${1:})"]},
	"hide() from the curses.textpad module": {
		"description": "hide() from the curses.textpad module",
		"prefix": "hide",
		"body": ["hide(${1:})"]},
	"move() from the curses.textpad module": {
		"description": "move() from the curses.textpad module",
		"prefix": "move",
		"body": ["move(${1:y}, ${2:x})"]},
	"new_panel() from the curses.textpad module": {
		"description": "new_panel() from the curses.textpad module",
		"prefix": "new_panel",
		"body": ["new_panel(${1:win})"]},
	"replace() from the curses.textpad module": {
		"description": "replace() from the curses.textpad module",
		"prefix": "replace",
		"body": ["replace(${1:win})"]},
	"set_userptr() from the curses.textpad module": {
		"description": "set_userptr() from the curses.textpad module",
		"prefix": "set_userptr",
		"body": ["set_userptr(${1:obj})"]},
	"show() from the curses.textpad module": {
		"description": "show() from the curses.textpad module",
		"prefix": "show",
		"body": ["show(${1:})"]},
	"top() from the curses.textpad module": {
		"description": "top() from the curses.textpad module",
		"prefix": "top",
		"body": ["top(${1:})"]},
	"top_panel() from the curses.textpad module": {
		"description": "top_panel() from the curses.textpad module",
		"prefix": "top_panel",
		"body": ["top_panel(${1:})"]},
	"update_panels() from the curses.textpad module": {
		"description": "update_panels() from the curses.textpad module",
		"prefix": "update_panels",
		"body": ["update_panels(${1:})"]},
	"userptr() from the curses.textpad module": {
		"description": "userptr() from the curses.textpad module",
		"prefix": "userptr",
		"body": ["userptr(${1:})"]},
	"window() from the curses.textpad module": {
		"description": "window() from the curses.textpad module",
		"prefix": "window",
		"body": ["window(${1:})"]},
// datetime completion
	"MAXYEAR from the datetime module": {
		"description": "MAXYEAR from the datetime module",
		"prefix": "MAXYEAR",
		"body": ["MAXYEAR"]},
	"MINYEAR from the datetime module": {
		"description": "MINYEAR from the datetime module",
		"prefix": "MINYEAR",
		"body": ["MINYEAR"]},
	"__format__() from the datetime module": {
		"description": "__format__() from the datetime module",
		"prefix": "__format__",
		"body": ["__format__(${1:format})"]},
	"__str__() from the datetime module": {
		"description": "__str__() from the datetime module",
		"prefix": "__str__",
		"body": ["__str__(${1:})"]},
	"astimezone() from the datetime module": {
		"description": "astimezone() from the datetime module",
		"prefix": "astimezone",
		"body": ["astimezone(${1:tz=None})"]},
	"combine() from the datetime module": {
		"description": "combine() from the datetime module",
		"prefix": "combine",
		"body": ["combine(${1:date}, ${2:time})"]},
	"ctime() from the datetime module": {
		"description": "ctime() from the datetime module",
		"prefix": "ctime",
		"body": ["ctime(${1:})"]},
	"date An idealized naive date() from the datetime module": {
		"description": "date An idealized naive date() from the datetime module",
		"prefix": "date An idealized naive date",
		"body": ["date An idealized naive date(${1:assuming the current Gregorian calendar always was}, ${2:and always will be}, ${3:in effect. Attributes: })"]},
	"date() from the datetime module": {
		"description": "date() from the datetime module",
		"prefix": "date",
		"body": ["date(${1:year}, ${2:month}, ${3:day})"]},
	"date() from the datetime module": {
		"description": "date() from the datetime module",
		"prefix": "date",
		"body": ["date(${1:})"]},
	"datetime() from the datetime module": {
		"description": "datetime() from the datetime module",
		"prefix": "datetime",
		"body": ["datetime(${1:year}, ${2:month}, ${3:day}, ${4:hour=0}, ${5:minute=0}, ${6:second=0}, ${7:microsecond=0}, ${8:tzinfo=None})"]},
	"day() from the datetime module": {
		"description": "day() from the datetime module",
		"prefix": "day",
		"body": ["day()"]},
	"dst() from the datetime module": {
		"description": "dst() from the datetime module",
		"prefix": "dst",
		"body": ["dst(${1:dt})"]},
	"dst() from the datetime module": {
		"description": "dst() from the datetime module",
		"prefix": "dst",
		"body": ["dst(${1:})"]},
	"fromordinal() from the datetime module": {
		"description": "fromordinal() from the datetime module",
		"prefix": "fromordinal",
		"body": ["fromordinal(${1:ordinal})"]},
	"fromtimestamp() from the datetime module": {
		"description": "fromtimestamp() from the datetime module",
		"prefix": "fromtimestamp",
		"body": ["fromtimestamp(${1:timestamp}, ${2:tz=None})"]},
	"fromtimestamp() from the datetime module": {
		"description": "fromtimestamp() from the datetime module",
		"prefix": "fromtimestamp",
		"body": ["fromtimestamp(${1:timestamp})"]},
	"fromutc() from the datetime module": {
		"description": "fromutc() from the datetime module",
		"prefix": "fromutc",
		"body": ["fromutc(${1:dt})"]},
	"hour() from the datetime module": {
		"description": "hour() from the datetime module",
		"prefix": "hour",
		"body": ["hour()"]},
	"isocalendar() from the datetime module": {
		"description": "isocalendar() from the datetime module",
		"prefix": "isocalendar",
		"body": ["isocalendar(${1:})"]},
	"isoformat() from the datetime module": {
		"description": "isoformat() from the datetime module",
		"prefix": "isoformat",
		"body": ["isoformat(${1:sep='T'})"]},
	"isoformat() from the datetime module": {
		"description": "isoformat() from the datetime module",
		"prefix": "isoformat",
		"body": ["isoformat(${1:})"]},
	"isoweekday() from the datetime module": {
		"description": "isoweekday() from the datetime module",
		"prefix": "isoweekday",
		"body": ["isoweekday(${1:})"]},
	"max() from the datetime module": {
		"description": "max() from the datetime module",
		"prefix": "max",
		"body": ["max()"]},
	"microsecond() from the datetime module": {
		"description": "microsecond() from the datetime module",
		"prefix": "microsecond",
		"body": ["microsecond()"]},
	"min() from the datetime module": {
		"description": "min() from the datetime module",
		"prefix": "min",
		"body": ["min()"]},
	"minute() from the datetime module": {
		"description": "minute() from the datetime module",
		"prefix": "minute",
		"body": ["minute()"]},
	"month() from the datetime module": {
		"description": "month() from the datetime module",
		"prefix": "month",
		"body": ["month()"]},
	"now() from the datetime module": {
		"description": "now() from the datetime module",
		"prefix": "now",
		"body": ["now(${1:tz=None})"]},
	"replace() from the datetime module": {
		"description": "replace() from the datetime module",
		"prefix": "replace",
		"body": ["replace(${1:year}, ${2:month}, ${3:day})"]},
	"replace() from the datetime module": {
		"description": "replace() from the datetime module",
		"prefix": "replace",
		"body": ["replace(${1:[hour[}, ${2:minute[}, ${3:second[}, ${4:microsecond[}, ${5:tzinfo]]]]]})"]},
	"replace() from the datetime module": {
		"description": "replace() from the datetime module",
		"prefix": "replace",
		"body": ["replace(${1:[year[}, ${2:month[}, ${3:day[}, ${4:hour[}, ${5:minute[}, ${6:second[}, ${7:microsecond[}, ${8:tzinfo]]]]]]]]})"]},
	"resolution() from the datetime module": {
		"description": "resolution() from the datetime module",
		"prefix": "resolution",
		"body": ["resolution()"]},
	"second() from the datetime module": {
		"description": "second() from the datetime module",
		"prefix": "second",
		"body": ["second()"]},
	"strftime() from the datetime module": {
		"description": "strftime() from the datetime module",
		"prefix": "strftime",
		"body": ["strftime(${1:format})"]},
	"strptime() from the datetime module": {
		"description": "strptime() from the datetime module",
		"prefix": "strptime",
		"body": ["strptime(${1:date_string}, ${2:format})"]},
	"time An idealized time() from the datetime module": {
		"description": "time An idealized time() from the datetime module",
		"prefix": "time An idealized time",
		"body": ["time An idealized time(${1:independent of any particular day}, ${2:assuming that every day has exactly 24*60*60 seconds }, ${3:there is no notion of \"leap seconds\" here})"]},
	"time() from the datetime module": {
		"description": "time() from the datetime module",
		"prefix": "time",
		"body": ["time(${1:hour=0}, ${2:minute=0}, ${3:second=0}, ${4:microsecond=0}, ${5:tzinfo=None})"]},
	"time() from the datetime module": {
		"description": "time() from the datetime module",
		"prefix": "time",
		"body": ["time(${1:})"]},
	"timedelta A duration expressing the difference between two () from the datetime module": {
		"description": "timedelta A duration expressing the difference between two () from the datetime module",
		"prefix": "timedelta A duration expressing the difference between two ",
		"body": ["timedelta A duration expressing the difference between two ()"]},
	"timedelta() from the datetime module": {
		"description": "timedelta() from the datetime module",
		"prefix": "timedelta",
		"body": ["timedelta(${1:days=0}, ${2:seconds=0}, ${3:microseconds=0}, ${4:milliseconds=0}, ${5:minutes=0}, ${6:hours=0}, ${7:weeks=0})"]},
	"timestamp() from the datetime module": {
		"description": "timestamp() from the datetime module",
		"prefix": "timestamp",
		"body": ["timestamp(${1:})"]},
	"timetuple() from the datetime module": {
		"description": "timetuple() from the datetime module",
		"prefix": "timetuple",
		"body": ["timetuple(${1:})"]},
	"timetz() from the datetime module": {
		"description": "timetz() from the datetime module",
		"prefix": "timetz",
		"body": ["timetz(${1:})"]},
	"timezone() from the datetime module": {
		"description": "timezone() from the datetime module",
		"prefix": "timezone",
		"body": ["timezone()"]},
	"timezone() from the datetime module": {
		"description": "timezone() from the datetime module",
		"prefix": "timezone",
		"body": ["timezone(${1:offset[}, ${2:name]})"]},
	"today() from the datetime module": {
		"description": "today() from the datetime module",
		"prefix": "today",
		"body": ["today(${1:})"]},
	"toordinal() from the datetime module": {
		"description": "toordinal() from the datetime module",
		"prefix": "toordinal",
		"body": ["toordinal(${1:})"]},
	"total_seconds() from the datetime module": {
		"description": "total_seconds() from the datetime module",
		"prefix": "total_seconds",
		"body": ["total_seconds(${1:})"]},
	"tzinfo() from the datetime module": {
		"description": "tzinfo() from the datetime module",
		"prefix": "tzinfo",
		"body": ["tzinfo()"]},
	"tzname() from the datetime module": {
		"description": "tzname() from the datetime module",
		"prefix": "tzname",
		"body": ["tzname(${1:dt})"]},
	"tzname() from the datetime module": {
		"description": "tzname() from the datetime module",
		"prefix": "tzname",
		"body": ["tzname(${1:})"]},
	"utc() from the datetime module": {
		"description": "utc() from the datetime module",
		"prefix": "utc",
		"body": ["utc()"]},
	"utcfromtimestamp() from the datetime module": {
		"description": "utcfromtimestamp() from the datetime module",
		"prefix": "utcfromtimestamp",
		"body": ["utcfromtimestamp(${1:timestamp})"]},
	"utcnow() from the datetime module": {
		"description": "utcnow() from the datetime module",
		"prefix": "utcnow",
		"body": ["utcnow(${1:})"]},
	"utcoffset() from the datetime module": {
		"description": "utcoffset() from the datetime module",
		"prefix": "utcoffset",
		"body": ["utcoffset(${1:dt})"]},
	"utcoffset() from the datetime module": {
		"description": "utcoffset() from the datetime module",
		"prefix": "utcoffset",
		"body": ["utcoffset(${1:})"]},
	"utctimetuple() from the datetime module": {
		"description": "utctimetuple() from the datetime module",
		"prefix": "utctimetuple",
		"body": ["utctimetuple(${1:})"]},
	"weekday() from the datetime module": {
		"description": "weekday() from the datetime module",
		"prefix": "weekday",
		"body": ["weekday(${1:})"]},
	"year() from the datetime module": {
		"description": "year() from the datetime module",
		"prefix": "year",
		"body": ["year()"]},
// dbm completion
	"close() from the dbm module": {
		"description": "close() from the dbm module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"error() from the dbm module": {
		"description": "error() from the dbm module",
		"prefix": "error",
		"body": ["error()"]},
	"firstkey() from the dbm module": {
		"description": "firstkey() from the dbm module",
		"prefix": "firstkey",
		"body": ["firstkey(${1:})"]},
	"library() from the dbm module": {
		"description": "library() from the dbm module",
		"prefix": "library",
		"body": ["library()"]},
	"nextkey() from the dbm module": {
		"description": "nextkey() from the dbm module",
		"prefix": "nextkey",
		"body": ["nextkey(${1:key})"]},
	"open() from the dbm module": {
		"description": "open() from the dbm module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:flag='r'}, ${3:mode=0o666})"]},
	"open() from the dbm module": {
		"description": "open() from the dbm module",
		"prefix": "open",
		"body": ["open(${1:filename[}, ${2:flag[}, ${3:mode]]})"]},
	"reorganize() from the dbm module": {
		"description": "reorganize() from the dbm module",
		"prefix": "reorganize",
		"body": ["reorganize(${1:})"]},
	"sync() from the dbm module": {
		"description": "sync() from the dbm module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"whichdb() from the dbm module": {
		"description": "whichdb() from the dbm module",
		"prefix": "whichdb",
		"body": ["whichdb(${1:filename})"]},
// dbm.dumb completion
	"close() from the dbm.dumb module": {
		"description": "close() from the dbm.dumb module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"error() from the dbm.dumb module": {
		"description": "error() from the dbm.dumb module",
		"prefix": "error",
		"body": ["error()"]},
	"firstkey() from the dbm.dumb module": {
		"description": "firstkey() from the dbm.dumb module",
		"prefix": "firstkey",
		"body": ["firstkey(${1:})"]},
	"library() from the dbm.dumb module": {
		"description": "library() from the dbm.dumb module",
		"prefix": "library",
		"body": ["library()"]},
	"nextkey() from the dbm.dumb module": {
		"description": "nextkey() from the dbm.dumb module",
		"prefix": "nextkey",
		"body": ["nextkey(${1:key})"]},
	"open() from the dbm.dumb module": {
		"description": "open() from the dbm.dumb module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:flag='r'}, ${3:mode=0o666})"]},
	"open() from the dbm.dumb module": {
		"description": "open() from the dbm.dumb module",
		"prefix": "open",
		"body": ["open(${1:filename[}, ${2:flag[}, ${3:mode]]})"]},
	"reorganize() from the dbm.dumb module": {
		"description": "reorganize() from the dbm.dumb module",
		"prefix": "reorganize",
		"body": ["reorganize(${1:})"]},
	"sync() from the dbm.dumb module": {
		"description": "sync() from the dbm.dumb module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"whichdb() from the dbm.dumb module": {
		"description": "whichdb() from the dbm.dumb module",
		"prefix": "whichdb",
		"body": ["whichdb(${1:filename})"]},
// dbm.gnu completion
	"close() from the dbm.gnu module": {
		"description": "close() from the dbm.gnu module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"error() from the dbm.gnu module": {
		"description": "error() from the dbm.gnu module",
		"prefix": "error",
		"body": ["error()"]},
	"firstkey() from the dbm.gnu module": {
		"description": "firstkey() from the dbm.gnu module",
		"prefix": "firstkey",
		"body": ["firstkey(${1:})"]},
	"library() from the dbm.gnu module": {
		"description": "library() from the dbm.gnu module",
		"prefix": "library",
		"body": ["library()"]},
	"nextkey() from the dbm.gnu module": {
		"description": "nextkey() from the dbm.gnu module",
		"prefix": "nextkey",
		"body": ["nextkey(${1:key})"]},
	"open() from the dbm.gnu module": {
		"description": "open() from the dbm.gnu module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:flag='r'}, ${3:mode=0o666})"]},
	"open() from the dbm.gnu module": {
		"description": "open() from the dbm.gnu module",
		"prefix": "open",
		"body": ["open(${1:filename[}, ${2:flag[}, ${3:mode]]})"]},
	"reorganize() from the dbm.gnu module": {
		"description": "reorganize() from the dbm.gnu module",
		"prefix": "reorganize",
		"body": ["reorganize(${1:})"]},
	"sync() from the dbm.gnu module": {
		"description": "sync() from the dbm.gnu module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"whichdb() from the dbm.gnu module": {
		"description": "whichdb() from the dbm.gnu module",
		"prefix": "whichdb",
		"body": ["whichdb(${1:filename})"]},
// dbm.ndbm completion
	"close() from the dbm.ndbm module": {
		"description": "close() from the dbm.ndbm module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"error() from the dbm.ndbm module": {
		"description": "error() from the dbm.ndbm module",
		"prefix": "error",
		"body": ["error()"]},
	"firstkey() from the dbm.ndbm module": {
		"description": "firstkey() from the dbm.ndbm module",
		"prefix": "firstkey",
		"body": ["firstkey(${1:})"]},
	"library() from the dbm.ndbm module": {
		"description": "library() from the dbm.ndbm module",
		"prefix": "library",
		"body": ["library()"]},
	"nextkey() from the dbm.ndbm module": {
		"description": "nextkey() from the dbm.ndbm module",
		"prefix": "nextkey",
		"body": ["nextkey(${1:key})"]},
	"open() from the dbm.ndbm module": {
		"description": "open() from the dbm.ndbm module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:flag='r'}, ${3:mode=0o666})"]},
	"open() from the dbm.ndbm module": {
		"description": "open() from the dbm.ndbm module",
		"prefix": "open",
		"body": ["open(${1:filename[}, ${2:flag[}, ${3:mode]]})"]},
	"reorganize() from the dbm.ndbm module": {
		"description": "reorganize() from the dbm.ndbm module",
		"prefix": "reorganize",
		"body": ["reorganize(${1:})"]},
	"sync() from the dbm.ndbm module": {
		"description": "sync() from the dbm.ndbm module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"whichdb() from the dbm.ndbm module": {
		"description": "whichdb() from the dbm.ndbm module",
		"prefix": "whichdb",
		"body": ["whichdb(${1:filename})"]},
// decimal completion
	"BasicContext from the decimal module": {
		"description": "BasicContext from the decimal module",
		"prefix": "BasicContext",
		"body": ["BasicContext"]},
	"Clamped from the decimal module": {
		"description": "Clamped from the decimal module",
		"prefix": "Clamped",
		"body": ["Clamped"]},
	"Context from the decimal module": {
		"description": "Context from the decimal module",
		"prefix": "Context",
		"body": ["Context(${1:prec=None}, ${2:rounding=None}, ${3:Emin=None}, ${4:Emax=None}, ${5:capitals=None}, ${6:clamp=None}, ${7:flags=None}, ${8:traps=None})"]},
	"Decimal from the decimal module": {
		"description": "Decimal from the decimal module",
		"prefix": "Decimal",
		"body": ["Decimal(${1:value=\"0\"}, ${2:context=None})"]},
	"DecimalException from the decimal module": {
		"description": "DecimalException from the decimal module",
		"prefix": "DecimalException",
		"body": ["DecimalException"]},
	"DefaultContext from the decimal module": {
		"description": "DefaultContext from the decimal module",
		"prefix": "DefaultContext",
		"body": ["DefaultContext"]},
	"DivisionByZero from the decimal module": {
		"description": "DivisionByZero from the decimal module",
		"prefix": "DivisionByZero",
		"body": ["DivisionByZero"]},
	"ExtendedContext from the decimal module": {
		"description": "ExtendedContext from the decimal module",
		"prefix": "ExtendedContext",
		"body": ["ExtendedContext"]},
	"FloatOperation from the decimal module": {
		"description": "FloatOperation from the decimal module",
		"prefix": "FloatOperation",
		"body": ["FloatOperation"]},
	"HAVE_THREADS from the decimal module": {
		"description": "HAVE_THREADS from the decimal module",
		"prefix": "HAVE_THREADS",
		"body": ["HAVE_THREADS"]},
	"Inexact from the decimal module": {
		"description": "Inexact from the decimal module",
		"prefix": "Inexact",
		"body": ["Inexact"]},
	"InvalidOperation from the decimal module": {
		"description": "InvalidOperation from the decimal module",
		"prefix": "InvalidOperation",
		"body": ["InvalidOperation"]},
	"MAX_EMAX from the decimal module": {
		"description": "MAX_EMAX from the decimal module",
		"prefix": "MAX_EMAX",
		"body": ["MAX_EMAX"]},
	"MAX_PREC from the decimal module": {
		"description": "MAX_PREC from the decimal module",
		"prefix": "MAX_PREC",
		"body": ["MAX_PREC"]},
	"MIN_EMIN from the decimal module": {
		"description": "MIN_EMIN from the decimal module",
		"prefix": "MIN_EMIN",
		"body": ["MIN_EMIN"]},
	"MIN_ETINY from the decimal module": {
		"description": "MIN_ETINY from the decimal module",
		"prefix": "MIN_ETINY",
		"body": ["MIN_ETINY"]},
	"Overflow from the decimal module": {
		"description": "Overflow from the decimal module",
		"prefix": "Overflow",
		"body": ["Overflow"]},
	"ROUND_05UP from the decimal module": {
		"description": "ROUND_05UP from the decimal module",
		"prefix": "ROUND_05UP",
		"body": ["ROUND_05UP"]},
	"ROUND_CEILING from the decimal module": {
		"description": "ROUND_CEILING from the decimal module",
		"prefix": "ROUND_CEILING",
		"body": ["ROUND_CEILING"]},
	"ROUND_DOWN from the decimal module": {
		"description": "ROUND_DOWN from the decimal module",
		"prefix": "ROUND_DOWN",
		"body": ["ROUND_DOWN"]},
	"ROUND_FLOOR from the decimal module": {
		"description": "ROUND_FLOOR from the decimal module",
		"prefix": "ROUND_FLOOR",
		"body": ["ROUND_FLOOR"]},
	"ROUND_HALF_DOWN from the decimal module": {
		"description": "ROUND_HALF_DOWN from the decimal module",
		"prefix": "ROUND_HALF_DOWN",
		"body": ["ROUND_HALF_DOWN"]},
	"ROUND_HALF_EVEN from the decimal module": {
		"description": "ROUND_HALF_EVEN from the decimal module",
		"prefix": "ROUND_HALF_EVEN",
		"body": ["ROUND_HALF_EVEN"]},
	"ROUND_HALF_UP from the decimal module": {
		"description": "ROUND_HALF_UP from the decimal module",
		"prefix": "ROUND_HALF_UP",
		"body": ["ROUND_HALF_UP"]},
	"ROUND_UP from the decimal module": {
		"description": "ROUND_UP from the decimal module",
		"prefix": "ROUND_UP",
		"body": ["ROUND_UP"]},
	"Rounded from the decimal module": {
		"description": "Rounded from the decimal module",
		"prefix": "Rounded",
		"body": ["Rounded"]},
	"Subnormal from the decimal module": {
		"description": "Subnormal from the decimal module",
		"prefix": "Subnormal",
		"body": ["Subnormal"]},
	"Underflow from the decimal module": {
		"description": "Underflow from the decimal module",
		"prefix": "Underflow",
		"body": ["Underflow"]},
	"getcontext() from the decimal module": {
		"description": "getcontext() from the decimal module",
		"prefix": "getcontext",
		"body": ["getcontext(${1:})"]},
	"localcontext() from the decimal module": {
		"description": "localcontext() from the decimal module",
		"prefix": "localcontext",
		"body": ["localcontext(${1:ctx=None})"]},
	"setcontext() from the decimal module": {
		"description": "setcontext() from the decimal module",
		"prefix": "setcontext",
		"body": ["setcontext(${1:c})"]},
// difflib completion
	"Differ from the difflib module": {
		"description": "Differ from the difflib module",
		"prefix": "Differ",
		"body": ["Differ"]},
	"Differ from the difflib module": {
		"description": "Differ from the difflib module",
		"prefix": "Differ",
		"body": ["Differ(${1:linejunk=None}, ${2:charjunk=None})"]},
	"HtmlDiff from the difflib module": {
		"description": "HtmlDiff from the difflib module",
		"prefix": "HtmlDiff",
		"body": ["HtmlDiff"]},
	"IS_CHARACTER_JUNK from the difflib module": {
		"description": "IS_CHARACTER_JUNK from the difflib module",
		"prefix": "IS_CHARACTER_JUNK",
		"body": ["IS_CHARACTER_JUNK(${1:ch})"]},
	"IS_LINE_JUNK from the difflib module": {
		"description": "IS_LINE_JUNK from the difflib module",
		"prefix": "IS_LINE_JUNK",
		"body": ["IS_LINE_JUNK(${1:line})"]},
	"SequenceMatcher from the difflib module": {
		"description": "SequenceMatcher from the difflib module",
		"prefix": "SequenceMatcher",
		"body": ["SequenceMatcher"]},
	"SequenceMatcher from the difflib module": {
		"description": "SequenceMatcher from the difflib module",
		"prefix": "SequenceMatcher",
		"body": ["SequenceMatcher(${1:isjunk=None}, ${2:a=''}, ${3:b=''}, ${4:autojunk=True})"]},
	"context_diff() from the difflib module": {
		"description": "context_diff() from the difflib module",
		"prefix": "context_diff",
		"body": ["context_diff(${1:a}, ${2:b}, ${3:fromfile=''}, ${4:tofile=''}, ${5:fromfiledate=''}, ${6:tofiledate=''}, ${7:n=3}, ${8:lineterm=' '})"]},
	"diff_bytes() from the difflib module": {
		"description": "diff_bytes() from the difflib module",
		"prefix": "diff_bytes",
		"body": ["diff_bytes(${1:dfunc}, ${2:a}, ${3:b}, ${4:fromfile=b''}, ${5:tofile=b''}, ${6:fromfiledate=b''}, ${7:tofiledate=b''}, ${8:n=3}, ${9:lineterm=b' '})"]},
	"get_close_matches() from the difflib module": {
		"description": "get_close_matches() from the difflib module",
		"prefix": "get_close_matches",
		"body": ["get_close_matches(${1:word}, ${2:possibilities}, ${3:n=3}, ${4:cutoff=0.6})"]},
	"ndiff() from the difflib module": {
		"description": "ndiff() from the difflib module",
		"prefix": "ndiff",
		"body": ["ndiff(${1:a}, ${2:b}, ${3:linejunk=None}, ${4:charjunk=IS_CHARACTER_JUNK})"]},
	"restore() from the difflib module": {
		"description": "restore() from the difflib module",
		"prefix": "restore",
		"body": ["restore(${1:sequence}, ${2:which})"]},
	"unified_diff() from the difflib module": {
		"description": "unified_diff() from the difflib module",
		"prefix": "unified_diff",
		"body": ["unified_diff(${1:a,})"]},
// dis completion
	"Bytecode from the dis module": {
		"description": "Bytecode from the dis module",
		"prefix": "Bytecode",
		"body": ["Bytecode(${1:x}, ${2:*}, ${3:first_line=None}, ${4:current_offset=None})"]},
	"Instruction from the dis module": {
		"description": "Instruction from the dis module",
		"prefix": "Instruction",
		"body": ["Instruction"]},
	"cmp_op() from the dis module": {
		"description": "cmp_op() from the dis module",
		"prefix": "cmp_op",
		"body": ["cmp_op()"]},
	"code_info() from the dis module": {
		"description": "code_info() from the dis module",
		"prefix": "code_info",
		"body": ["code_info(${1:x})"]},
	"dis() from the dis module": {
		"description": "dis() from the dis module",
		"prefix": "dis",
		"body": ["dis(${1:x=None}, ${2:*}, ${3:file=None})"]},
	"disassemble() from the dis module": {
		"description": "disassemble() from the dis module",
		"prefix": "disassemble",
		"body": ["disassemble(${1:code}, ${2:lasti=-1}, ${3:*}, ${4:file=None})"]},
	"disco() from the dis module": {
		"description": "disco() from the dis module",
		"prefix": "disco",
		"body": ["disco(${1:code}, ${2:lasti=-1}, ${3:*}, ${4:file=None})"]},
	"distb() from the dis module": {
		"description": "distb() from the dis module",
		"prefix": "distb",
		"body": ["distb(${1:tb=None}, ${2:*}, ${3:file=None})"]},
	"findlabels() from the dis module": {
		"description": "findlabels() from the dis module",
		"prefix": "findlabels",
		"body": ["findlabels(${1:code})"]},
	"findlinestarts() from the dis module": {
		"description": "findlinestarts() from the dis module",
		"prefix": "findlinestarts",
		"body": ["findlinestarts(${1:code})"]},
	"get_instructions() from the dis module": {
		"description": "get_instructions() from the dis module",
		"prefix": "get_instructions",
		"body": ["get_instructions(${1:x}, ${2:*}, ${3:first_line=None})"]},
	"hascompare() from the dis module": {
		"description": "hascompare() from the dis module",
		"prefix": "hascompare",
		"body": ["hascompare()"]},
	"hasconst() from the dis module": {
		"description": "hasconst() from the dis module",
		"prefix": "hasconst",
		"body": ["hasconst()"]},
	"hasfree() from the dis module": {
		"description": "hasfree() from the dis module",
		"prefix": "hasfree",
		"body": ["hasfree()"]},
	"hasjabs() from the dis module": {
		"description": "hasjabs() from the dis module",
		"prefix": "hasjabs",
		"body": ["hasjabs()"]},
	"hasjrel() from the dis module": {
		"description": "hasjrel() from the dis module",
		"prefix": "hasjrel",
		"body": ["hasjrel()"]},
	"haslocal() from the dis module": {
		"description": "haslocal() from the dis module",
		"prefix": "haslocal",
		"body": ["haslocal()"]},
	"hasname() from the dis module": {
		"description": "hasname() from the dis module",
		"prefix": "hasname",
		"body": ["hasname()"]},
	"opmap() from the dis module": {
		"description": "opmap() from the dis module",
		"prefix": "opmap",
		"body": ["opmap()"]},
	"opname() from the dis module": {
		"description": "opname() from the dis module",
		"prefix": "opname",
		"body": ["opname()"]},
	"show_code() from the dis module": {
		"description": "show_code() from the dis module",
		"prefix": "show_code",
		"body": ["show_code(${1:x}, ${2:*}, ${3:file=None})"]},
	"stack_effect() from the dis module": {
		"description": "stack_effect() from the dis module",
		"prefix": "stack_effect",
		"body": ["stack_effect(${1:opcode[,})"]},
// doctest completion
	"COMPARISON_FLAGS from the doctest module": {
		"description": "COMPARISON_FLAGS from the doctest module",
		"prefix": "COMPARISON_FLAGS",
		"body": ["COMPARISON_FLAGS"]},
	"DONT_ACCEPT_BLANKLINE from the doctest module": {
		"description": "DONT_ACCEPT_BLANKLINE from the doctest module",
		"prefix": "DONT_ACCEPT_BLANKLINE",
		"body": ["DONT_ACCEPT_BLANKLINE"]},
	"DONT_ACCEPT_TRUE_FOR_1 from the doctest module": {
		"description": "DONT_ACCEPT_TRUE_FOR_1 from the doctest module",
		"prefix": "DONT_ACCEPT_TRUE_FOR_1",
		"body": ["DONT_ACCEPT_TRUE_FOR_1"]},
	"DebugRunner from the doctest module": {
		"description": "DebugRunner from the doctest module",
		"prefix": "DebugRunner",
		"body": ["DebugRunner(${1:checker=None}, ${2:verbose=None}, ${3:optionflags=0})"]},
	"DocFileSuite from the doctest module": {
		"description": "DocFileSuite from the doctest module",
		"prefix": "DocFileSuite",
		"body": ["DocFileSuite(${1:*paths}, ${2:module_relative=True}, ${3:package=None}, ${4:setUp=None}, ${5:tearDown=None}, ${6:globs=None}, ${7:optionflags=0}, ${8:parser=DocTestParser}, ${9:})"]},
	"DocTest from the doctest module": {
		"description": "DocTest from the doctest module",
		"prefix": "DocTest",
		"body": ["DocTest(${1:examples}, ${2:globs}, ${3:name}, ${4:filename}, ${5:lineno}, ${6:docstring})"]},
	"DocTestFailure from the doctest module": {
		"description": "DocTestFailure from the doctest module",
		"prefix": "DocTestFailure",
		"body": ["DocTestFailure(${1:test}, ${2:example}, ${3:got})"]},
	"DocTestFinder from the doctest module": {
		"description": "DocTestFinder from the doctest module",
		"prefix": "DocTestFinder",
		"body": ["DocTestFinder(${1:verbose=False}, ${2:parser=DocTestParser}, ${3:})"]},
	"DocTestParser from the doctest module": {
		"description": "DocTestParser from the doctest module",
		"prefix": "DocTestParser",
		"body": ["DocTestParser"]},
	"DocTestRunner from the doctest module": {
		"description": "DocTestRunner from the doctest module",
		"prefix": "DocTestRunner",
		"body": ["DocTestRunner(${1:checker=None}, ${2:verbose=None}, ${3:optionflags=0})"]},
	"DocTestSuite from the doctest module": {
		"description": "DocTestSuite from the doctest module",
		"prefix": "DocTestSuite",
		"body": ["DocTestSuite(${1:module=None}, ${2:globs=None}, ${3:extraglobs=None}, ${4:test_finder=None}, ${5:setUp=None}, ${6:tearDown=None}, ${7:checker=None})"]},
	"ELLIPSIS from the doctest module": {
		"description": "ELLIPSIS from the doctest module",
		"prefix": "ELLIPSIS",
		"body": ["ELLIPSIS"]},
	"Example from the doctest module": {
		"description": "Example from the doctest module",
		"prefix": "Example",
		"body": ["Example(${1:source}, ${2:want}, ${3:exc_msg=None}, ${4:lineno=0}, ${5:indent=0}, ${6:options=None})"]},
	"FAIL_FAST from the doctest module": {
		"description": "FAIL_FAST from the doctest module",
		"prefix": "FAIL_FAST",
		"body": ["FAIL_FAST"]},
	"IGNORE_EXCEPTION_DETAIL from the doctest module": {
		"description": "IGNORE_EXCEPTION_DETAIL from the doctest module",
		"prefix": "IGNORE_EXCEPTION_DETAIL",
		"body": ["IGNORE_EXCEPTION_DETAIL"]},
	"NORMALIZE_WHITESPACE from the doctest module": {
		"description": "NORMALIZE_WHITESPACE from the doctest module",
		"prefix": "NORMALIZE_WHITESPACE",
		"body": ["NORMALIZE_WHITESPACE"]},
	"OutputChecker from the doctest module": {
		"description": "OutputChecker from the doctest module",
		"prefix": "OutputChecker",
		"body": ["OutputChecker"]},
	"REPORTING_FLAGS from the doctest module": {
		"description": "REPORTING_FLAGS from the doctest module",
		"prefix": "REPORTING_FLAGS",
		"body": ["REPORTING_FLAGS"]},
	"REPORT_CDIFF from the doctest module": {
		"description": "REPORT_CDIFF from the doctest module",
		"prefix": "REPORT_CDIFF",
		"body": ["REPORT_CDIFF"]},
	"REPORT_NDIFF from the doctest module": {
		"description": "REPORT_NDIFF from the doctest module",
		"prefix": "REPORT_NDIFF",
		"body": ["REPORT_NDIFF"]},
	"REPORT_ONLY_FIRST_FAILURE from the doctest module": {
		"description": "REPORT_ONLY_FIRST_FAILURE from the doctest module",
		"prefix": "REPORT_ONLY_FIRST_FAILURE",
		"body": ["REPORT_ONLY_FIRST_FAILURE"]},
	"REPORT_UDIFF from the doctest module": {
		"description": "REPORT_UDIFF from the doctest module",
		"prefix": "REPORT_UDIFF",
		"body": ["REPORT_UDIFF"]},
	"SKIP from the doctest module": {
		"description": "SKIP from the doctest module",
		"prefix": "SKIP",
		"body": ["SKIP"]},
	"UnexpectedException from the doctest module": {
		"description": "UnexpectedException from the doctest module",
		"prefix": "UnexpectedException",
		"body": ["UnexpectedException(${1:test}, ${2:example}, ${3:exc_info})"]},
	"debug() from the doctest module": {
		"description": "debug() from the doctest module",
		"prefix": "debug",
		"body": ["debug(${1:module}, ${2:name}, ${3:pm=False})"]},
	"debug_src() from the doctest module": {
		"description": "debug_src() from the doctest module",
		"prefix": "debug_src",
		"body": ["debug_src(${1:src}, ${2:pm=False}, ${3:globs=None})"]},
	"example() from the doctest module": {
		"description": "example() from the doctest module",
		"prefix": "example",
		"body": ["example()"]},
	"exc_info() from the doctest module": {
		"description": "exc_info() from the doctest module",
		"prefix": "exc_info",
		"body": ["exc_info()"]},
	"got() from the doctest module": {
		"description": "got() from the doctest module",
		"prefix": "got",
		"body": ["got()"]},
	"register_optionflag() from the doctest module": {
		"description": "register_optionflag() from the doctest module",
		"prefix": "register_optionflag",
		"body": ["register_optionflag(${1:name})"]},
	"run_docstring_examples() from the doctest module": {
		"description": "run_docstring_examples() from the doctest module",
		"prefix": "run_docstring_examples",
		"body": ["run_docstring_examples(${1:f}, ${2:globs}, ${3:verbose=False}, ${4:name=\"NoName\"}, ${5:compileflags=None}, ${6:optionflags=0})"]},
	"script_from_examples() from the doctest module": {
		"description": "script_from_examples() from the doctest module",
		"prefix": "script_from_examples",
		"body": ["script_from_examples(${1:s})"]},
	"set_unittest_reportflags() from the doctest module": {
		"description": "set_unittest_reportflags() from the doctest module",
		"prefix": "set_unittest_reportflags",
		"body": ["set_unittest_reportflags(${1:flags})"]},
	"test() from the doctest module": {
		"description": "test() from the doctest module",
		"prefix": "test",
		"body": ["test()"]},
	"testfile() from the doctest module": {
		"description": "testfile() from the doctest module",
		"prefix": "testfile",
		"body": ["testfile(${1:filename}, ${2:module_relative=True}, ${3:name=None}, ${4:package=None}, ${5:globs=None}, ${6:verbose=None}, ${7:report=True}, ${8:optionflags=0}, ${9:extraglobs=None}, ${10:raise_on_error=False}, ${11:parser=DocTestParser}, ${12:})"]},
	"testmod() from the doctest module": {
		"description": "testmod() from the doctest module",
		"prefix": "testmod",
		"body": ["testmod(${1:m=None}, ${2:name=None}, ${3:globs=None}, ${4:verbose=None}, ${5:report=True}, ${6:optionflags=0}, ${7:extraglobs=None}, ${8:raise_on_error=False}, ${9:exclude_empty=False})"]},
	"testsource() from the doctest module": {
		"description": "testsource() from the doctest module",
		"prefix": "testsource",
		"body": ["testsource(${1:module,})"]},
// email.charset completion
	"Charset from the email.charset module": {
		"description": "Charset from the email.charset module",
		"prefix": "Charset",
		"body": ["Charset(${1:input_charset=DEFAULT_CHARSET})"]},
	"add_alias() from the email.charset module": {
		"description": "add_alias() from the email.charset module",
		"prefix": "add_alias",
		"body": ["add_alias(${1:alias}, ${2:canonical})"]},
	"add_charset() from the email.charset module": {
		"description": "add_charset() from the email.charset module",
		"prefix": "add_charset",
		"body": ["add_charset(${1:charset}, ${2:header_enc=None}, ${3:body_enc=None}, ${4:output_charset=None})"]},
	"add_codec() from the email.charset module": {
		"description": "add_codec() from the email.charset module",
		"prefix": "add_codec",
		"body": ["add_codec(${1:charset,})"]},
// email.contentmanager completion
	"ContentManager from the email.contentmanager module": {
		"description": "ContentManager from the email.contentmanager module",
		"prefix": "ContentManager",
		"body": ["ContentManager"]},
	"EmailMessage from the email.contentmanager module": {
		"description": "EmailMessage from the email.contentmanager module",
		"prefix": "EmailMessage",
		"body": ["EmailMessage(${1:policy=default})"]},
	"MIMEPart from the email.contentmanager module": {
		"description": "MIMEPart from the email.contentmanager module",
		"prefix": "MIMEPart",
		"body": ["MIMEPart(${1:policy=default})"]},
	"get_content() from the email.contentmanager module": {
		"description": "get_content() from the email.contentmanager module",
		"prefix": "get_content",
		"body": ["get_content(${1:msg}, ${2:errors='replace'})"]},
	"raw_data_manager() from the email.contentmanager module": {
		"description": "raw_data_manager() from the email.contentmanager module",
		"prefix": "raw_data_manager",
		"body": ["raw_data_manager()"]},
	"set_content() from the email.contentmanager module": {
		"description": "set_content() from the email.contentmanager module",
		"prefix": "set_content",
		"body": ["set_content(${1:msg}, ${2:}, ${3:maintype}, ${4:subtype}, ${5:cte=\"base64\"}, ${6:disposition=None}, ${7:filename=None}, ${8:cid=None}, ${9:params=None}, ${10:headers=None})"]},
	"set_content() from the email.contentmanager module": {
		"description": "set_content() from the email.contentmanager module",
		"prefix": "set_content",
		"body": ["set_content(${1:msg,})"]},
// email.encoders completion
	"encode_7or8bit() from the email.encoders module": {
		"description": "encode_7or8bit() from the email.encoders module",
		"prefix": "encode_7or8bit",
		"body": ["encode_7or8bit(${1:msg})"]},
	"encode_base64() from the email.encoders module": {
		"description": "encode_base64() from the email.encoders module",
		"prefix": "encode_base64",
		"body": ["encode_base64(${1:msg})"]},
	"encode_noop() from the email.encoders module": {
		"description": "encode_noop() from the email.encoders module",
		"prefix": "encode_noop",
		"body": ["encode_noop(${1:msg})"]},
	"encode_quopri() from the email.encoders module": {
		"description": "encode_quopri() from the email.encoders module",
		"prefix": "encode_quopri",
		"body": ["encode_quopri(${1:msg})"]},
// email.errors completion
	"BoundaryError from the email.errors module": {
		"description": "BoundaryError from the email.errors module",
		"prefix": "BoundaryError",
		"body": ["BoundaryError"]},
	"HeaderParseError from the email.errors module": {
		"description": "HeaderParseError from the email.errors module",
		"prefix": "HeaderParseError",
		"body": ["HeaderParseError"]},
	"MessageError from the email.errors module": {
		"description": "MessageError from the email.errors module",
		"prefix": "MessageError",
		"body": ["MessageError"]},
	"MessageParseError from the email.errors module": {
		"description": "MessageParseError from the email.errors module",
		"prefix": "MessageParseError",
		"body": ["MessageParseError"]},
	"MultipartConversionError from the email.errors module": {
		"description": "MultipartConversionError from the email.errors module",
		"prefix": "MultipartConversionError",
		"body": ["MultipartConversionError"]},
// email.generator completion
	"BytesGenerator from the email.generator module": {
		"description": "BytesGenerator from the email.generator module",
		"prefix": "BytesGenerator",
		"body": ["BytesGenerator(${1:outfp}, ${2:mangle_from_=True}, ${3:maxheaderlen=78}, ${4:*}, ${5:policy=None})"]},
	"DecodedGenerator from the email.generator module": {
		"description": "DecodedGenerator from the email.generator module",
		"prefix": "DecodedGenerator",
		"body": ["DecodedGenerator(${1:outfp}, ${2:mangle_from_=True}, ${3:maxheaderlen=78}, ${4:fmt=None})"]},
	"Generator from the email.generator module": {
		"description": "Generator from the email.generator module",
		"prefix": "Generator",
		"body": ["Generator(${1:outfp,})"]},
// email.header completion
	"Header from the email.header module": {
		"description": "Header from the email.header module",
		"prefix": "Header",
		"body": ["Header(${1:s=None}, ${2:charset=None}, ${3:maxlinelen=None}, ${4:header_name=None}, ${5:continuation_ws=' '}, ${6:errors='strict'})"]},
	"decode_header() from the email.header module": {
		"description": "decode_header() from the email.header module",
		"prefix": "decode_header",
		"body": ["decode_header(${1:header})"]},
	"make_header() from the email.header module": {
		"description": "make_header() from the email.header module",
		"prefix": "make_header",
		"body": ["make_header(${1:decoded_seq,})"]},
// email.headerregistry completion
	"Address from the email.headerregistry module": {
		"description": "Address from the email.headerregistry module",
		"prefix": "Address",
		"body": ["Address(${1:display_name=''}, ${2:username=''}, ${3:domain=''}, ${4:addr_spec=None})"]},
	"AddressHeader from the email.headerregistry module": {
		"description": "AddressHeader from the email.headerregistry module",
		"prefix": "AddressHeader",
		"body": ["AddressHeader"]},
	"BaseHeader from the email.headerregistry module": {
		"description": "BaseHeader from the email.headerregistry module",
		"prefix": "BaseHeader",
		"body": ["BaseHeader(${1:name}, ${2:value})"]},
	"ContentDispositionHeader from the email.headerregistry module": {
		"description": "ContentDispositionHeader from the email.headerregistry module",
		"prefix": "ContentDispositionHeader",
		"body": ["ContentDispositionHeader"]},
	"ContentTransferEncoding from the email.headerregistry module": {
		"description": "ContentTransferEncoding from the email.headerregistry module",
		"prefix": "ContentTransferEncoding",
		"body": ["ContentTransferEncoding"]},
	"ContentTypeHeader from the email.headerregistry module": {
		"description": "ContentTypeHeader from the email.headerregistry module",
		"prefix": "ContentTypeHeader",
		"body": ["ContentTypeHeader"]},
	"DateHeader from the email.headerregistry module": {
		"description": "DateHeader from the email.headerregistry module",
		"prefix": "DateHeader",
		"body": ["DateHeader"]},
	"Group from the email.headerregistry module": {
		"description": "Group from the email.headerregistry module",
		"prefix": "Group",
		"body": ["Group(${1:display_name=None}, ${2:addresses=None})"]},
	"HeaderRegistry from the email.headerregistry module": {
		"description": "HeaderRegistry from the email.headerregistry module",
		"prefix": "HeaderRegistry",
		"body": ["HeaderRegistry(${1:base_class=BaseHeader}, ${2:default_class=UnstructuredHeader}, ${3:use_default_map=True})"]},
	"MIMEVersionHeader from the email.headerregistry module": {
		"description": "MIMEVersionHeader from the email.headerregistry module",
		"prefix": "MIMEVersionHeader",
		"body": ["MIMEVersionHeader"]},
	"ParameterizedMIMEHeader from the email.headerregistry module": {
		"description": "ParameterizedMIMEHeader from the email.headerregistry module",
		"prefix": "ParameterizedMIMEHeader",
		"body": ["ParameterizedMIMEHeader"]},
	"SingleAddressHeader from the email.headerregistry module": {
		"description": "SingleAddressHeader from the email.headerregistry module",
		"prefix": "SingleAddressHeader",
		"body": ["SingleAddressHeader"]},
	"UnstructuredHeader from the email.headerregistry module": {
		"description": "UnstructuredHeader from the email.headerregistry module",
		"prefix": "UnstructuredHeader",
		"body": ["UnstructuredHeader"]},
// email.iterators completion
	"_structure() from the email.iterators module": {
		"description": "_structure() from the email.iterators module",
		"prefix": "_structure",
		"body": ["_structure(${1:msg}, ${2:fp=None}, ${3:level=0}, ${4:include_default=False})"]},
	"body_line_iterator() from the email.iterators module": {
		"description": "body_line_iterator() from the email.iterators module",
		"prefix": "body_line_iterator",
		"body": ["body_line_iterator(${1:msg}, ${2:decode=False})"]},
	"typed_subpart_iterator() from the email.iterators module": {
		"description": "typed_subpart_iterator() from the email.iterators module",
		"prefix": "typed_subpart_iterator",
		"body": ["typed_subpart_iterator(${1:msg,})"]},
// email.message completion
	"Message from the email.message module": {
		"description": "Message from the email.message module",
		"prefix": "Message",
		"body": ["Message(${1:policy=compat32})"]},
// email.mime completion
	"MIMEApplication from the email.mime module": {
		"description": "MIMEApplication from the email.mime module",
		"prefix": "MIMEApplication",
		"body": ["MIMEApplication(${1:_data}, ${2:_subtype='octet-stream'}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})"]},
	"MIMEAudio from the email.mime module": {
		"description": "MIMEAudio from the email.mime module",
		"prefix": "MIMEAudio",
		"body": ["MIMEAudio(${1:_audiodata}, ${2:_subtype=None}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})"]},
	"MIMEBase from the email.mime module": {
		"description": "MIMEBase from the email.mime module",
		"prefix": "MIMEBase",
		"body": ["MIMEBase(${1:_maintype}, ${2:_subtype}, ${3:**_params})"]},
	"MIMEImage from the email.mime module": {
		"description": "MIMEImage from the email.mime module",
		"prefix": "MIMEImage",
		"body": ["MIMEImage(${1:_imagedata}, ${2:_subtype=None}, ${3:_encoder=email.encoders.encode_base64}, ${4:**_params})"]},
	"MIMEMessage from the email.mime module": {
		"description": "MIMEMessage from the email.mime module",
		"prefix": "MIMEMessage",
		"body": ["MIMEMessage(${1:_msg}, ${2:_subtype='rfc822'})"]},
	"MIMEMultipart from the email.mime module": {
		"description": "MIMEMultipart from the email.mime module",
		"prefix": "MIMEMultipart",
		"body": ["MIMEMultipart(${1:_subtype='mixed'}, ${2:boundary=None}, ${3:_subparts=None}, ${4:**_params})"]},
	"MIMENonMultipart from the email.mime module": {
		"description": "MIMENonMultipart from the email.mime module",
		"prefix": "MIMENonMultipart",
		"body": ["MIMENonMultipart"]},
	"MIMEText from the email.mime module": {
		"description": "MIMEText from the email.mime module",
		"prefix": "MIMEText",
		"body": ["MIMEText(${1:_text,})"]},
// email.parser completion
	"BytesFeedParser from the email.parser module": {
		"description": "BytesFeedParser from the email.parser module",
		"prefix": "BytesFeedParser",
		"body": ["BytesFeedParser(${1:_factory=email.message.Message})"]},
	"BytesParser from the email.parser module": {
		"description": "BytesParser from the email.parser module",
		"prefix": "BytesParser",
		"body": ["BytesParser(${1:_class=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})"]},
	"FeedParser from the email.parser module": {
		"description": "FeedParser from the email.parser module",
		"prefix": "FeedParser",
		"body": ["FeedParser(${1:_factory=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})"]},
	"Parser from the email.parser module": {
		"description": "Parser from the email.parser module",
		"prefix": "Parser",
		"body": ["Parser(${1:_class=email.message.Message}, ${2:*}, ${3:policy=policy.compat32})"]},
	"message_from_binary_file() from the email.parser module": {
		"description": "message_from_binary_file() from the email.parser module",
		"prefix": "message_from_binary_file",
		"body": ["message_from_binary_file(${1:fp}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})"]},
	"message_from_bytes() from the email.parser module": {
		"description": "message_from_bytes() from the email.parser module",
		"prefix": "message_from_bytes",
		"body": ["message_from_bytes(${1:s}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})"]},
	"message_from_file() from the email.parser module": {
		"description": "message_from_file() from the email.parser module",
		"prefix": "message_from_file",
		"body": ["message_from_file(${1:fp}, ${2:_class=email.message.Message}, ${3:*}, ${4:policy=policy.compat32})"]},
	"message_from_string() from the email.parser module": {
		"description": "message_from_string() from the email.parser module",
		"prefix": "message_from_string",
		"body": ["message_from_string(${1:s,})"]},
// email.policy completion
	"Compat32 from the email.policy module": {
		"description": "Compat32 from the email.policy module",
		"prefix": "Compat32",
		"body": ["Compat32(${1:**kw})"]},
	"EmailPolicy from the email.policy module": {
		"description": "EmailPolicy from the email.policy module",
		"prefix": "EmailPolicy",
		"body": ["EmailPolicy(${1:**kw})"]},
	"HTTP from the email.policy module": {
		"description": "HTTP from the email.policy module",
		"prefix": "HTTP",
		"body": ["HTTP"]},
	"Policy from the email.policy module": {
		"description": "Policy from the email.policy module",
		"prefix": "Policy",
		"body": ["Policy(${1:**kw})"]},
	"SMTP from the email.policy module": {
		"description": "SMTP from the email.policy module",
		"prefix": "SMTP",
		"body": ["SMTP"]},
	"SMTPUTF8 from the email.policy module": {
		"description": "SMTPUTF8 from the email.policy module",
		"prefix": "SMTPUTF8",
		"body": ["SMTPUTF8"]},
	"compat32() from the email.policy module": {
		"description": "compat32() from the email.policy module",
		"prefix": "compat32",
		"body": ["compat32()"]},
	"default() from the email.policy module": {
		"description": "default() from the email.policy module",
		"prefix": "default",
		"body": ["default()"]},
	"strict() from the email.policy module": {
		"description": "strict() from the email.policy module",
		"prefix": "strict",
		"body": ["strict()"]},
// email.utils completion
	"Compat32 from the email.utils module": {
		"description": "Compat32 from the email.utils module",
		"prefix": "Compat32",
		"body": ["Compat32(${1:**kw})"]},
	"EmailPolicy from the email.utils module": {
		"description": "EmailPolicy from the email.utils module",
		"prefix": "EmailPolicy",
		"body": ["EmailPolicy(${1:**kw})"]},
	"HTTP from the email.utils module": {
		"description": "HTTP from the email.utils module",
		"prefix": "HTTP",
		"body": ["HTTP"]},
	"Policy from the email.utils module": {
		"description": "Policy from the email.utils module",
		"prefix": "Policy",
		"body": ["Policy(${1:**kw})"]},
	"SMTP from the email.utils module": {
		"description": "SMTP from the email.utils module",
		"prefix": "SMTP",
		"body": ["SMTP"]},
	"SMTPUTF8 from the email.utils module": {
		"description": "SMTPUTF8 from the email.utils module",
		"prefix": "SMTPUTF8",
		"body": ["SMTPUTF8"]},
	"compat32() from the email.utils module": {
		"description": "compat32() from the email.utils module",
		"prefix": "compat32",
		"body": ["compat32()"]},
	"default() from the email.utils module": {
		"description": "default() from the email.utils module",
		"prefix": "default",
		"body": ["default()"]},
	"strict() from the email.utils module": {
		"description": "strict() from the email.utils module",
		"prefix": "strict",
		"body": ["strict()"]},
// encodings.idna completion
	"Compat32 from the encodings.idna module": {
		"description": "Compat32 from the encodings.idna module",
		"prefix": "Compat32",
		"body": ["Compat32(${1:**kw})"]},
	"EmailPolicy from the encodings.idna module": {
		"description": "EmailPolicy from the encodings.idna module",
		"prefix": "EmailPolicy",
		"body": ["EmailPolicy(${1:**kw})"]},
	"HTTP from the encodings.idna module": {
		"description": "HTTP from the encodings.idna module",
		"prefix": "HTTP",
		"body": ["HTTP"]},
	"Policy from the encodings.idna module": {
		"description": "Policy from the encodings.idna module",
		"prefix": "Policy",
		"body": ["Policy(${1:**kw})"]},
	"SMTP from the encodings.idna module": {
		"description": "SMTP from the encodings.idna module",
		"prefix": "SMTP",
		"body": ["SMTP"]},
	"SMTPUTF8 from the encodings.idna module": {
		"description": "SMTPUTF8 from the encodings.idna module",
		"prefix": "SMTPUTF8",
		"body": ["SMTPUTF8"]},
	"compat32() from the encodings.idna module": {
		"description": "compat32() from the encodings.idna module",
		"prefix": "compat32",
		"body": ["compat32()"]},
	"default() from the encodings.idna module": {
		"description": "default() from the encodings.idna module",
		"prefix": "default",
		"body": ["default()"]},
	"strict() from the encodings.idna module": {
		"description": "strict() from the encodings.idna module",
		"prefix": "strict",
		"body": ["strict()"]},
// encodings.mbcs completion
	"Compat32 from the encodings.mbcs module": {
		"description": "Compat32 from the encodings.mbcs module",
		"prefix": "Compat32",
		"body": ["Compat32(${1:**kw})"]},
	"EmailPolicy from the encodings.mbcs module": {
		"description": "EmailPolicy from the encodings.mbcs module",
		"prefix": "EmailPolicy",
		"body": ["EmailPolicy(${1:**kw})"]},
	"HTTP from the encodings.mbcs module": {
		"description": "HTTP from the encodings.mbcs module",
		"prefix": "HTTP",
		"body": ["HTTP"]},
	"Policy from the encodings.mbcs module": {
		"description": "Policy from the encodings.mbcs module",
		"prefix": "Policy",
		"body": ["Policy(${1:**kw})"]},
	"SMTP from the encodings.mbcs module": {
		"description": "SMTP from the encodings.mbcs module",
		"prefix": "SMTP",
		"body": ["SMTP"]},
	"SMTPUTF8 from the encodings.mbcs module": {
		"description": "SMTPUTF8 from the encodings.mbcs module",
		"prefix": "SMTPUTF8",
		"body": ["SMTPUTF8"]},
	"compat32() from the encodings.mbcs module": {
		"description": "compat32() from the encodings.mbcs module",
		"prefix": "compat32",
		"body": ["compat32()"]},
	"default() from the encodings.mbcs module": {
		"description": "default() from the encodings.mbcs module",
		"prefix": "default",
		"body": ["default()"]},
	"strict() from the encodings.mbcs module": {
		"description": "strict() from the encodings.mbcs module",
		"prefix": "strict",
		"body": ["strict()"]},
// encodings.utf_8_sig completion
	"Compat32 from the encodings.utf_8_sig module": {
		"description": "Compat32 from the encodings.utf_8_sig module",
		"prefix": "Compat32",
		"body": ["Compat32(${1:**kw})"]},
	"EmailPolicy from the encodings.utf_8_sig module": {
		"description": "EmailPolicy from the encodings.utf_8_sig module",
		"prefix": "EmailPolicy",
		"body": ["EmailPolicy(${1:**kw})"]},
	"HTTP from the encodings.utf_8_sig module": {
		"description": "HTTP from the encodings.utf_8_sig module",
		"prefix": "HTTP",
		"body": ["HTTP"]},
	"Policy from the encodings.utf_8_sig module": {
		"description": "Policy from the encodings.utf_8_sig module",
		"prefix": "Policy",
		"body": ["Policy(${1:**kw})"]},
	"SMTP from the encodings.utf_8_sig module": {
		"description": "SMTP from the encodings.utf_8_sig module",
		"prefix": "SMTP",
		"body": ["SMTP"]},
	"SMTPUTF8 from the encodings.utf_8_sig module": {
		"description": "SMTPUTF8 from the encodings.utf_8_sig module",
		"prefix": "SMTPUTF8",
		"body": ["SMTPUTF8"]},
	"compat32() from the encodings.utf_8_sig module": {
		"description": "compat32() from the encodings.utf_8_sig module",
		"prefix": "compat32",
		"body": ["compat32()"]},
	"default() from the encodings.utf_8_sig module": {
		"description": "default() from the encodings.utf_8_sig module",
		"prefix": "default",
		"body": ["default()"]},
	"strict() from the encodings.utf_8_sig module": {
		"description": "strict() from the encodings.utf_8_sig module",
		"prefix": "strict",
		"body": ["strict()"]},
// ensurepip completion
	"bootstrap() from the ensurepip module": {
		"description": "bootstrap() from the ensurepip module",
		"prefix": "bootstrap",
		"body": ["bootstrap(${1:root=None}, ${2:upgrade=False}, ${3:user=False}, ${4:altinstall=False}, ${5:default_pip=False}, ${6:verbosity=0})"]},
	"version() from the ensurepip module": {
		"description": "version() from the ensurepip module",
		"prefix": "version",
		"body": ["version(${1:})"]},
// enum completion
	"Enum from the enum module": {
		"description": "Enum from the enum module",
		"prefix": "Enum",
		"body": ["Enum"]},
	"IntEnum from the enum module": {
		"description": "IntEnum from the enum module",
		"prefix": "IntEnum",
		"body": ["IntEnum"]},
	"unique   A () from the enum module": {
		"description": "unique   A () from the enum module",
		"prefix": "unique   A ",
		"body": ["unique   A ()"]},
	"unique() from the enum module": {
		"description": "unique() from the enum module",
		"prefix": "unique",
		"body": ["unique(${1:})"]},
// errno completion
	"E2BIG from the errno module": {
		"description": "E2BIG from the errno module",
		"prefix": "E2BIG",
		"body": ["E2BIG"]},
	"EACCES from the errno module": {
		"description": "EACCES from the errno module",
		"prefix": "EACCES",
		"body": ["EACCES"]},
	"EADDRINUSE from the errno module": {
		"description": "EADDRINUSE from the errno module",
		"prefix": "EADDRINUSE",
		"body": ["EADDRINUSE"]},
	"EADDRNOTAVAIL from the errno module": {
		"description": "EADDRNOTAVAIL from the errno module",
		"prefix": "EADDRNOTAVAIL",
		"body": ["EADDRNOTAVAIL"]},
	"EADV from the errno module": {
		"description": "EADV from the errno module",
		"prefix": "EADV",
		"body": ["EADV"]},
	"EAFNOSUPPORT from the errno module": {
		"description": "EAFNOSUPPORT from the errno module",
		"prefix": "EAFNOSUPPORT",
		"body": ["EAFNOSUPPORT"]},
	"EAGAIN from the errno module": {
		"description": "EAGAIN from the errno module",
		"prefix": "EAGAIN",
		"body": ["EAGAIN"]},
	"EALREADY from the errno module": {
		"description": "EALREADY from the errno module",
		"prefix": "EALREADY",
		"body": ["EALREADY"]},
	"EBADE from the errno module": {
		"description": "EBADE from the errno module",
		"prefix": "EBADE",
		"body": ["EBADE"]},
	"EBADF from the errno module": {
		"description": "EBADF from the errno module",
		"prefix": "EBADF",
		"body": ["EBADF"]},
	"EBADFD from the errno module": {
		"description": "EBADFD from the errno module",
		"prefix": "EBADFD",
		"body": ["EBADFD"]},
	"EBADMSG from the errno module": {
		"description": "EBADMSG from the errno module",
		"prefix": "EBADMSG",
		"body": ["EBADMSG"]},
	"EBADR from the errno module": {
		"description": "EBADR from the errno module",
		"prefix": "EBADR",
		"body": ["EBADR"]},
	"EBADRQC from the errno module": {
		"description": "EBADRQC from the errno module",
		"prefix": "EBADRQC",
		"body": ["EBADRQC"]},
	"EBADSLT from the errno module": {
		"description": "EBADSLT from the errno module",
		"prefix": "EBADSLT",
		"body": ["EBADSLT"]},
	"EBFONT from the errno module": {
		"description": "EBFONT from the errno module",
		"prefix": "EBFONT",
		"body": ["EBFONT"]},
	"EBUSY from the errno module": {
		"description": "EBUSY from the errno module",
		"prefix": "EBUSY",
		"body": ["EBUSY"]},
	"ECHILD from the errno module": {
		"description": "ECHILD from the errno module",
		"prefix": "ECHILD",
		"body": ["ECHILD"]},
	"ECHRNG from the errno module": {
		"description": "ECHRNG from the errno module",
		"prefix": "ECHRNG",
		"body": ["ECHRNG"]},
	"ECOMM from the errno module": {
		"description": "ECOMM from the errno module",
		"prefix": "ECOMM",
		"body": ["ECOMM"]},
	"ECONNABORTED from the errno module": {
		"description": "ECONNABORTED from the errno module",
		"prefix": "ECONNABORTED",
		"body": ["ECONNABORTED"]},
	"ECONNREFUSED from the errno module": {
		"description": "ECONNREFUSED from the errno module",
		"prefix": "ECONNREFUSED",
		"body": ["ECONNREFUSED"]},
	"ECONNRESET from the errno module": {
		"description": "ECONNRESET from the errno module",
		"prefix": "ECONNRESET",
		"body": ["ECONNRESET"]},
	"EDEADLK from the errno module": {
		"description": "EDEADLK from the errno module",
		"prefix": "EDEADLK",
		"body": ["EDEADLK"]},
	"EDEADLOCK from the errno module": {
		"description": "EDEADLOCK from the errno module",
		"prefix": "EDEADLOCK",
		"body": ["EDEADLOCK"]},
	"EDESTADDRREQ from the errno module": {
		"description": "EDESTADDRREQ from the errno module",
		"prefix": "EDESTADDRREQ",
		"body": ["EDESTADDRREQ"]},
	"EDOM from the errno module": {
		"description": "EDOM from the errno module",
		"prefix": "EDOM",
		"body": ["EDOM"]},
	"EDOTDOT from the errno module": {
		"description": "EDOTDOT from the errno module",
		"prefix": "EDOTDOT",
		"body": ["EDOTDOT"]},
	"EDQUOT from the errno module": {
		"description": "EDQUOT from the errno module",
		"prefix": "EDQUOT",
		"body": ["EDQUOT"]},
	"EEXIST from the errno module": {
		"description": "EEXIST from the errno module",
		"prefix": "EEXIST",
		"body": ["EEXIST"]},
	"EFAULT from the errno module": {
		"description": "EFAULT from the errno module",
		"prefix": "EFAULT",
		"body": ["EFAULT"]},
	"EFBIG from the errno module": {
		"description": "EFBIG from the errno module",
		"prefix": "EFBIG",
		"body": ["EFBIG"]},
	"EHOSTDOWN from the errno module": {
		"description": "EHOSTDOWN from the errno module",
		"prefix": "EHOSTDOWN",
		"body": ["EHOSTDOWN"]},
	"EHOSTUNREACH from the errno module": {
		"description": "EHOSTUNREACH from the errno module",
		"prefix": "EHOSTUNREACH",
		"body": ["EHOSTUNREACH"]},
	"EIDRM from the errno module": {
		"description": "EIDRM from the errno module",
		"prefix": "EIDRM",
		"body": ["EIDRM"]},
	"EILSEQ from the errno module": {
		"description": "EILSEQ from the errno module",
		"prefix": "EILSEQ",
		"body": ["EILSEQ"]},
	"EINPROGRESS from the errno module": {
		"description": "EINPROGRESS from the errno module",
		"prefix": "EINPROGRESS",
		"body": ["EINPROGRESS"]},
	"EINTR from the errno module": {
		"description": "EINTR from the errno module",
		"prefix": "EINTR",
		"body": ["EINTR"]},
	"EINVAL from the errno module": {
		"description": "EINVAL from the errno module",
		"prefix": "EINVAL",
		"body": ["EINVAL"]},
	"EIO from the errno module": {
		"description": "EIO from the errno module",
		"prefix": "EIO",
		"body": ["EIO"]},
	"EISCONN from the errno module": {
		"description": "EISCONN from the errno module",
		"prefix": "EISCONN",
		"body": ["EISCONN"]},
	"EISDIR from the errno module": {
		"description": "EISDIR from the errno module",
		"prefix": "EISDIR",
		"body": ["EISDIR"]},
	"EISNAM from the errno module": {
		"description": "EISNAM from the errno module",
		"prefix": "EISNAM",
		"body": ["EISNAM"]},
	"EL2HLT from the errno module": {
		"description": "EL2HLT from the errno module",
		"prefix": "EL2HLT",
		"body": ["EL2HLT"]},
	"EL2NSYNC from the errno module": {
		"description": "EL2NSYNC from the errno module",
		"prefix": "EL2NSYNC",
		"body": ["EL2NSYNC"]},
	"EL3HLT from the errno module": {
		"description": "EL3HLT from the errno module",
		"prefix": "EL3HLT",
		"body": ["EL3HLT"]},
	"EL3RST from the errno module": {
		"description": "EL3RST from the errno module",
		"prefix": "EL3RST",
		"body": ["EL3RST"]},
	"ELIBACC from the errno module": {
		"description": "ELIBACC from the errno module",
		"prefix": "ELIBACC",
		"body": ["ELIBACC"]},
	"ELIBBAD from the errno module": {
		"description": "ELIBBAD from the errno module",
		"prefix": "ELIBBAD",
		"body": ["ELIBBAD"]},
	"ELIBEXEC from the errno module": {
		"description": "ELIBEXEC from the errno module",
		"prefix": "ELIBEXEC",
		"body": ["ELIBEXEC"]},
	"ELIBMAX from the errno module": {
		"description": "ELIBMAX from the errno module",
		"prefix": "ELIBMAX",
		"body": ["ELIBMAX"]},
	"ELIBSCN from the errno module": {
		"description": "ELIBSCN from the errno module",
		"prefix": "ELIBSCN",
		"body": ["ELIBSCN"]},
	"ELNRNG from the errno module": {
		"description": "ELNRNG from the errno module",
		"prefix": "ELNRNG",
		"body": ["ELNRNG"]},
	"ELOOP from the errno module": {
		"description": "ELOOP from the errno module",
		"prefix": "ELOOP",
		"body": ["ELOOP"]},
	"EMFILE from the errno module": {
		"description": "EMFILE from the errno module",
		"prefix": "EMFILE",
		"body": ["EMFILE"]},
	"EMLINK from the errno module": {
		"description": "EMLINK from the errno module",
		"prefix": "EMLINK",
		"body": ["EMLINK"]},
	"EMSGSIZE from the errno module": {
		"description": "EMSGSIZE from the errno module",
		"prefix": "EMSGSIZE",
		"body": ["EMSGSIZE"]},
	"EMULTIHOP from the errno module": {
		"description": "EMULTIHOP from the errno module",
		"prefix": "EMULTIHOP",
		"body": ["EMULTIHOP"]},
	"ENAMETOOLONG from the errno module": {
		"description": "ENAMETOOLONG from the errno module",
		"prefix": "ENAMETOOLONG",
		"body": ["ENAMETOOLONG"]},
	"ENAVAIL from the errno module": {
		"description": "ENAVAIL from the errno module",
		"prefix": "ENAVAIL",
		"body": ["ENAVAIL"]},
	"ENETDOWN from the errno module": {
		"description": "ENETDOWN from the errno module",
		"prefix": "ENETDOWN",
		"body": ["ENETDOWN"]},
	"ENETRESET from the errno module": {
		"description": "ENETRESET from the errno module",
		"prefix": "ENETRESET",
		"body": ["ENETRESET"]},
	"ENETUNREACH from the errno module": {
		"description": "ENETUNREACH from the errno module",
		"prefix": "ENETUNREACH",
		"body": ["ENETUNREACH"]},
	"ENFILE from the errno module": {
		"description": "ENFILE from the errno module",
		"prefix": "ENFILE",
		"body": ["ENFILE"]},
	"ENOANO from the errno module": {
		"description": "ENOANO from the errno module",
		"prefix": "ENOANO",
		"body": ["ENOANO"]},
	"ENOBUFS from the errno module": {
		"description": "ENOBUFS from the errno module",
		"prefix": "ENOBUFS",
		"body": ["ENOBUFS"]},
	"ENOCSI from the errno module": {
		"description": "ENOCSI from the errno module",
		"prefix": "ENOCSI",
		"body": ["ENOCSI"]},
	"ENODATA from the errno module": {
		"description": "ENODATA from the errno module",
		"prefix": "ENODATA",
		"body": ["ENODATA"]},
	"ENODEV from the errno module": {
		"description": "ENODEV from the errno module",
		"prefix": "ENODEV",
		"body": ["ENODEV"]},
	"ENOENT from the errno module": {
		"description": "ENOENT from the errno module",
		"prefix": "ENOENT",
		"body": ["ENOENT"]},
	"ENOEXEC from the errno module": {
		"description": "ENOEXEC from the errno module",
		"prefix": "ENOEXEC",
		"body": ["ENOEXEC"]},
	"ENOLCK from the errno module": {
		"description": "ENOLCK from the errno module",
		"prefix": "ENOLCK",
		"body": ["ENOLCK"]},
	"ENOLINK from the errno module": {
		"description": "ENOLINK from the errno module",
		"prefix": "ENOLINK",
		"body": ["ENOLINK"]},
	"ENOMEM from the errno module": {
		"description": "ENOMEM from the errno module",
		"prefix": "ENOMEM",
		"body": ["ENOMEM"]},
	"ENOMSG from the errno module": {
		"description": "ENOMSG from the errno module",
		"prefix": "ENOMSG",
		"body": ["ENOMSG"]},
	"ENONET from the errno module": {
		"description": "ENONET from the errno module",
		"prefix": "ENONET",
		"body": ["ENONET"]},
	"ENOPKG from the errno module": {
		"description": "ENOPKG from the errno module",
		"prefix": "ENOPKG",
		"body": ["ENOPKG"]},
	"ENOPROTOOPT from the errno module": {
		"description": "ENOPROTOOPT from the errno module",
		"prefix": "ENOPROTOOPT",
		"body": ["ENOPROTOOPT"]},
	"ENOSPC from the errno module": {
		"description": "ENOSPC from the errno module",
		"prefix": "ENOSPC",
		"body": ["ENOSPC"]},
	"ENOSR from the errno module": {
		"description": "ENOSR from the errno module",
		"prefix": "ENOSR",
		"body": ["ENOSR"]},
	"ENOSTR from the errno module": {
		"description": "ENOSTR from the errno module",
		"prefix": "ENOSTR",
		"body": ["ENOSTR"]},
	"ENOSYS from the errno module": {
		"description": "ENOSYS from the errno module",
		"prefix": "ENOSYS",
		"body": ["ENOSYS"]},
	"ENOTBLK from the errno module": {
		"description": "ENOTBLK from the errno module",
		"prefix": "ENOTBLK",
		"body": ["ENOTBLK"]},
	"ENOTCONN from the errno module": {
		"description": "ENOTCONN from the errno module",
		"prefix": "ENOTCONN",
		"body": ["ENOTCONN"]},
	"ENOTDIR from the errno module": {
		"description": "ENOTDIR from the errno module",
		"prefix": "ENOTDIR",
		"body": ["ENOTDIR"]},
	"ENOTEMPTY from the errno module": {
		"description": "ENOTEMPTY from the errno module",
		"prefix": "ENOTEMPTY",
		"body": ["ENOTEMPTY"]},
	"ENOTNAM from the errno module": {
		"description": "ENOTNAM from the errno module",
		"prefix": "ENOTNAM",
		"body": ["ENOTNAM"]},
	"ENOTSOCK from the errno module": {
		"description": "ENOTSOCK from the errno module",
		"prefix": "ENOTSOCK",
		"body": ["ENOTSOCK"]},
	"ENOTTY from the errno module": {
		"description": "ENOTTY from the errno module",
		"prefix": "ENOTTY",
		"body": ["ENOTTY"]},
	"ENOTUNIQ from the errno module": {
		"description": "ENOTUNIQ from the errno module",
		"prefix": "ENOTUNIQ",
		"body": ["ENOTUNIQ"]},
	"ENXIO from the errno module": {
		"description": "ENXIO from the errno module",
		"prefix": "ENXIO",
		"body": ["ENXIO"]},
	"EOPNOTSUPP from the errno module": {
		"description": "EOPNOTSUPP from the errno module",
		"prefix": "EOPNOTSUPP",
		"body": ["EOPNOTSUPP"]},
	"EOVERFLOW from the errno module": {
		"description": "EOVERFLOW from the errno module",
		"prefix": "EOVERFLOW",
		"body": ["EOVERFLOW"]},
	"EPERM from the errno module": {
		"description": "EPERM from the errno module",
		"prefix": "EPERM",
		"body": ["EPERM"]},
	"EPFNOSUPPORT from the errno module": {
		"description": "EPFNOSUPPORT from the errno module",
		"prefix": "EPFNOSUPPORT",
		"body": ["EPFNOSUPPORT"]},
	"EPIPE from the errno module": {
		"description": "EPIPE from the errno module",
		"prefix": "EPIPE",
		"body": ["EPIPE"]},
	"EPROTO from the errno module": {
		"description": "EPROTO from the errno module",
		"prefix": "EPROTO",
		"body": ["EPROTO"]},
	"EPROTONOSUPPORT from the errno module": {
		"description": "EPROTONOSUPPORT from the errno module",
		"prefix": "EPROTONOSUPPORT",
		"body": ["EPROTONOSUPPORT"]},
	"EPROTOTYPE from the errno module": {
		"description": "EPROTOTYPE from the errno module",
		"prefix": "EPROTOTYPE",
		"body": ["EPROTOTYPE"]},
	"ERANGE from the errno module": {
		"description": "ERANGE from the errno module",
		"prefix": "ERANGE",
		"body": ["ERANGE"]},
	"EREMCHG from the errno module": {
		"description": "EREMCHG from the errno module",
		"prefix": "EREMCHG",
		"body": ["EREMCHG"]},
	"EREMOTE from the errno module": {
		"description": "EREMOTE from the errno module",
		"prefix": "EREMOTE",
		"body": ["EREMOTE"]},
	"EREMOTEIO from the errno module": {
		"description": "EREMOTEIO from the errno module",
		"prefix": "EREMOTEIO",
		"body": ["EREMOTEIO"]},
	"ERESTART from the errno module": {
		"description": "ERESTART from the errno module",
		"prefix": "ERESTART",
		"body": ["ERESTART"]},
	"EROFS from the errno module": {
		"description": "EROFS from the errno module",
		"prefix": "EROFS",
		"body": ["EROFS"]},
	"ESHUTDOWN from the errno module": {
		"description": "ESHUTDOWN from the errno module",
		"prefix": "ESHUTDOWN",
		"body": ["ESHUTDOWN"]},
	"ESOCKTNOSUPPORT from the errno module": {
		"description": "ESOCKTNOSUPPORT from the errno module",
		"prefix": "ESOCKTNOSUPPORT",
		"body": ["ESOCKTNOSUPPORT"]},
	"ESPIPE from the errno module": {
		"description": "ESPIPE from the errno module",
		"prefix": "ESPIPE",
		"body": ["ESPIPE"]},
	"ESRCH from the errno module": {
		"description": "ESRCH from the errno module",
		"prefix": "ESRCH",
		"body": ["ESRCH"]},
	"ESRMNT from the errno module": {
		"description": "ESRMNT from the errno module",
		"prefix": "ESRMNT",
		"body": ["ESRMNT"]},
	"ESTALE from the errno module": {
		"description": "ESTALE from the errno module",
		"prefix": "ESTALE",
		"body": ["ESTALE"]},
	"ESTRPIPE from the errno module": {
		"description": "ESTRPIPE from the errno module",
		"prefix": "ESTRPIPE",
		"body": ["ESTRPIPE"]},
	"ETIME from the errno module": {
		"description": "ETIME from the errno module",
		"prefix": "ETIME",
		"body": ["ETIME"]},
	"ETIMEDOUT from the errno module": {
		"description": "ETIMEDOUT from the errno module",
		"prefix": "ETIMEDOUT",
		"body": ["ETIMEDOUT"]},
	"ETOOMANYREFS from the errno module": {
		"description": "ETOOMANYREFS from the errno module",
		"prefix": "ETOOMANYREFS",
		"body": ["ETOOMANYREFS"]},
	"ETXTBSY from the errno module": {
		"description": "ETXTBSY from the errno module",
		"prefix": "ETXTBSY",
		"body": ["ETXTBSY"]},
	"EUCLEAN from the errno module": {
		"description": "EUCLEAN from the errno module",
		"prefix": "EUCLEAN",
		"body": ["EUCLEAN"]},
	"EUNATCH from the errno module": {
		"description": "EUNATCH from the errno module",
		"prefix": "EUNATCH",
		"body": ["EUNATCH"]},
	"EUSERS from the errno module": {
		"description": "EUSERS from the errno module",
		"prefix": "EUSERS",
		"body": ["EUSERS"]},
	"EWOULDBLOCK from the errno module": {
		"description": "EWOULDBLOCK from the errno module",
		"prefix": "EWOULDBLOCK",
		"body": ["EWOULDBLOCK"]},
	"EXDEV from the errno module": {
		"description": "EXDEV from the errno module",
		"prefix": "EXDEV",
		"body": ["EXDEV"]},
	"EXFULL from the errno module": {
		"description": "EXFULL from the errno module",
		"prefix": "EXFULL",
		"body": ["EXFULL"]},
	"errorcode() from the errno module": {
		"description": "errorcode() from the errno module",
		"prefix": "errorcode",
		"body": ["errorcode()"]},
// faulthandler completion
	"cancel_dump_traceback_later() from the faulthandler module": {
		"description": "cancel_dump_traceback_later() from the faulthandler module",
		"prefix": "cancel_dump_traceback_later",
		"body": ["cancel_dump_traceback_later(${1:})"]},
	"disable() from the faulthandler module": {
		"description": "disable() from the faulthandler module",
		"prefix": "disable",
		"body": ["disable(${1:})"]},
	"dump_traceback() from the faulthandler module": {
		"description": "dump_traceback() from the faulthandler module",
		"prefix": "dump_traceback",
		"body": ["dump_traceback(${1:file=sys.stderr}, ${2:all_threads=True})"]},
	"dump_traceback_later() from the faulthandler module": {
		"description": "dump_traceback_later() from the faulthandler module",
		"prefix": "dump_traceback_later",
		"body": ["dump_traceback_later(${1:timeout}, ${2:repeat=False}, ${3:file=sys.stderr}, ${4:exit=False})"]},
	"enable() from the faulthandler module": {
		"description": "enable() from the faulthandler module",
		"prefix": "enable",
		"body": ["enable(${1:file=sys.stderr}, ${2:all_threads=True})"]},
	"is_enabled() from the faulthandler module": {
		"description": "is_enabled() from the faulthandler module",
		"prefix": "is_enabled",
		"body": ["is_enabled(${1:})"]},
	"register() from the faulthandler module": {
		"description": "register() from the faulthandler module",
		"prefix": "register",
		"body": ["register(${1:signum}, ${2:file=sys.stderr}, ${3:all_threads=True}, ${4:chain=False})"]},
	"unregister() from the faulthandler module": {
		"description": "unregister() from the faulthandler module",
		"prefix": "unregister",
		"body": ["unregister(${1:signum})"]},
// fcntl completion
	"fcntl() from the fcntl module": {
		"description": "fcntl() from the fcntl module",
		"prefix": "fcntl",
		"body": ["fcntl(${1:fd}, ${2:cmd}, ${3:arg=0})"]},
	"flock() from the fcntl module": {
		"description": "flock() from the fcntl module",
		"prefix": "flock",
		"body": ["flock(${1:fd}, ${2:operation})"]},
	"ioctl() from the fcntl module": {
		"description": "ioctl() from the fcntl module",
		"prefix": "ioctl",
		"body": ["ioctl(${1:fd}, ${2:request}, ${3:arg=0}, ${4:mutate_flag=True})"]},
	"lockf() from the fcntl module": {
		"description": "lockf() from the fcntl module",
		"prefix": "lockf",
		"body": ["lockf(${1:fd,})"]},
// filecmp completion
	"DEFAULT_IGNORES from the filecmp module": {
		"description": "DEFAULT_IGNORES from the filecmp module",
		"prefix": "DEFAULT_IGNORES",
		"body": ["DEFAULT_IGNORES"]},
	"clear_cache() from the filecmp module": {
		"description": "clear_cache() from the filecmp module",
		"prefix": "clear_cache",
		"body": ["clear_cache(${1:})"]},
	"cmp() from the filecmp module": {
		"description": "cmp() from the filecmp module",
		"prefix": "cmp",
		"body": ["cmp(${1:f1}, ${2:f2}, ${3:shallow=True})"]},
	"cmpfiles() from the filecmp module": {
		"description": "cmpfiles() from the filecmp module",
		"prefix": "cmpfiles",
		"body": ["cmpfiles(${1:dir1}, ${2:dir2}, ${3:common}, ${4:shallow=True})"]},
	"dircmp() from the filecmp module": {
		"description": "dircmp() from the filecmp module",
		"prefix": "dircmp",
		"body": ["dircmp(${1:a,})"]},
// fileinput completion
	"FileInput from the fileinput module": {
		"description": "FileInput from the fileinput module",
		"prefix": "FileInput",
		"body": ["FileInput(${1:files=None}, ${2:inplace=False}, ${3:backup=''}, ${4:bufsize=0}, ${5:mode='r'}, ${6:openhook=None})"]},
	"close() from the fileinput module": {
		"description": "close() from the fileinput module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"filelineno() from the fileinput module": {
		"description": "filelineno() from the fileinput module",
		"prefix": "filelineno",
		"body": ["filelineno(${1:})"]},
	"filename() from the fileinput module": {
		"description": "filename() from the fileinput module",
		"prefix": "filename",
		"body": ["filename(${1:})"]},
	"fileno() from the fileinput module": {
		"description": "fileno() from the fileinput module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"hook_compressed() from the fileinput module": {
		"description": "hook_compressed() from the fileinput module",
		"prefix": "hook_compressed",
		"body": ["hook_compressed(${1:filename}, ${2:mode})"]},
	"hook_encoded() from the fileinput module": {
		"description": "hook_encoded() from the fileinput module",
		"prefix": "hook_encoded",
		"body": ["hook_encoded(${1:encoding})"]},
	"input() from the fileinput module": {
		"description": "input() from the fileinput module",
		"prefix": "input",
		"body": ["input(${1:files=None}, ${2:inplace=False}, ${3:backup=''}, ${4:bufsize=0}, ${5:mode='r'}, ${6:openhook=None})"]},
	"isfirstline() from the fileinput module": {
		"description": "isfirstline() from the fileinput module",
		"prefix": "isfirstline",
		"body": ["isfirstline(${1:})"]},
	"isstdin() from the fileinput module": {
		"description": "isstdin() from the fileinput module",
		"prefix": "isstdin",
		"body": ["isstdin(${1:})"]},
	"lineno() from the fileinput module": {
		"description": "lineno() from the fileinput module",
		"prefix": "lineno",
		"body": ["lineno(${1:})"]},
	"nextfile() from the fileinput module": {
		"description": "nextfile() from the fileinput module",
		"prefix": "nextfile",
		"body": ["nextfile(${1:})"]},
// fnmatch completion
	"filter() from the fnmatch module": {
		"description": "filter() from the fnmatch module",
		"prefix": "filter",
		"body": ["filter(${1:names}, ${2:pattern})"]},
	"fnmatch() from the fnmatch module": {
		"description": "fnmatch() from the fnmatch module",
		"prefix": "fnmatch",
		"body": ["fnmatch(${1:filename}, ${2:pattern})"]},
	"fnmatchcase() from the fnmatch module": {
		"description": "fnmatchcase() from the fnmatch module",
		"prefix": "fnmatchcase",
		"body": ["fnmatchcase(${1:filename}, ${2:pattern})"]},
	"translate() from the fnmatch module": {
		"description": "translate() from the fnmatch module",
		"prefix": "translate",
		"body": ["translate(${1:pattern})"]},
// formatter completion
	"AS_IS from the formatter module": {
		"description": "AS_IS from the formatter module",
		"prefix": "AS_IS",
		"body": ["AS_IS"]},
	"AbstractFormatter from the formatter module": {
		"description": "AbstractFormatter from the formatter module",
		"prefix": "AbstractFormatter",
		"body": ["AbstractFormatter(${1:writer})"]},
	"AbstractWriter from the formatter module": {
		"description": "AbstractWriter from the formatter module",
		"prefix": "AbstractWriter",
		"body": ["AbstractWriter"]},
	"DumbWriter from the formatter module": {
		"description": "DumbWriter from the formatter module",
		"prefix": "DumbWriter",
		"body": ["DumbWriter(${1:file=None}, ${2:maxcol=72})"]},
	"NullFormatter from the formatter module": {
		"description": "NullFormatter from the formatter module",
		"prefix": "NullFormatter",
		"body": ["NullFormatter(${1:writer=None})"]},
	"NullWriter from the formatter module": {
		"description": "NullWriter from the formatter module",
		"prefix": "NullWriter",
		"body": ["NullWriter"]},
	"add_flowing_data() from the formatter module": {
		"description": "add_flowing_data() from the formatter module",
		"prefix": "add_flowing_data",
		"body": ["add_flowing_data(${1:data})"]},
	"add_hor_rule() from the formatter module": {
		"description": "add_hor_rule() from the formatter module",
		"prefix": "add_hor_rule",
		"body": ["add_hor_rule(${1:*args}, ${2:**kw})"]},
	"add_label_data() from the formatter module": {
		"description": "add_label_data() from the formatter module",
		"prefix": "add_label_data",
		"body": ["add_label_data(${1:format}, ${2:counter})"]},
	"add_line_break() from the formatter module": {
		"description": "add_line_break() from the formatter module",
		"prefix": "add_line_break",
		"body": ["add_line_break(${1:})"]},
	"add_literal_data() from the formatter module": {
		"description": "add_literal_data() from the formatter module",
		"prefix": "add_literal_data",
		"body": ["add_literal_data(${1:data})"]},
	"assert_line_data() from the formatter module": {
		"description": "assert_line_data() from the formatter module",
		"prefix": "assert_line_data",
		"body": ["assert_line_data(${1:flag=1})"]},
	"end_paragraph() from the formatter module": {
		"description": "end_paragraph() from the formatter module",
		"prefix": "end_paragraph",
		"body": ["end_paragraph(${1:blanklines})"]},
	"flush() from the formatter module": {
		"description": "flush() from the formatter module",
		"prefix": "flush",
		"body": ["flush(${1:})"]},
	"flush_softspace() from the formatter module": {
		"description": "flush_softspace() from the formatter module",
		"prefix": "flush_softspace",
		"body": ["flush_softspace(${1:})"]},
	"new_alignment() from the formatter module": {
		"description": "new_alignment() from the formatter module",
		"prefix": "new_alignment",
		"body": ["new_alignment(${1:align})"]},
	"new_font() from the formatter module": {
		"description": "new_font() from the formatter module",
		"prefix": "new_font",
		"body": ["new_font(${1:font})"]},
	"new_margin() from the formatter module": {
		"description": "new_margin() from the formatter module",
		"prefix": "new_margin",
		"body": ["new_margin(${1:margin}, ${2:level})"]},
	"new_spacing() from the formatter module": {
		"description": "new_spacing() from the formatter module",
		"prefix": "new_spacing",
		"body": ["new_spacing(${1:spacing})"]},
	"new_styles() from the formatter module": {
		"description": "new_styles() from the formatter module",
		"prefix": "new_styles",
		"body": ["new_styles(${1:styles})"]},
	"pop_alignment() from the formatter module": {
		"description": "pop_alignment() from the formatter module",
		"prefix": "pop_alignment",
		"body": ["pop_alignment(${1:})"]},
	"pop_font() from the formatter module": {
		"description": "pop_font() from the formatter module",
		"prefix": "pop_font",
		"body": ["pop_font(${1:})"]},
	"pop_margin() from the formatter module": {
		"description": "pop_margin() from the formatter module",
		"prefix": "pop_margin",
		"body": ["pop_margin(${1:})"]},
	"pop_style() from the formatter module": {
		"description": "pop_style() from the formatter module",
		"prefix": "pop_style",
		"body": ["pop_style(${1:n=1})"]},
	"push_alignment() from the formatter module": {
		"description": "push_alignment() from the formatter module",
		"prefix": "push_alignment",
		"body": ["push_alignment(${1:align})"]},
	"push_font() from the formatter module": {
		"description": "push_font() from the formatter module",
		"prefix": "push_font",
		"body": ["push_font(${1:}, ${2:size}, ${3:italic}, ${4:bold}, ${5:teletype})"]},
	"push_margin() from the formatter module": {
		"description": "push_margin() from the formatter module",
		"prefix": "push_margin",
		"body": ["push_margin(${1:margin})"]},
	"push_style() from the formatter module": {
		"description": "push_style() from the formatter module",
		"prefix": "push_style",
		"body": ["push_style(${1:*styles})"]},
	"send_flowing_data() from the formatter module": {
		"description": "send_flowing_data() from the formatter module",
		"prefix": "send_flowing_data",
		"body": ["send_flowing_data(${1:data})"]},
	"send_hor_rule() from the formatter module": {
		"description": "send_hor_rule() from the formatter module",
		"prefix": "send_hor_rule",
		"body": ["send_hor_rule(${1:*args}, ${2:**kw})"]},
	"send_label_data() from the formatter module": {
		"description": "send_label_data() from the formatter module",
		"prefix": "send_label_data",
		"body": ["send_label_data(${1:data})"]},
	"send_line_break() from the formatter module": {
		"description": "send_line_break() from the formatter module",
		"prefix": "send_line_break",
		"body": ["send_line_break(${1:})"]},
	"send_literal_data() from the formatter module": {
		"description": "send_literal_data() from the formatter module",
		"prefix": "send_literal_data",
		"body": ["send_literal_data(${1:data})"]},
	"send_paragraph() from the formatter module": {
		"description": "send_paragraph() from the formatter module",
		"prefix": "send_paragraph",
		"body": ["send_paragraph(${1:blankline})"]},
	"set_spacing() from the formatter module": {
		"description": "set_spacing() from the formatter module",
		"prefix": "set_spacing",
		"body": ["set_spacing(${1:spacing})"]},
	"writer() from the formatter module": {
		"description": "writer() from the formatter module",
		"prefix": "writer",
		"body": ["writer()"]},
// fpectl completion
	"FloatingPointError from the fpectl module": {
		"description": "FloatingPointError from the fpectl module",
		"prefix": "FloatingPointError",
		"body": ["FloatingPointError"]},
	"turnoff_sigfpe() from the fpectl module": {
		"description": "turnoff_sigfpe() from the fpectl module",
		"prefix": "turnoff_sigfpe",
		"body": ["turnoff_sigfpe(${1:})"]},
	"turnon_sigfpe() from the fpectl module": {
		"description": "turnon_sigfpe() from the fpectl module",
		"prefix": "turnon_sigfpe",
		"body": ["turnon_sigfpe(${1:})"]},
// fractions completion
	"Fraction from the fractions module": {
		"description": "Fraction from the fractions module",
		"prefix": "Fraction",
		"body": ["Fraction(${1:numerator=0}, ${2:denominator=1})"]},
	"Fraction from the fractions module": {
		"description": "Fraction from the fractions module",
		"prefix": "Fraction",
		"body": ["Fraction(${1:other_fraction})"]},
	"gcd() from the fractions module": {
		"description": "gcd() from the fractions module",
		"prefix": "gcd",
		"body": ["gcd(${1:a,})"]},
// ftplib completion
	"FTP from the ftplib module": {
		"description": "FTP from the ftplib module",
		"prefix": "FTP",
		"body": ["FTP(${1:host=''}, ${2:user=''}, ${3:passwd=''}, ${4:acct=''}, ${5:timeout=None}, ${6:source_address=None})"]},
	"FTP_TLS from the ftplib module": {
		"description": "FTP_TLS from the ftplib module",
		"prefix": "FTP_TLS",
		"body": ["FTP_TLS(${1:host=''}, ${2:user=''}, ${3:passwd=''}, ${4:acct=''}, ${5:keyfile=None}, ${6:certfile=None}, ${7:context=None}, ${8:timeout=None}, ${9:source_address=None})"]},
	"abort() from the ftplib module": {
		"description": "abort() from the ftplib module",
		"prefix": "abort",
		"body": ["abort(${1:})"]},
	"all_errors() from the ftplib module": {
		"description": "all_errors() from the ftplib module",
		"prefix": "all_errors",
		"body": ["all_errors()"]},
	"auth() from the ftplib module": {
		"description": "auth() from the ftplib module",
		"prefix": "auth",
		"body": ["auth(${1:})"]},
	"ccc() from the ftplib module": {
		"description": "ccc() from the ftplib module",
		"prefix": "ccc",
		"body": ["ccc(${1:})"]},
	"close() from the ftplib module": {
		"description": "close() from the ftplib module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"connect() from the ftplib module": {
		"description": "connect() from the ftplib module",
		"prefix": "connect",
		"body": ["connect(${1:host=''}, ${2:port=0}, ${3:timeout=None}, ${4:source_address=None})"]},
	"cwd() from the ftplib module": {
		"description": "cwd() from the ftplib module",
		"prefix": "cwd",
		"body": ["cwd(${1:pathname})"]},
	"delete() from the ftplib module": {
		"description": "delete() from the ftplib module",
		"prefix": "delete",
		"body": ["delete(${1:filename})"]},
	"dir() from the ftplib module": {
		"description": "dir() from the ftplib module",
		"prefix": "dir",
		"body": ["dir(${1:argument[}, ${2:...]})"]},
	"error_perm() from the ftplib module": {
		"description": "error_perm() from the ftplib module",
		"prefix": "error_perm",
		"body": ["error_perm()"]},
	"error_proto() from the ftplib module": {
		"description": "error_proto() from the ftplib module",
		"prefix": "error_proto",
		"body": ["error_proto()"]},
	"error_reply() from the ftplib module": {
		"description": "error_reply() from the ftplib module",
		"prefix": "error_reply",
		"body": ["error_reply()"]},
	"error_temp() from the ftplib module": {
		"description": "error_temp() from the ftplib module",
		"prefix": "error_temp",
		"body": ["error_temp()"]},
	"getwelcome() from the ftplib module": {
		"description": "getwelcome() from the ftplib module",
		"prefix": "getwelcome",
		"body": ["getwelcome(${1:})"]},
	"login() from the ftplib module": {
		"description": "login() from the ftplib module",
		"prefix": "login",
		"body": ["login(${1:user='anonymous'}, ${2:passwd=''}, ${3:acct=''})"]},
	"mkd() from the ftplib module": {
		"description": "mkd() from the ftplib module",
		"prefix": "mkd",
		"body": ["mkd(${1:pathname})"]},
	"mlsd() from the ftplib module": {
		"description": "mlsd() from the ftplib module",
		"prefix": "mlsd",
		"body": ["mlsd(${1:path=\"\"}, ${2:facts=[]})"]},
	"nlst() from the ftplib module": {
		"description": "nlst() from the ftplib module",
		"prefix": "nlst",
		"body": ["nlst(${1:argument[}, ${2:...]})"]},
	"ntransfercmd() from the ftplib module": {
		"description": "ntransfercmd() from the ftplib module",
		"prefix": "ntransfercmd",
		"body": ["ntransfercmd(${1:cmd}, ${2:rest=None})"]},
	"prot_c() from the ftplib module": {
		"description": "prot_c() from the ftplib module",
		"prefix": "prot_c",
		"body": ["prot_c(${1:})"]},
	"prot_p() from the ftplib module": {
		"description": "prot_p() from the ftplib module",
		"prefix": "prot_p",
		"body": ["prot_p(${1:})"]},
	"pwd() from the ftplib module": {
		"description": "pwd() from the ftplib module",
		"prefix": "pwd",
		"body": ["pwd(${1:})"]},
	"quit() from the ftplib module": {
		"description": "quit() from the ftplib module",
		"prefix": "quit",
		"body": ["quit(${1:})"]},
	"rename() from the ftplib module": {
		"description": "rename() from the ftplib module",
		"prefix": "rename",
		"body": ["rename(${1:fromname}, ${2:toname})"]},
	"retrbinary() from the ftplib module": {
		"description": "retrbinary() from the ftplib module",
		"prefix": "retrbinary",
		"body": ["retrbinary(${1:cmd}, ${2:callback}, ${3:blocksize=8192}, ${4:rest=None})"]},
	"retrlines() from the ftplib module": {
		"description": "retrlines() from the ftplib module",
		"prefix": "retrlines",
		"body": ["retrlines(${1:cmd}, ${2:callback=None})"]},
	"rmd() from the ftplib module": {
		"description": "rmd() from the ftplib module",
		"prefix": "rmd",
		"body": ["rmd(${1:dirname})"]},
	"sendcmd() from the ftplib module": {
		"description": "sendcmd() from the ftplib module",
		"prefix": "sendcmd",
		"body": ["sendcmd(${1:cmd})"]},
	"set_debuglevel() from the ftplib module": {
		"description": "set_debuglevel() from the ftplib module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:level})"]},
	"set_pasv() from the ftplib module": {
		"description": "set_pasv() from the ftplib module",
		"prefix": "set_pasv",
		"body": ["set_pasv(${1:boolean})"]},
	"size() from the ftplib module": {
		"description": "size() from the ftplib module",
		"prefix": "size",
		"body": ["size(${1:filename})"]},
	"ssl_version() from the ftplib module": {
		"description": "ssl_version() from the ftplib module",
		"prefix": "ssl_version",
		"body": ["ssl_version()"]},
	"storbinary() from the ftplib module": {
		"description": "storbinary() from the ftplib module",
		"prefix": "storbinary",
		"body": ["storbinary(${1:cmd}, ${2:fp}, ${3:blocksize=8192}, ${4:callback=None}, ${5:rest=None})"]},
	"storlines() from the ftplib module": {
		"description": "storlines() from the ftplib module",
		"prefix": "storlines",
		"body": ["storlines(${1:cmd}, ${2:fp}, ${3:callback=None})"]},
	"transfercmd() from the ftplib module": {
		"description": "transfercmd() from the ftplib module",
		"prefix": "transfercmd",
		"body": ["transfercmd(${1:cmd}, ${2:rest=None})"]},
	"voidcmd() from the ftplib module": {
		"description": "voidcmd() from the ftplib module",
		"prefix": "voidcmd",
		"body": ["voidcmd(${1:cmd})"]},
// functools completion
	"args() from the functools module": {
		"description": "args() from the functools module",
		"prefix": "args",
		"body": ["args()"]},
	"cmp_to_key() from the functools module": {
		"description": "cmp_to_key() from the functools module",
		"prefix": "cmp_to_key",
		"body": ["cmp_to_key(${1:func})"]},
	"func() from the functools module": {
		"description": "func() from the functools module",
		"prefix": "func",
		"body": ["func()"]},
	"keywords() from the functools module": {
		"description": "keywords() from the functools module",
		"prefix": "keywords",
		"body": ["keywords()"]},
	"lru_cache() from the functools module": {
		"description": "lru_cache() from the functools module",
		"prefix": "lru_cache",
		"body": ["lru_cache(${1:maxsize=128}, ${2:typed=False})"]},
	"partial() from the functools module": {
		"description": "partial() from the functools module",
		"prefix": "partial",
		"body": ["partial(${1:func}, ${2:*args}, ${3:**keywords})"]},
	"partialmethod() from the functools module": {
		"description": "partialmethod() from the functools module",
		"prefix": "partialmethod",
		"body": ["partialmethod(${1:func}, ${2:*args}, ${3:**keywords})"]},
	"reduce() from the functools module": {
		"description": "reduce() from the functools module",
		"prefix": "reduce",
		"body": ["reduce(${1:function}, ${2:iterable[}, ${3:initializer]})"]},
	"singledispatch() from the functools module": {
		"description": "singledispatch() from the functools module",
		"prefix": "singledispatch",
		"body": ["singledispatch(${1:default})"]},
	"total_ordering() from the functools module": {
		"description": "total_ordering() from the functools module",
		"prefix": "total_ordering",
		"body": ["total_ordering()"]},
	"update_wrapper() from the functools module": {
		"description": "update_wrapper() from the functools module",
		"prefix": "update_wrapper",
		"body": ["update_wrapper(${1:wrapper}, ${2:wrapped}, ${3:assigned=WRAPPER_ASSIGNMENTS}, ${4:updated=WRAPPER_UPDATES})"]},
	"wraps() from the functools module": {
		"description": "wraps() from the functools module",
		"prefix": "wraps",
		"body": ["wraps(${1:wrapped,})"]},
// gc completion
	"DEBUG_COLLECTABLE from the gc module": {
		"description": "DEBUG_COLLECTABLE from the gc module",
		"prefix": "DEBUG_COLLECTABLE",
		"body": ["DEBUG_COLLECTABLE"]},
	"DEBUG_LEAK from the gc module": {
		"description": "DEBUG_LEAK from the gc module",
		"prefix": "DEBUG_LEAK",
		"body": ["DEBUG_LEAK"]},
	"DEBUG_SAVEALL from the gc module": {
		"description": "DEBUG_SAVEALL from the gc module",
		"prefix": "DEBUG_SAVEALL",
		"body": ["DEBUG_SAVEALL"]},
	"DEBUG_STATS from the gc module": {
		"description": "DEBUG_STATS from the gc module",
		"prefix": "DEBUG_STATS",
		"body": ["DEBUG_STATS"]},
	"DEBUG_UNCOLLECTABLE from the gc module": {
		"description": "DEBUG_UNCOLLECTABLE from the gc module",
		"prefix": "DEBUG_UNCOLLECTABLE",
		"body": ["DEBUG_UNCOLLECTABLE"]},
	"callbacks() from the gc module": {
		"description": "callbacks() from the gc module",
		"prefix": "callbacks",
		"body": ["callbacks()"]},
	"collect() from the gc module": {
		"description": "collect() from the gc module",
		"prefix": "collect",
		"body": ["collect(${1:generations=2})"]},
	"disable() from the gc module": {
		"description": "disable() from the gc module",
		"prefix": "disable",
		"body": ["disable(${1:})"]},
	"enable() from the gc module": {
		"description": "enable() from the gc module",
		"prefix": "enable",
		"body": ["enable(${1:})"]},
	"garbage() from the gc module": {
		"description": "garbage() from the gc module",
		"prefix": "garbage",
		"body": ["garbage()"]},
	"get_count() from the gc module": {
		"description": "get_count() from the gc module",
		"prefix": "get_count",
		"body": ["get_count(${1:})"]},
	"get_debug() from the gc module": {
		"description": "get_debug() from the gc module",
		"prefix": "get_debug",
		"body": ["get_debug(${1:})"]},
	"get_objects() from the gc module": {
		"description": "get_objects() from the gc module",
		"prefix": "get_objects",
		"body": ["get_objects(${1:})"]},
	"get_referents() from the gc module": {
		"description": "get_referents() from the gc module",
		"prefix": "get_referents",
		"body": ["get_referents(${1:*objs})"]},
	"get_referrers() from the gc module": {
		"description": "get_referrers() from the gc module",
		"prefix": "get_referrers",
		"body": ["get_referrers(${1:*objs})"]},
	"get_stats() from the gc module": {
		"description": "get_stats() from the gc module",
		"prefix": "get_stats",
		"body": ["get_stats(${1:})"]},
	"get_threshold() from the gc module": {
		"description": "get_threshold() from the gc module",
		"prefix": "get_threshold",
		"body": ["get_threshold(${1:})"]},
	"is_tracked() from the gc module": {
		"description": "is_tracked() from the gc module",
		"prefix": "is_tracked",
		"body": ["is_tracked(${1:obj})"]},
	"isenabled() from the gc module": {
		"description": "isenabled() from the gc module",
		"prefix": "isenabled",
		"body": ["isenabled(${1:})"]},
	"set_debug() from the gc module": {
		"description": "set_debug() from the gc module",
		"prefix": "set_debug",
		"body": ["set_debug(${1:flags})"]},
	"set_threshold() from the gc module": {
		"description": "set_threshold() from the gc module",
		"prefix": "set_threshold",
		"body": ["set_threshold(${1:threshold0[,})"]},
// getopt completion
	"GetoptError from the getopt module": {
		"description": "GetoptError from the getopt module",
		"prefix": "GetoptError",
		"body": ["GetoptError"]},
	"error() from the getopt module": {
		"description": "error() from the getopt module",
		"prefix": "error",
		"body": ["error()"]},
	"getopt() from the getopt module": {
		"description": "getopt() from the getopt module",
		"prefix": "getopt",
		"body": ["getopt(${1:args}, ${2:shortopts}, ${3:longopts=[]})"]},
	"gnu_getopt() from the getopt module": {
		"description": "gnu_getopt() from the getopt module",
		"prefix": "gnu_getopt",
		"body": ["gnu_getopt(${1:args,})"]},
// getpass completion
	"GetPassWarning from the getpass module": {
		"description": "GetPassWarning from the getpass module",
		"prefix": "GetPassWarning",
		"body": ["GetPassWarning"]},
	"getpass() from the getpass module": {
		"description": "getpass() from the getpass module",
		"prefix": "getpass",
		"body": ["getpass(${1:prompt='Password: '}, ${2:stream=None})"]},
	"getuser() from the getpass module": {
		"description": "getuser() from the getpass module",
		"prefix": "getuser",
		"body": ["getuser(${1:})"]},
// gettext completion
	"NullTranslations from the gettext module": {
		"description": "NullTranslations from the gettext module",
		"prefix": "NullTranslations",
		"body": ["NullTranslations(${1:fp=None})"]},
	"bind_textdomain_codeset() from the gettext module": {
		"description": "bind_textdomain_codeset() from the gettext module",
		"prefix": "bind_textdomain_codeset",
		"body": ["bind_textdomain_codeset(${1:domain}, ${2:codeset=None})"]},
	"bindtextdomain() from the gettext module": {
		"description": "bindtextdomain() from the gettext module",
		"prefix": "bindtextdomain",
		"body": ["bindtextdomain(${1:domain}, ${2:localedir=None})"]},
	"dgettext() from the gettext module": {
		"description": "dgettext() from the gettext module",
		"prefix": "dgettext",
		"body": ["dgettext(${1:domain}, ${2:message})"]},
	"dngettext() from the gettext module": {
		"description": "dngettext() from the gettext module",
		"prefix": "dngettext",
		"body": ["dngettext(${1:domain}, ${2:singular}, ${3:plural}, ${4:n})"]},
	"find() from the gettext module": {
		"description": "find() from the gettext module",
		"prefix": "find",
		"body": ["find(${1:domain}, ${2:localedir=None}, ${3:languages=None}, ${4:all=False})"]},
	"gettext() from the gettext module": {
		"description": "gettext() from the gettext module",
		"prefix": "gettext",
		"body": ["gettext(${1:message})"]},
	"install() from the gettext module": {
		"description": "install() from the gettext module",
		"prefix": "install",
		"body": ["install(${1:domain}, ${2:localedir=None}, ${3:codeset=None}, ${4:names=None})"]},
	"ldgettext() from the gettext module": {
		"description": "ldgettext() from the gettext module",
		"prefix": "ldgettext",
		"body": ["ldgettext(${1:domain}, ${2:message})"]},
	"ldngettext() from the gettext module": {
		"description": "ldngettext() from the gettext module",
		"prefix": "ldngettext",
		"body": ["ldngettext(${1:domain}, ${2:singular}, ${3:plural}, ${4:n})"]},
	"lgettext() from the gettext module": {
		"description": "lgettext() from the gettext module",
		"prefix": "lgettext",
		"body": ["lgettext(${1:message})"]},
	"lngettext() from the gettext module": {
		"description": "lngettext() from the gettext module",
		"prefix": "lngettext",
		"body": ["lngettext(${1:singular}, ${2:plural}, ${3:n})"]},
	"ngettext() from the gettext module": {
		"description": "ngettext() from the gettext module",
		"prefix": "ngettext",
		"body": ["ngettext(${1:singular}, ${2:plural}, ${3:n})"]},
	"textdomain() from the gettext module": {
		"description": "textdomain() from the gettext module",
		"prefix": "textdomain",
		"body": ["textdomain(${1:domain=None})"]},
	"translation() from the gettext module": {
		"description": "translation() from the gettext module",
		"prefix": "translation",
		"body": ["translation(${1:domain,})"]},
// glob completion
	"escape() from the glob module": {
		"description": "escape() from the glob module",
		"prefix": "escape",
		"body": ["escape(${1:pathname})"]},
	"glob() from the glob module": {
		"description": "glob() from the glob module",
		"prefix": "glob",
		"body": ["glob(${1:pathname}, ${2:*}, ${3:recursive=False})"]},
	"iglob() from the glob module": {
		"description": "iglob() from the glob module",
		"prefix": "iglob",
		"body": ["iglob(${1:pathname,})"]},
// grp completion
	"getgrall() from the grp module": {
		"description": "getgrall() from the grp module",
		"prefix": "getgrall",
		"body": ["getgrall(${1:})"]},
	"getgrgid() from the grp module": {
		"description": "getgrgid() from the grp module",
		"prefix": "getgrgid",
		"body": ["getgrgid(${1:gid})"]},
	"getgrnam() from the grp module": {
		"description": "getgrnam() from the grp module",
		"prefix": "getgrnam",
		"body": ["getgrnam(${1:name})"]},
// gzip completion
	"GzipFile from the gzip module": {
		"description": "GzipFile from the gzip module",
		"prefix": "GzipFile",
		"body": ["GzipFile(${1:filename=None}, ${2:mode=None}, ${3:compresslevel=9}, ${4:fileobj=None}, ${5:mtime=None})"]},
	"compress() from the gzip module": {
		"description": "compress() from the gzip module",
		"prefix": "compress",
		"body": ["compress(${1:data}, ${2:compresslevel=9})"]},
	"decompress() from the gzip module": {
		"description": "decompress() from the gzip module",
		"prefix": "decompress",
		"body": ["decompress(${1:data})"]},
	"open() from the gzip module": {
		"description": "open() from the gzip module",
		"prefix": "open",
		"body": ["open(${1:filename,})"]},
// hashlib completion
	"algorithms_available() from the hashlib module": {
		"description": "algorithms_available() from the hashlib module",
		"prefix": "algorithms_available",
		"body": ["algorithms_available()"]},
	"algorithms_guaranteed() from the hashlib module": {
		"description": "algorithms_guaranteed() from the hashlib module",
		"prefix": "algorithms_guaranteed",
		"body": ["algorithms_guaranteed()"]},
	"block_size() from the hashlib module": {
		"description": "block_size() from the hashlib module",
		"prefix": "block_size",
		"body": ["block_size()"]},
	"copy() from the hashlib module": {
		"description": "copy() from the hashlib module",
		"prefix": "copy",
		"body": ["copy(${1:})"]},
	"digest() from the hashlib module": {
		"description": "digest() from the hashlib module",
		"prefix": "digest",
		"body": ["digest(${1:})"]},
	"digest_size() from the hashlib module": {
		"description": "digest_size() from the hashlib module",
		"prefix": "digest_size",
		"body": ["digest_size()"]},
	"hexdigest() from the hashlib module": {
		"description": "hexdigest() from the hashlib module",
		"prefix": "hexdigest",
		"body": ["hexdigest(${1:})"]},
	"name() from the hashlib module": {
		"description": "name() from the hashlib module",
		"prefix": "name",
		"body": ["name()"]},
	"new() from the hashlib module": {
		"description": "new() from the hashlib module",
		"prefix": "new",
		"body": ["new(${1:name[}, ${2:data]})"]},
	"pbkdf2_hmac() from the hashlib module": {
		"description": "pbkdf2_hmac() from the hashlib module",
		"prefix": "pbkdf2_hmac",
		"body": ["pbkdf2_hmac(${1:name}, ${2:password}, ${3:salt}, ${4:rounds}, ${5:dklen=None})"]},
	"update() from the hashlib module": {
		"description": "update() from the hashlib module",
		"prefix": "update",
		"body": ["update(${1:arg})"]},
// heapq completion
	"heapify() from the heapq module": {
		"description": "heapify() from the heapq module",
		"prefix": "heapify",
		"body": ["heapify(${1:x})"]},
	"heappop() from the heapq module": {
		"description": "heappop() from the heapq module",
		"prefix": "heappop",
		"body": ["heappop(${1:heap})"]},
	"heappush() from the heapq module": {
		"description": "heappush() from the heapq module",
		"prefix": "heappush",
		"body": ["heappush(${1:heap}, ${2:item})"]},
	"heappushpop() from the heapq module": {
		"description": "heappushpop() from the heapq module",
		"prefix": "heappushpop",
		"body": ["heappushpop(${1:heap}, ${2:item})"]},
	"heapreplace() from the heapq module": {
		"description": "heapreplace() from the heapq module",
		"prefix": "heapreplace",
		"body": ["heapreplace(${1:heap}, ${2:item})"]},
	"merge() from the heapq module": {
		"description": "merge() from the heapq module",
		"prefix": "merge",
		"body": ["merge(${1:*iterables}, ${2:key=None}, ${3:reverse=False})"]},
	"nlargest() from the heapq module": {
		"description": "nlargest() from the heapq module",
		"prefix": "nlargest",
		"body": ["nlargest(${1:n}, ${2:iterable}, ${3:key=None})"]},
	"nsmallest() from the heapq module": {
		"description": "nsmallest() from the heapq module",
		"prefix": "nsmallest",
		"body": ["nsmallest(${1:n,})"]},
// hmac completion
	"block_size() from the hmac module": {
		"description": "block_size() from the hmac module",
		"prefix": "block_size",
		"body": ["block_size()"]},
	"compare_digest() from the hmac module": {
		"description": "compare_digest() from the hmac module",
		"prefix": "compare_digest",
		"body": ["compare_digest(${1:a}, ${2:b})"]},
	"copy() from the hmac module": {
		"description": "copy() from the hmac module",
		"prefix": "copy",
		"body": ["copy(${1:})"]},
	"digest() from the hmac module": {
		"description": "digest() from the hmac module",
		"prefix": "digest",
		"body": ["digest(${1:})"]},
	"digest_size() from the hmac module": {
		"description": "digest_size() from the hmac module",
		"prefix": "digest_size",
		"body": ["digest_size()"]},
	"hexdigest() from the hmac module": {
		"description": "hexdigest() from the hmac module",
		"prefix": "hexdigest",
		"body": ["hexdigest(${1:})"]},
	"name() from the hmac module": {
		"description": "name() from the hmac module",
		"prefix": "name",
		"body": ["name()"]},
	"new() from the hmac module": {
		"description": "new() from the hmac module",
		"prefix": "new",
		"body": ["new(${1:key}, ${2:msg=None}, ${3:digestmod=None})"]},
	"update() from the hmac module": {
		"description": "update() from the hmac module",
		"prefix": "update",
		"body": ["update(${1:msg})"]},
// html completion
	"escape() from the html module": {
		"description": "escape() from the html module",
		"prefix": "escape",
		"body": ["escape(${1:s}, ${2:quote=True})"]},
	"unescape() from the html module": {
		"description": "unescape() from the html module",
		"prefix": "unescape",
		"body": ["unescape(${1:s})"]},
// html.entities completion
	"codepoint2name() from the html.entities module": {
		"description": "codepoint2name() from the html.entities module",
		"prefix": "codepoint2name",
		"body": ["codepoint2name()"]},
	"entitydefs() from the html.entities module": {
		"description": "entitydefs() from the html.entities module",
		"prefix": "entitydefs",
		"body": ["entitydefs()"]},
	"html5() from the html.entities module": {
		"description": "html5() from the html.entities module",
		"prefix": "html5",
		"body": ["html5()"]},
	"name2codepoint() from the html.entities module": {
		"description": "name2codepoint() from the html.entities module",
		"prefix": "name2codepoint",
		"body": ["name2codepoint()"]},
// html.parser completion
	"HTMLParser from the html.parser module": {
		"description": "HTMLParser from the html.parser module",
		"prefix": "HTMLParser",
		"body": ["HTMLParser(${1:*}, ${2:convert_charrefs=True})"]},
	"close() from the html.parser module": {
		"description": "close() from the html.parser module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"feed() from the html.parser module": {
		"description": "feed() from the html.parser module",
		"prefix": "feed",
		"body": ["feed(${1:data})"]},
	"get_starttag_text() from the html.parser module": {
		"description": "get_starttag_text() from the html.parser module",
		"prefix": "get_starttag_text",
		"body": ["get_starttag_text(${1:})"]},
	"getpos() from the html.parser module": {
		"description": "getpos() from the html.parser module",
		"prefix": "getpos",
		"body": ["getpos(${1:})"]},
	"handle_charref() from the html.parser module": {
		"description": "handle_charref() from the html.parser module",
		"prefix": "handle_charref",
		"body": ["handle_charref(${1:name})"]},
	"handle_comment() from the html.parser module": {
		"description": "handle_comment() from the html.parser module",
		"prefix": "handle_comment",
		"body": ["handle_comment(${1:data})"]},
	"handle_data() from the html.parser module": {
		"description": "handle_data() from the html.parser module",
		"prefix": "handle_data",
		"body": ["handle_data(${1:data})"]},
	"handle_decl() from the html.parser module": {
		"description": "handle_decl() from the html.parser module",
		"prefix": "handle_decl",
		"body": ["handle_decl(${1:decl})"]},
	"handle_endtag() from the html.parser module": {
		"description": "handle_endtag() from the html.parser module",
		"prefix": "handle_endtag",
		"body": ["handle_endtag(${1:tag})"]},
	"handle_entityref() from the html.parser module": {
		"description": "handle_entityref() from the html.parser module",
		"prefix": "handle_entityref",
		"body": ["handle_entityref(${1:name})"]},
	"handle_pi() from the html.parser module": {
		"description": "handle_pi() from the html.parser module",
		"prefix": "handle_pi",
		"body": ["handle_pi(${1:data})"]},
	"handle_startendtag() from the html.parser module": {
		"description": "handle_startendtag() from the html.parser module",
		"prefix": "handle_startendtag",
		"body": ["handle_startendtag(${1:tag}, ${2:attrs})"]},
	"handle_starttag() from the html.parser module": {
		"description": "handle_starttag() from the html.parser module",
		"prefix": "handle_starttag",
		"body": ["handle_starttag(${1:tag}, ${2:attrs})"]},
	"reset() from the html.parser module": {
		"description": "reset() from the html.parser module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"unknown_decl() from the html.parser module": {
		"description": "unknown_decl() from the html.parser module",
		"prefix": "unknown_decl",
		"body": ["unknown_decl(${1:data})"]},
// http completion
	"HTTPStatus from the http module": {
		"description": "HTTPStatus from the http module",
		"prefix": "HTTPStatus",
		"body": ["HTTPStatus"]},
// http.client completion
	"BadStatusLine from the http.client module": {
		"description": "BadStatusLine from the http.client module",
		"prefix": "BadStatusLine",
		"body": ["BadStatusLine"]},
	"CannotSendHeader from the http.client module": {
		"description": "CannotSendHeader from the http.client module",
		"prefix": "CannotSendHeader",
		"body": ["CannotSendHeader"]},
	"CannotSendRequest from the http.client module": {
		"description": "CannotSendRequest from the http.client module",
		"prefix": "CannotSendRequest",
		"body": ["CannotSendRequest"]},
	"HTTPConnection from the http.client module": {
		"description": "HTTPConnection from the http.client module",
		"prefix": "HTTPConnection",
		"body": ["HTTPConnection(${1:host}, ${2:port=None}, ${3:[timeout}, ${4:]source_address=None})"]},
	"HTTPException from the http.client module": {
		"description": "HTTPException from the http.client module",
		"prefix": "HTTPException",
		"body": ["HTTPException"]},
	"HTTPResponse from the http.client module": {
		"description": "HTTPResponse from the http.client module",
		"prefix": "HTTPResponse",
		"body": ["HTTPResponse(${1:sock}, ${2:debuglevel=0}, ${3:method=None}, ${4:url=None})"]},
	"HTTPSConnection from the http.client module": {
		"description": "HTTPSConnection from the http.client module",
		"prefix": "HTTPSConnection",
		"body": ["HTTPSConnection(${1:host}, ${2:port=None}, ${3:key_file=None}, ${4:cert_file=None}, ${5:[timeout}, ${6:]source_address=None}, ${7:*}, ${8:context=None}, ${9:check_hostname=None})"]},
	"HTTPS_PORT from the http.client module": {
		"description": "HTTPS_PORT from the http.client module",
		"prefix": "HTTPS_PORT",
		"body": ["HTTPS_PORT"]},
	"HTTP_PORT from the http.client module": {
		"description": "HTTP_PORT from the http.client module",
		"prefix": "HTTP_PORT",
		"body": ["HTTP_PORT"]},
	"ImproperConnectionState from the http.client module": {
		"description": "ImproperConnectionState from the http.client module",
		"prefix": "ImproperConnectionState",
		"body": ["ImproperConnectionState"]},
	"IncompleteRead from the http.client module": {
		"description": "IncompleteRead from the http.client module",
		"prefix": "IncompleteRead",
		"body": ["IncompleteRead"]},
	"InvalidURL from the http.client module": {
		"description": "InvalidURL from the http.client module",
		"prefix": "InvalidURL",
		"body": ["InvalidURL"]},
	"LineTooLong from the http.client module": {
		"description": "LineTooLong from the http.client module",
		"prefix": "LineTooLong",
		"body": ["LineTooLong"]},
	"NotConnected from the http.client module": {
		"description": "NotConnected from the http.client module",
		"prefix": "NotConnected",
		"body": ["NotConnected"]},
	"RemoteDisconnected from the http.client module": {
		"description": "RemoteDisconnected from the http.client module",
		"prefix": "RemoteDisconnected",
		"body": ["RemoteDisconnected"]},
	"ResponseNotReady from the http.client module": {
		"description": "ResponseNotReady from the http.client module",
		"prefix": "ResponseNotReady",
		"body": ["ResponseNotReady"]},
	"UnimplementedFileMode from the http.client module": {
		"description": "UnimplementedFileMode from the http.client module",
		"prefix": "UnimplementedFileMode",
		"body": ["UnimplementedFileMode"]},
	"UnknownProtocol from the http.client module": {
		"description": "UnknownProtocol from the http.client module",
		"prefix": "UnknownProtocol",
		"body": ["UnknownProtocol"]},
	"UnknownTransferEncoding from the http.client module": {
		"description": "UnknownTransferEncoding from the http.client module",
		"prefix": "UnknownTransferEncoding",
		"body": ["UnknownTransferEncoding"]},
	"close() from the http.client module": {
		"description": "close() from the http.client module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"closed() from the http.client module": {
		"description": "closed() from the http.client module",
		"prefix": "closed",
		"body": ["closed()"]},
	"connect() from the http.client module": {
		"description": "connect() from the http.client module",
		"prefix": "connect",
		"body": ["connect(${1:})"]},
	"debuglevel() from the http.client module": {
		"description": "debuglevel() from the http.client module",
		"prefix": "debuglevel",
		"body": ["debuglevel()"]},
	"endheaders() from the http.client module": {
		"description": "endheaders() from the http.client module",
		"prefix": "endheaders",
		"body": ["endheaders(${1:message_body=None})"]},
	"fileno() from the http.client module": {
		"description": "fileno() from the http.client module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"getheader() from the http.client module": {
		"description": "getheader() from the http.client module",
		"prefix": "getheader",
		"body": ["getheader(${1:name}, ${2:default=None})"]},
	"getheaders() from the http.client module": {
		"description": "getheaders() from the http.client module",
		"prefix": "getheaders",
		"body": ["getheaders(${1:})"]},
	"getresponse() from the http.client module": {
		"description": "getresponse() from the http.client module",
		"prefix": "getresponse",
		"body": ["getresponse(${1:})"]},
	"msg() from the http.client module": {
		"description": "msg() from the http.client module",
		"prefix": "msg",
		"body": ["msg()"]},
	"putheader() from the http.client module": {
		"description": "putheader() from the http.client module",
		"prefix": "putheader",
		"body": ["putheader(${1:header}, ${2:argument[}, ${3:...]})"]},
	"putrequest() from the http.client module": {
		"description": "putrequest() from the http.client module",
		"prefix": "putrequest",
		"body": ["putrequest(${1:request}, ${2:selector}, ${3:skip_host=False}, ${4:skip_accept_encoding=False})"]},
	"read() from the http.client module": {
		"description": "read() from the http.client module",
		"prefix": "read",
		"body": ["read(${1:[amt]})"]},
	"readinto() from the http.client module": {
		"description": "readinto() from the http.client module",
		"prefix": "readinto",
		"body": ["readinto(${1:b})"]},
	"reason() from the http.client module": {
		"description": "reason() from the http.client module",
		"prefix": "reason",
		"body": ["reason()"]},
	"request() from the http.client module": {
		"description": "request() from the http.client module",
		"prefix": "request",
		"body": ["request(${1:method}, ${2:url}, ${3:body=None}, ${4:headers={}})"]},
	"responses() from the http.client module": {
		"description": "responses() from the http.client module",
		"prefix": "responses",
		"body": ["responses()"]},
	"send() from the http.client module": {
		"description": "send() from the http.client module",
		"prefix": "send",
		"body": ["send(${1:data})"]},
	"set_debuglevel() from the http.client module": {
		"description": "set_debuglevel() from the http.client module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:level})"]},
	"set_tunnel() from the http.client module": {
		"description": "set_tunnel() from the http.client module",
		"prefix": "set_tunnel",
		"body": ["set_tunnel(${1:host}, ${2:port=None}, ${3:headers=None})"]},
	"status() from the http.client module": {
		"description": "status() from the http.client module",
		"prefix": "status",
		"body": ["status()"]},
	"version() from the http.client module": {
		"description": "version() from the http.client module",
		"prefix": "version",
		"body": ["version()"]},
// http.cookiejar completion
	"Cookie from the http.cookiejar module": {
		"description": "Cookie from the http.cookiejar module",
		"prefix": "Cookie",
		"body": ["Cookie"]},
	"CookieJar from the http.cookiejar module": {
		"description": "CookieJar from the http.cookiejar module",
		"prefix": "CookieJar",
		"body": ["CookieJar(${1:policy=None})"]},
	"CookiePolicy from the http.cookiejar module": {
		"description": "CookiePolicy from the http.cookiejar module",
		"prefix": "CookiePolicy",
		"body": ["CookiePolicy"]},
	"DefaultCookiePolicy from the http.cookiejar module": {
		"description": "DefaultCookiePolicy from the http.cookiejar module",
		"prefix": "DefaultCookiePolicy",
		"body": ["DefaultCookiePolicy(${1:blocked_domains=None}, ${2:allowed_domains=None}, ${3:netscape=True}, ${4:rfc2965=False}, ${5:rfc2109_as_netscape=None}, ${6:hide_cookie2=False}, ${7:strict_domain=False}, ${8:strict_rfc2965_unverifiable=True}, ${9:strict_ns_unverifiable=False}, ${10:strict_ns_domain=DefaultCookiePolicy.DomainLiberal}, ${11:strict_ns_set_initial_dollar=False}, ${12:strict_ns_set_path=False})"]},
	"DomainLiberal from the http.cookiejar module": {
		"description": "DomainLiberal from the http.cookiejar module",
		"prefix": "DomainLiberal",
		"body": ["DomainLiberal"]},
	"DomainRFC2965Match from the http.cookiejar module": {
		"description": "DomainRFC2965Match from the http.cookiejar module",
		"prefix": "DomainRFC2965Match",
		"body": ["DomainRFC2965Match"]},
	"DomainStrict from the http.cookiejar module": {
		"description": "DomainStrict from the http.cookiejar module",
		"prefix": "DomainStrict",
		"body": ["DomainStrict"]},
	"DomainStrictNoDots from the http.cookiejar module": {
		"description": "DomainStrictNoDots from the http.cookiejar module",
		"prefix": "DomainStrictNoDots",
		"body": ["DomainStrictNoDots"]},
	"DomainStrictNonDomain from the http.cookiejar module": {
		"description": "DomainStrictNonDomain from the http.cookiejar module",
		"prefix": "DomainStrictNonDomain",
		"body": ["DomainStrictNonDomain"]},
	"FileCookieJar from the http.cookiejar module": {
		"description": "FileCookieJar from the http.cookiejar module",
		"prefix": "FileCookieJar",
		"body": ["FileCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})"]},
	"LWPCookieJar from the http.cookiejar module": {
		"description": "LWPCookieJar from the http.cookiejar module",
		"prefix": "LWPCookieJar",
		"body": ["LWPCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})"]},
	"LoadError from the http.cookiejar module": {
		"description": "LoadError from the http.cookiejar module",
		"prefix": "LoadError",
		"body": ["LoadError"]},
	"MozillaCookieJar from the http.cookiejar module": {
		"description": "MozillaCookieJar from the http.cookiejar module",
		"prefix": "MozillaCookieJar",
		"body": ["MozillaCookieJar(${1:filename}, ${2:delayload=None}, ${3:policy=None})"]},
	"add_cookie_header() from the http.cookiejar module": {
		"description": "add_cookie_header() from the http.cookiejar module",
		"prefix": "add_cookie_header",
		"body": ["add_cookie_header(${1:request})"]},
	"allowed_domains() from the http.cookiejar module": {
		"description": "allowed_domains() from the http.cookiejar module",
		"prefix": "allowed_domains",
		"body": ["allowed_domains(${1:})"]},
	"blocked_domains() from the http.cookiejar module": {
		"description": "blocked_domains() from the http.cookiejar module",
		"prefix": "blocked_domains",
		"body": ["blocked_domains(${1:})"]},
	"clear() from the http.cookiejar module": {
		"description": "clear() from the http.cookiejar module",
		"prefix": "clear",
		"body": ["clear(${1:[domain[}, ${2:path[}, ${3:name]]]})"]},
	"clear_session_cookies() from the http.cookiejar module": {
		"description": "clear_session_cookies() from the http.cookiejar module",
		"prefix": "clear_session_cookies",
		"body": ["clear_session_cookies(${1:})"]},
	"comment() from the http.cookiejar module": {
		"description": "comment() from the http.cookiejar module",
		"prefix": "comment",
		"body": ["comment()"]},
	"comment_url() from the http.cookiejar module": {
		"description": "comment_url() from the http.cookiejar module",
		"prefix": "comment_url",
		"body": ["comment_url()"]},
	"delayload() from the http.cookiejar module": {
		"description": "delayload() from the http.cookiejar module",
		"prefix": "delayload",
		"body": ["delayload()"]},
	"discard() from the http.cookiejar module": {
		"description": "discard() from the http.cookiejar module",
		"prefix": "discard",
		"body": ["discard()"]},
	"domain_initial_dot() from the http.cookiejar module": {
		"description": "domain_initial_dot() from the http.cookiejar module",
		"prefix": "domain_initial_dot",
		"body": ["domain_initial_dot()"]},
	"domain_return_ok() from the http.cookiejar module": {
		"description": "domain_return_ok() from the http.cookiejar module",
		"prefix": "domain_return_ok",
		"body": ["domain_return_ok(${1:domain}, ${2:request})"]},
	"domain_specified() from the http.cookiejar module": {
		"description": "domain_specified() from the http.cookiejar module",
		"prefix": "domain_specified",
		"body": ["domain_specified()"]},
	"expires() from the http.cookiejar module": {
		"description": "expires() from the http.cookiejar module",
		"prefix": "expires",
		"body": ["expires()"]},
	"extract_cookies() from the http.cookiejar module": {
		"description": "extract_cookies() from the http.cookiejar module",
		"prefix": "extract_cookies",
		"body": ["extract_cookies(${1:response}, ${2:request})"]},
	"filename() from the http.cookiejar module": {
		"description": "filename() from the http.cookiejar module",
		"prefix": "filename",
		"body": ["filename()"]},
	"get_nonstandard_attr() from the http.cookiejar module": {
		"description": "get_nonstandard_attr() from the http.cookiejar module",
		"prefix": "get_nonstandard_attr",
		"body": ["get_nonstandard_attr(${1:name}, ${2:default=None})"]},
	"has_nonstandard_attr() from the http.cookiejar module": {
		"description": "has_nonstandard_attr() from the http.cookiejar module",
		"prefix": "has_nonstandard_attr",
		"body": ["has_nonstandard_attr(${1:name})"]},
	"hide_cookie2() from the http.cookiejar module": {
		"description": "hide_cookie2() from the http.cookiejar module",
		"prefix": "hide_cookie2",
		"body": ["hide_cookie2()"]},
	"is_blocked() from the http.cookiejar module": {
		"description": "is_blocked() from the http.cookiejar module",
		"prefix": "is_blocked",
		"body": ["is_blocked(${1:domain})"]},
	"is_expired() from the http.cookiejar module": {
		"description": "is_expired() from the http.cookiejar module",
		"prefix": "is_expired",
		"body": ["is_expired(${1:now=None})"]},
	"is_not_allowed() from the http.cookiejar module": {
		"description": "is_not_allowed() from the http.cookiejar module",
		"prefix": "is_not_allowed",
		"body": ["is_not_allowed(${1:domain})"]},
	"load() from the http.cookiejar module": {
		"description": "load() from the http.cookiejar module",
		"prefix": "load",
		"body": ["load(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})"]},
	"make_cookies() from the http.cookiejar module": {
		"description": "make_cookies() from the http.cookiejar module",
		"prefix": "make_cookies",
		"body": ["make_cookies(${1:response}, ${2:request})"]},
	"name() from the http.cookiejar module": {
		"description": "name() from the http.cookiejar module",
		"prefix": "name",
		"body": ["name()"]},
	"netscape() from the http.cookiejar module": {
		"description": "netscape() from the http.cookiejar module",
		"prefix": "netscape",
		"body": ["netscape()"]},
	"path() from the http.cookiejar module": {
		"description": "path() from the http.cookiejar module",
		"prefix": "path",
		"body": ["path()"]},
	"path_return_ok() from the http.cookiejar module": {
		"description": "path_return_ok() from the http.cookiejar module",
		"prefix": "path_return_ok",
		"body": ["path_return_ok(${1:path}, ${2:request})"]},
	"port() from the http.cookiejar module": {
		"description": "port() from the http.cookiejar module",
		"prefix": "port",
		"body": ["port()"]},
	"port_specified() from the http.cookiejar module": {
		"description": "port_specified() from the http.cookiejar module",
		"prefix": "port_specified",
		"body": ["port_specified()"]},
	"return_ok() from the http.cookiejar module": {
		"description": "return_ok() from the http.cookiejar module",
		"prefix": "return_ok",
		"body": ["return_ok(${1:cookie}, ${2:request})"]},
	"revert() from the http.cookiejar module": {
		"description": "revert() from the http.cookiejar module",
		"prefix": "revert",
		"body": ["revert(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})"]},
	"rfc2109() from the http.cookiejar module": {
		"description": "rfc2109() from the http.cookiejar module",
		"prefix": "rfc2109",
		"body": ["rfc2109()"]},
	"rfc2109_as_netscape() from the http.cookiejar module": {
		"description": "rfc2109_as_netscape() from the http.cookiejar module",
		"prefix": "rfc2109_as_netscape",
		"body": ["rfc2109_as_netscape()"]},
	"rfc2965() from the http.cookiejar module": {
		"description": "rfc2965() from the http.cookiejar module",
		"prefix": "rfc2965",
		"body": ["rfc2965()"]},
	"save() from the http.cookiejar module": {
		"description": "save() from the http.cookiejar module",
		"prefix": "save",
		"body": ["save(${1:filename=None}, ${2:ignore_discard=False}, ${3:ignore_expires=False})"]},
	"secure() from the http.cookiejar module": {
		"description": "secure() from the http.cookiejar module",
		"prefix": "secure",
		"body": ["secure()"]},
	"set_allowed_domains() from the http.cookiejar module": {
		"description": "set_allowed_domains() from the http.cookiejar module",
		"prefix": "set_allowed_domains",
		"body": ["set_allowed_domains(${1:allowed_domains})"]},
	"set_blocked_domains() from the http.cookiejar module": {
		"description": "set_blocked_domains() from the http.cookiejar module",
		"prefix": "set_blocked_domains",
		"body": ["set_blocked_domains(${1:blocked_domains})"]},
	"set_cookie() from the http.cookiejar module": {
		"description": "set_cookie() from the http.cookiejar module",
		"prefix": "set_cookie",
		"body": ["set_cookie(${1:cookie})"]},
	"set_cookie_if_ok() from the http.cookiejar module": {
		"description": "set_cookie_if_ok() from the http.cookiejar module",
		"prefix": "set_cookie_if_ok",
		"body": ["set_cookie_if_ok(${1:cookie}, ${2:request})"]},
	"set_nonstandard_attr() from the http.cookiejar module": {
		"description": "set_nonstandard_attr() from the http.cookiejar module",
		"prefix": "set_nonstandard_attr",
		"body": ["set_nonstandard_attr(${1:name}, ${2:value})"]},
	"set_ok() from the http.cookiejar module": {
		"description": "set_ok() from the http.cookiejar module",
		"prefix": "set_ok",
		"body": ["set_ok(${1:cookie}, ${2:request})"]},
	"set_policy() from the http.cookiejar module": {
		"description": "set_policy() from the http.cookiejar module",
		"prefix": "set_policy",
		"body": ["set_policy(${1:policy})"]},
	"strict_domain() from the http.cookiejar module": {
		"description": "strict_domain() from the http.cookiejar module",
		"prefix": "strict_domain",
		"body": ["strict_domain()"]},
	"strict_ns_domain() from the http.cookiejar module": {
		"description": "strict_ns_domain() from the http.cookiejar module",
		"prefix": "strict_ns_domain",
		"body": ["strict_ns_domain()"]},
	"strict_ns_set_initial_dollar() from the http.cookiejar module": {
		"description": "strict_ns_set_initial_dollar() from the http.cookiejar module",
		"prefix": "strict_ns_set_initial_dollar",
		"body": ["strict_ns_set_initial_dollar()"]},
	"strict_ns_set_path() from the http.cookiejar module": {
		"description": "strict_ns_set_path() from the http.cookiejar module",
		"prefix": "strict_ns_set_path",
		"body": ["strict_ns_set_path()"]},
	"strict_ns_unverifiable() from the http.cookiejar module": {
		"description": "strict_ns_unverifiable() from the http.cookiejar module",
		"prefix": "strict_ns_unverifiable",
		"body": ["strict_ns_unverifiable()"]},
	"strict_rfc2965_unverifiable() from the http.cookiejar module": {
		"description": "strict_rfc2965_unverifiable() from the http.cookiejar module",
		"prefix": "strict_rfc2965_unverifiable",
		"body": ["strict_rfc2965_unverifiable()"]},
	"value() from the http.cookiejar module": {
		"description": "value() from the http.cookiejar module",
		"prefix": "value",
		"body": ["value()"]},
	"version() from the http.cookiejar module": {
		"description": "version() from the http.cookiejar module",
		"prefix": "version",
		"body": ["version()"]},
// http.cookies completion
	"BaseCookie from the http.cookies module": {
		"description": "BaseCookie from the http.cookies module",
		"prefix": "BaseCookie",
		"body": ["BaseCookie(${1:[input]})"]},
	"CookieError from the http.cookies module": {
		"description": "CookieError from the http.cookies module",
		"prefix": "CookieError",
		"body": ["CookieError"]},
	"Morsel from the http.cookies module": {
		"description": "Morsel from the http.cookies module",
		"prefix": "Morsel",
		"body": ["Morsel"]},
	"OutputString from the http.cookies module": {
		"description": "OutputString from the http.cookies module",
		"prefix": "OutputString",
		"body": ["OutputString(${1:attrs=None})"]},
	"SimpleCookie from the http.cookies module": {
		"description": "SimpleCookie from the http.cookies module",
		"prefix": "SimpleCookie",
		"body": ["SimpleCookie(${1:[input]})"]},
	"coded_value() from the http.cookies module": {
		"description": "coded_value() from the http.cookies module",
		"prefix": "coded_value",
		"body": ["coded_value()"]},
	"copy() from the http.cookies module": {
		"description": "copy() from the http.cookies module",
		"prefix": "copy",
		"body": ["copy(${1:value})"]},
	"isReservedKey() from the http.cookies module": {
		"description": "isReservedKey() from the http.cookies module",
		"prefix": "isReservedKey",
		"body": ["isReservedKey(${1:K})"]},
	"js_output() from the http.cookies module": {
		"description": "js_output() from the http.cookies module",
		"prefix": "js_output",
		"body": ["js_output(${1:attrs=None})"]},
	"key() from the http.cookies module": {
		"description": "key() from the http.cookies module",
		"prefix": "key",
		"body": ["key()"]},
	"load() from the http.cookies module": {
		"description": "load() from the http.cookies module",
		"prefix": "load",
		"body": ["load(${1:rawdata})"]},
	"output() from the http.cookies module": {
		"description": "output() from the http.cookies module",
		"prefix": "output",
		"body": ["output(${1:attrs=None}, ${2:header='Set-Cookie:'}, ${3:sep=' '})"]},
	"output() from the http.cookies module": {
		"description": "output() from the http.cookies module",
		"prefix": "output",
		"body": ["output(${1:attrs=None}, ${2:header='Set-Cookie:'})"]},
	"set() from the http.cookies module": {
		"description": "set() from the http.cookies module",
		"prefix": "set",
		"body": ["set(${1:key}, ${2:value}, ${3:coded_value})"]},
	"setdefault() from the http.cookies module": {
		"description": "setdefault() from the http.cookies module",
		"prefix": "setdefault",
		"body": ["setdefault(${1:key}, ${2:value=None})"]},
	"update() from the http.cookies module": {
		"description": "update() from the http.cookies module",
		"prefix": "update",
		"body": ["update(${1:values})"]},
	"value() from the http.cookies module": {
		"description": "value() from the http.cookies module",
		"prefix": "value",
		"body": ["value()"]},
	"value_decode() from the http.cookies module": {
		"description": "value_decode() from the http.cookies module",
		"prefix": "value_decode",
		"body": ["value_decode(${1:val})"]},
	"value_encode() from the http.cookies module": {
		"description": "value_encode() from the http.cookies module",
		"prefix": "value_encode",
		"body": ["value_encode(${1:val})"]},
// http.server completion
	"BaseHTTPRequestHandler from the http.server module": {
		"description": "BaseHTTPRequestHandler from the http.server module",
		"prefix": "BaseHTTPRequestHandler",
		"body": ["BaseHTTPRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"CGIHTTPRequestHandler from the http.server module": {
		"description": "CGIHTTPRequestHandler from the http.server module",
		"prefix": "CGIHTTPRequestHandler",
		"body": ["CGIHTTPRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"HTTPServer from the http.server module": {
		"description": "HTTPServer from the http.server module",
		"prefix": "HTTPServer",
		"body": ["HTTPServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"SimpleHTTPRequestHandler from the http.server module": {
		"description": "SimpleHTTPRequestHandler from the http.server module",
		"prefix": "SimpleHTTPRequestHandler",
		"body": ["SimpleHTTPRequestHandler(${1:request,})"]},
// imaplib completion
	"IMAP4 from the imaplib module": {
		"description": "IMAP4 from the imaplib module",
		"prefix": "IMAP4",
		"body": ["IMAP4(${1:host=''}, ${2:port=IMAP4_PORT})"]},
	"IMAP4_SSL from the imaplib module": {
		"description": "IMAP4_SSL from the imaplib module",
		"prefix": "IMAP4_SSL",
		"body": ["IMAP4_SSL(${1:host=''}, ${2:port=IMAP4_SSL_PORT}, ${3:keyfile=None}, ${4:certfile=None}, ${5:ssl_context=None})"]},
	"IMAP4_stream from the imaplib module": {
		"description": "IMAP4_stream from the imaplib module",
		"prefix": "IMAP4_stream",
		"body": ["IMAP4_stream(${1:command})"]},
	"Int2AP from the imaplib module": {
		"description": "Int2AP from the imaplib module",
		"prefix": "Int2AP",
		"body": ["Int2AP(${1:num})"]},
	"Internaldate2tuple from the imaplib module": {
		"description": "Internaldate2tuple from the imaplib module",
		"prefix": "Internaldate2tuple",
		"body": ["Internaldate2tuple(${1:datestr})"]},
	"PROTOCOL_VERSION from the imaplib module": {
		"description": "PROTOCOL_VERSION from the imaplib module",
		"prefix": "PROTOCOL_VERSION",
		"body": ["PROTOCOL_VERSION"]},
	"ParseFlags from the imaplib module": {
		"description": "ParseFlags from the imaplib module",
		"prefix": "ParseFlags",
		"body": ["ParseFlags(${1:flagstr})"]},
	"Time2Internaldate from the imaplib module": {
		"description": "Time2Internaldate from the imaplib module",
		"prefix": "Time2Internaldate",
		"body": ["Time2Internaldate(${1:date_time})"]},
	"abort() from the imaplib module": {
		"description": "abort() from the imaplib module",
		"prefix": "abort",
		"body": ["abort()"]},
	"append() from the imaplib module": {
		"description": "append() from the imaplib module",
		"prefix": "append",
		"body": ["append(${1:mailbox}, ${2:flags}, ${3:date_time}, ${4:message})"]},
	"authenticate() from the imaplib module": {
		"description": "authenticate() from the imaplib module",
		"prefix": "authenticate",
		"body": ["authenticate(${1:mechanism}, ${2:authobject})"]},
	"check() from the imaplib module": {
		"description": "check() from the imaplib module",
		"prefix": "check",
		"body": ["check(${1:})"]},
	"close() from the imaplib module": {
		"description": "close() from the imaplib module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"copy() from the imaplib module": {
		"description": "copy() from the imaplib module",
		"prefix": "copy",
		"body": ["copy(${1:message_set}, ${2:new_mailbox})"]},
	"create() from the imaplib module": {
		"description": "create() from the imaplib module",
		"prefix": "create",
		"body": ["create(${1:mailbox})"]},
	"debug() from the imaplib module": {
		"description": "debug() from the imaplib module",
		"prefix": "debug",
		"body": ["debug()"]},
	"delete() from the imaplib module": {
		"description": "delete() from the imaplib module",
		"prefix": "delete",
		"body": ["delete(${1:mailbox})"]},
	"deleteacl() from the imaplib module": {
		"description": "deleteacl() from the imaplib module",
		"prefix": "deleteacl",
		"body": ["deleteacl(${1:mailbox}, ${2:who})"]},
	"enable() from the imaplib module": {
		"description": "enable() from the imaplib module",
		"prefix": "enable",
		"body": ["enable(${1:capability})"]},
	"error() from the imaplib module": {
		"description": "error() from the imaplib module",
		"prefix": "error",
		"body": ["error()"]},
	"expunge() from the imaplib module": {
		"description": "expunge() from the imaplib module",
		"prefix": "expunge",
		"body": ["expunge(${1:})"]},
	"fetch() from the imaplib module": {
		"description": "fetch() from the imaplib module",
		"prefix": "fetch",
		"body": ["fetch(${1:message_set}, ${2:message_parts})"]},
	"getacl() from the imaplib module": {
		"description": "getacl() from the imaplib module",
		"prefix": "getacl",
		"body": ["getacl(${1:mailbox})"]},
	"getannotation() from the imaplib module": {
		"description": "getannotation() from the imaplib module",
		"prefix": "getannotation",
		"body": ["getannotation(${1:mailbox}, ${2:entry}, ${3:attribute})"]},
	"getquota() from the imaplib module": {
		"description": "getquota() from the imaplib module",
		"prefix": "getquota",
		"body": ["getquota(${1:root})"]},
	"getquotaroot() from the imaplib module": {
		"description": "getquotaroot() from the imaplib module",
		"prefix": "getquotaroot",
		"body": ["getquotaroot(${1:mailbox})"]},
	"list() from the imaplib module": {
		"description": "list() from the imaplib module",
		"prefix": "list",
		"body": ["list(${1:[directory[}, ${2:pattern]]})"]},
	"login() from the imaplib module": {
		"description": "login() from the imaplib module",
		"prefix": "login",
		"body": ["login(${1:user}, ${2:password})"]},
	"login_cram_md5() from the imaplib module": {
		"description": "login_cram_md5() from the imaplib module",
		"prefix": "login_cram_md5",
		"body": ["login_cram_md5(${1:user}, ${2:password})"]},
	"logout() from the imaplib module": {
		"description": "logout() from the imaplib module",
		"prefix": "logout",
		"body": ["logout(${1:})"]},
	"lsub() from the imaplib module": {
		"description": "lsub() from the imaplib module",
		"prefix": "lsub",
		"body": ["lsub(${1:directory='\"\"'}, ${2:pattern='*'})"]},
	"myrights() from the imaplib module": {
		"description": "myrights() from the imaplib module",
		"prefix": "myrights",
		"body": ["myrights(${1:mailbox})"]},
	"namespace() from the imaplib module": {
		"description": "namespace() from the imaplib module",
		"prefix": "namespace",
		"body": ["namespace(${1:})"]},
	"noop() from the imaplib module": {
		"description": "noop() from the imaplib module",
		"prefix": "noop",
		"body": ["noop(${1:})"]},
	"open() from the imaplib module": {
		"description": "open() from the imaplib module",
		"prefix": "open",
		"body": ["open(${1:host}, ${2:port})"]},
	"partial() from the imaplib module": {
		"description": "partial() from the imaplib module",
		"prefix": "partial",
		"body": ["partial(${1:message_num}, ${2:message_part}, ${3:start}, ${4:length})"]},
	"proxyauth() from the imaplib module": {
		"description": "proxyauth() from the imaplib module",
		"prefix": "proxyauth",
		"body": ["proxyauth(${1:user})"]},
	"read() from the imaplib module": {
		"description": "read() from the imaplib module",
		"prefix": "read",
		"body": ["read(${1:size})"]},
	"readline() from the imaplib module": {
		"description": "readline() from the imaplib module",
		"prefix": "readline",
		"body": ["readline(${1:})"]},
	"readonly() from the imaplib module": {
		"description": "readonly() from the imaplib module",
		"prefix": "readonly",
		"body": ["readonly()"]},
	"recent() from the imaplib module": {
		"description": "recent() from the imaplib module",
		"prefix": "recent",
		"body": ["recent(${1:})"]},
	"rename() from the imaplib module": {
		"description": "rename() from the imaplib module",
		"prefix": "rename",
		"body": ["rename(${1:oldmailbox}, ${2:newmailbox})"]},
	"response() from the imaplib module": {
		"description": "response() from the imaplib module",
		"prefix": "response",
		"body": ["response(${1:code})"]},
	"search() from the imaplib module": {
		"description": "search() from the imaplib module",
		"prefix": "search",
		"body": ["search(${1:charset}, ${2:criterion[}, ${3:...]})"]},
	"select() from the imaplib module": {
		"description": "select() from the imaplib module",
		"prefix": "select",
		"body": ["select(${1:mailbox='INBOX'}, ${2:readonly=False})"]},
	"send() from the imaplib module": {
		"description": "send() from the imaplib module",
		"prefix": "send",
		"body": ["send(${1:data})"]},
	"setacl() from the imaplib module": {
		"description": "setacl() from the imaplib module",
		"prefix": "setacl",
		"body": ["setacl(${1:mailbox}, ${2:who}, ${3:what})"]},
	"setannotation() from the imaplib module": {
		"description": "setannotation() from the imaplib module",
		"prefix": "setannotation",
		"body": ["setannotation(${1:mailbox}, ${2:entry}, ${3:attribute[}, ${4:...]})"]},
	"setquota() from the imaplib module": {
		"description": "setquota() from the imaplib module",
		"prefix": "setquota",
		"body": ["setquota(${1:root}, ${2:limits})"]},
	"shutdown() from the imaplib module": {
		"description": "shutdown() from the imaplib module",
		"prefix": "shutdown",
		"body": ["shutdown(${1:})"]},
	"socket() from the imaplib module": {
		"description": "socket() from the imaplib module",
		"prefix": "socket",
		"body": ["socket(${1:})"]},
	"sort() from the imaplib module": {
		"description": "sort() from the imaplib module",
		"prefix": "sort",
		"body": ["sort(${1:sort_criteria}, ${2:charset}, ${3:search_criterion[}, ${4:...]})"]},
	"starttls() from the imaplib module": {
		"description": "starttls() from the imaplib module",
		"prefix": "starttls",
		"body": ["starttls(${1:ssl_context=None})"]},
	"status() from the imaplib module": {
		"description": "status() from the imaplib module",
		"prefix": "status",
		"body": ["status(${1:mailbox}, ${2:names})"]},
	"store() from the imaplib module": {
		"description": "store() from the imaplib module",
		"prefix": "store",
		"body": ["store(${1:message_set}, ${2:command}, ${3:flag_list})"]},
	"subscribe() from the imaplib module": {
		"description": "subscribe() from the imaplib module",
		"prefix": "subscribe",
		"body": ["subscribe(${1:mailbox})"]},
	"thread() from the imaplib module": {
		"description": "thread() from the imaplib module",
		"prefix": "thread",
		"body": ["thread(${1:threading_algorithm}, ${2:charset}, ${3:search_criterion[}, ${4:...]})"]},
	"uid() from the imaplib module": {
		"description": "uid() from the imaplib module",
		"prefix": "uid",
		"body": ["uid(${1:command}, ${2:arg[}, ${3:...]})"]},
	"unsubscribe() from the imaplib module": {
		"description": "unsubscribe() from the imaplib module",
		"prefix": "unsubscribe",
		"body": ["unsubscribe(${1:mailbox})"]},
	"utf8_enabled() from the imaplib module": {
		"description": "utf8_enabled() from the imaplib module",
		"prefix": "utf8_enabled",
		"body": ["utf8_enabled()"]},
	"xatom() from the imaplib module": {
		"description": "xatom() from the imaplib module",
		"prefix": "xatom",
		"body": ["xatom(${1:name[,})"]},
// imghdr completion
	"tests() from the imghdr module": {
		"description": "tests() from the imghdr module",
		"prefix": "tests",
		"body": ["tests()"]},
	"what() from the imghdr module": {
		"description": "what() from the imghdr module",
		"prefix": "what",
		"body": ["what(${1:filename,})"]},
// imp completion
	"C_BUILTIN from the imp module": {
		"description": "C_BUILTIN from the imp module",
		"prefix": "C_BUILTIN",
		"body": ["C_BUILTIN"]},
	"C_EXTENSION from the imp module": {
		"description": "C_EXTENSION from the imp module",
		"prefix": "C_EXTENSION",
		"body": ["C_EXTENSION"]},
	"NullImporter from the imp module": {
		"description": "NullImporter from the imp module",
		"prefix": "NullImporter",
		"body": ["NullImporter(${1:path_string})"]},
	"PKG_DIRECTORY from the imp module": {
		"description": "PKG_DIRECTORY from the imp module",
		"prefix": "PKG_DIRECTORY",
		"body": ["PKG_DIRECTORY"]},
	"PY_COMPILED from the imp module": {
		"description": "PY_COMPILED from the imp module",
		"prefix": "PY_COMPILED",
		"body": ["PY_COMPILED"]},
	"PY_FROZEN from the imp module": {
		"description": "PY_FROZEN from the imp module",
		"prefix": "PY_FROZEN",
		"body": ["PY_FROZEN"]},
	"PY_SOURCE from the imp module": {
		"description": "PY_SOURCE from the imp module",
		"prefix": "PY_SOURCE",
		"body": ["PY_SOURCE"]},
	"acquire_lock() from the imp module": {
		"description": "acquire_lock() from the imp module",
		"prefix": "acquire_lock",
		"body": ["acquire_lock(${1:})"]},
	"cache_from_source() from the imp module": {
		"description": "cache_from_source() from the imp module",
		"prefix": "cache_from_source",
		"body": ["cache_from_source(${1:path}, ${2:debug_override=None})"]},
	"find_module() from the imp module": {
		"description": "find_module() from the imp module",
		"prefix": "find_module",
		"body": ["find_module(${1:name[}, ${2:path]})"]},
	"get_magic() from the imp module": {
		"description": "get_magic() from the imp module",
		"prefix": "get_magic",
		"body": ["get_magic(${1:})"]},
	"get_suffixes() from the imp module": {
		"description": "get_suffixes() from the imp module",
		"prefix": "get_suffixes",
		"body": ["get_suffixes(${1:})"]},
	"get_tag() from the imp module": {
		"description": "get_tag() from the imp module",
		"prefix": "get_tag",
		"body": ["get_tag(${1:})"]},
	"load_module() from the imp module": {
		"description": "load_module() from the imp module",
		"prefix": "load_module",
		"body": ["load_module(${1:name}, ${2:file}, ${3:pathname}, ${4:description})"]},
	"lock_held() from the imp module": {
		"description": "lock_held() from the imp module",
		"prefix": "lock_held",
		"body": ["lock_held(${1:})"]},
	"new_module() from the imp module": {
		"description": "new_module() from the imp module",
		"prefix": "new_module",
		"body": ["new_module(${1:name})"]},
	"release_lock() from the imp module": {
		"description": "release_lock() from the imp module",
		"prefix": "release_lock",
		"body": ["release_lock(${1:})"]},
	"reload() from the imp module": {
		"description": "reload() from the imp module",
		"prefix": "reload",
		"body": ["reload(${1:module})"]},
	"source_from_cache() from the imp module": {
		"description": "source_from_cache() from the imp module",
		"prefix": "source_from_cache",
		"body": ["source_from_cache(${1:path})"]},
// importlib completion
	"BYTECODE_SUFFIXES from the importlib module": {
		"description": "BYTECODE_SUFFIXES from the importlib module",
		"prefix": "BYTECODE_SUFFIXES",
		"body": ["BYTECODE_SUFFIXES"]},
	"BuiltinImporter from the importlib module": {
		"description": "BuiltinImporter from the importlib module",
		"prefix": "BuiltinImporter",
		"body": ["BuiltinImporter"]},
	"DEBUG_BYTECODE_SUFFIXES from the importlib module": {
		"description": "DEBUG_BYTECODE_SUFFIXES from the importlib module",
		"prefix": "DEBUG_BYTECODE_SUFFIXES",
		"body": ["DEBUG_BYTECODE_SUFFIXES"]},
	"EXTENSION_SUFFIXES from the importlib module": {
		"description": "EXTENSION_SUFFIXES from the importlib module",
		"prefix": "EXTENSION_SUFFIXES",
		"body": ["EXTENSION_SUFFIXES"]},
	"ExecutionLoader from the importlib module": {
		"description": "ExecutionLoader from the importlib module",
		"prefix": "ExecutionLoader",
		"body": ["ExecutionLoader"]},
	"ExtensionFileLoader from the importlib module": {
		"description": "ExtensionFileLoader from the importlib module",
		"prefix": "ExtensionFileLoader",
		"body": ["ExtensionFileLoader(${1:fullname}, ${2:path})"]},
	"FileFinder from the importlib module": {
		"description": "FileFinder from the importlib module",
		"prefix": "FileFinder",
		"body": ["FileFinder(${1:path}, ${2:*loader_details})"]},
	"FileLoader from the importlib module": {
		"description": "FileLoader from the importlib module",
		"prefix": "FileLoader",
		"body": ["FileLoader(${1:fullname}, ${2:path})"]},
	"Finder from the importlib module": {
		"description": "Finder from the importlib module",
		"prefix": "Finder",
		"body": ["Finder"]},
	"FrozenImporter from the importlib module": {
		"description": "FrozenImporter from the importlib module",
		"prefix": "FrozenImporter",
		"body": ["FrozenImporter"]},
	"InspectLoader from the importlib module": {
		"description": "InspectLoader from the importlib module",
		"prefix": "InspectLoader",
		"body": ["InspectLoader"]},
	"LazyLoader from the importlib module": {
		"description": "LazyLoader from the importlib module",
		"prefix": "LazyLoader",
		"body": ["LazyLoader(${1:loader})"]},
	"Loader from the importlib module": {
		"description": "Loader from the importlib module",
		"prefix": "Loader",
		"body": ["Loader"]},
	"MAGIC_NUMBER from the importlib module": {
		"description": "MAGIC_NUMBER from the importlib module",
		"prefix": "MAGIC_NUMBER",
		"body": ["MAGIC_NUMBER"]},
	"MetaPathFinder from the importlib module": {
		"description": "MetaPathFinder from the importlib module",
		"prefix": "MetaPathFinder",
		"body": ["MetaPathFinder"]},
	"ModuleSpec from the importlib module": {
		"description": "ModuleSpec from the importlib module",
		"prefix": "ModuleSpec",
		"body": ["ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})"]},
	"OPTIMIZED_BYTECODE_SUFFIXES from the importlib module": {
		"description": "OPTIMIZED_BYTECODE_SUFFIXES from the importlib module",
		"prefix": "OPTIMIZED_BYTECODE_SUFFIXES",
		"body": ["OPTIMIZED_BYTECODE_SUFFIXES"]},
	"PathEntryFinder from the importlib module": {
		"description": "PathEntryFinder from the importlib module",
		"prefix": "PathEntryFinder",
		"body": ["PathEntryFinder"]},
	"PathFinder from the importlib module": {
		"description": "PathFinder from the importlib module",
		"prefix": "PathFinder",
		"body": ["PathFinder"]},
	"ResourceLoader from the importlib module": {
		"description": "ResourceLoader from the importlib module",
		"prefix": "ResourceLoader",
		"body": ["ResourceLoader"]},
	"SOURCE_SUFFIXES from the importlib module": {
		"description": "SOURCE_SUFFIXES from the importlib module",
		"prefix": "SOURCE_SUFFIXES",
		"body": ["SOURCE_SUFFIXES"]},
	"SourceFileLoader from the importlib module": {
		"description": "SourceFileLoader from the importlib module",
		"prefix": "SourceFileLoader",
		"body": ["SourceFileLoader(${1:fullname}, ${2:path})"]},
	"SourceLoader from the importlib module": {
		"description": "SourceLoader from the importlib module",
		"prefix": "SourceLoader",
		"body": ["SourceLoader"]},
	"SourcelessFileLoader from the importlib module": {
		"description": "SourcelessFileLoader from the importlib module",
		"prefix": "SourcelessFileLoader",
		"body": ["SourcelessFileLoader(${1:fullname}, ${2:path})"]},
	"WindowsRegistryFinder from the importlib module": {
		"description": "WindowsRegistryFinder from the importlib module",
		"prefix": "WindowsRegistryFinder",
		"body": ["WindowsRegistryFinder"]},
	"__import__() from the importlib module": {
		"description": "__import__() from the importlib module",
		"prefix": "__import__",
		"body": ["__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})"]},
	"all_suffixes() from the importlib module": {
		"description": "all_suffixes() from the importlib module",
		"prefix": "all_suffixes",
		"body": ["all_suffixes(${1:})"]},
	"cache_from_source() from the importlib module": {
		"description": "cache_from_source() from the importlib module",
		"prefix": "cache_from_source",
		"body": ["cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})"]},
	"decode_source() from the importlib module": {
		"description": "decode_source() from the importlib module",
		"prefix": "decode_source",
		"body": ["decode_source(${1:source_bytes})"]},
	"find_loader() from the importlib module": {
		"description": "find_loader() from the importlib module",
		"prefix": "find_loader",
		"body": ["find_loader(${1:name}, ${2:path=None})"]},
	"find_spec() from the importlib module": {
		"description": "find_spec() from the importlib module",
		"prefix": "find_spec",
		"body": ["find_spec(${1:name}, ${2:package=None})"]},
	"import_module() from the importlib module": {
		"description": "import_module() from the importlib module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:package=None})"]},
	"invalidate_caches() from the importlib module": {
		"description": "invalidate_caches() from the importlib module",
		"prefix": "invalidate_caches",
		"body": ["invalidate_caches(${1:})"]},
	"module_for_loader() from the importlib module": {
		"description": "module_for_loader() from the importlib module",
		"prefix": "module_for_loader",
		"body": ["module_for_loader()"]},
	"module_from_spec() from the importlib module": {
		"description": "module_from_spec() from the importlib module",
		"prefix": "module_from_spec",
		"body": ["module_from_spec(${1:spec})"]},
	"reload() from the importlib module": {
		"description": "reload() from the importlib module",
		"prefix": "reload",
		"body": ["reload(${1:module})"]},
	"resolve_name() from the importlib module": {
		"description": "resolve_name() from the importlib module",
		"prefix": "resolve_name",
		"body": ["resolve_name(${1:name}, ${2:package})"]},
	"set_loader() from the importlib module": {
		"description": "set_loader() from the importlib module",
		"prefix": "set_loader",
		"body": ["set_loader()"]},
	"set_package() from the importlib module": {
		"description": "set_package() from the importlib module",
		"prefix": "set_package",
		"body": ["set_package()"]},
	"source_from_cache() from the importlib module": {
		"description": "source_from_cache() from the importlib module",
		"prefix": "source_from_cache",
		"body": ["source_from_cache(${1:path})"]},
	"spec_from_file_location() from the importlib module": {
		"description": "spec_from_file_location() from the importlib module",
		"prefix": "spec_from_file_location",
		"body": ["spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})"]},
	"spec_from_loader() from the importlib module": {
		"description": "spec_from_loader() from the importlib module",
		"prefix": "spec_from_loader",
		"body": ["spec_from_loader(${1:name,})"]},
// importlib.abc completion
	"BYTECODE_SUFFIXES from the importlib.abc module": {
		"description": "BYTECODE_SUFFIXES from the importlib.abc module",
		"prefix": "BYTECODE_SUFFIXES",
		"body": ["BYTECODE_SUFFIXES"]},
	"BuiltinImporter from the importlib.abc module": {
		"description": "BuiltinImporter from the importlib.abc module",
		"prefix": "BuiltinImporter",
		"body": ["BuiltinImporter"]},
	"DEBUG_BYTECODE_SUFFIXES from the importlib.abc module": {
		"description": "DEBUG_BYTECODE_SUFFIXES from the importlib.abc module",
		"prefix": "DEBUG_BYTECODE_SUFFIXES",
		"body": ["DEBUG_BYTECODE_SUFFIXES"]},
	"EXTENSION_SUFFIXES from the importlib.abc module": {
		"description": "EXTENSION_SUFFIXES from the importlib.abc module",
		"prefix": "EXTENSION_SUFFIXES",
		"body": ["EXTENSION_SUFFIXES"]},
	"ExecutionLoader from the importlib.abc module": {
		"description": "ExecutionLoader from the importlib.abc module",
		"prefix": "ExecutionLoader",
		"body": ["ExecutionLoader"]},
	"ExtensionFileLoader from the importlib.abc module": {
		"description": "ExtensionFileLoader from the importlib.abc module",
		"prefix": "ExtensionFileLoader",
		"body": ["ExtensionFileLoader(${1:fullname}, ${2:path})"]},
	"FileFinder from the importlib.abc module": {
		"description": "FileFinder from the importlib.abc module",
		"prefix": "FileFinder",
		"body": ["FileFinder(${1:path}, ${2:*loader_details})"]},
	"FileLoader from the importlib.abc module": {
		"description": "FileLoader from the importlib.abc module",
		"prefix": "FileLoader",
		"body": ["FileLoader(${1:fullname}, ${2:path})"]},
	"Finder from the importlib.abc module": {
		"description": "Finder from the importlib.abc module",
		"prefix": "Finder",
		"body": ["Finder"]},
	"FrozenImporter from the importlib.abc module": {
		"description": "FrozenImporter from the importlib.abc module",
		"prefix": "FrozenImporter",
		"body": ["FrozenImporter"]},
	"InspectLoader from the importlib.abc module": {
		"description": "InspectLoader from the importlib.abc module",
		"prefix": "InspectLoader",
		"body": ["InspectLoader"]},
	"LazyLoader from the importlib.abc module": {
		"description": "LazyLoader from the importlib.abc module",
		"prefix": "LazyLoader",
		"body": ["LazyLoader(${1:loader})"]},
	"Loader from the importlib.abc module": {
		"description": "Loader from the importlib.abc module",
		"prefix": "Loader",
		"body": ["Loader"]},
	"MAGIC_NUMBER from the importlib.abc module": {
		"description": "MAGIC_NUMBER from the importlib.abc module",
		"prefix": "MAGIC_NUMBER",
		"body": ["MAGIC_NUMBER"]},
	"MetaPathFinder from the importlib.abc module": {
		"description": "MetaPathFinder from the importlib.abc module",
		"prefix": "MetaPathFinder",
		"body": ["MetaPathFinder"]},
	"ModuleSpec from the importlib.abc module": {
		"description": "ModuleSpec from the importlib.abc module",
		"prefix": "ModuleSpec",
		"body": ["ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})"]},
	"OPTIMIZED_BYTECODE_SUFFIXES from the importlib.abc module": {
		"description": "OPTIMIZED_BYTECODE_SUFFIXES from the importlib.abc module",
		"prefix": "OPTIMIZED_BYTECODE_SUFFIXES",
		"body": ["OPTIMIZED_BYTECODE_SUFFIXES"]},
	"PathEntryFinder from the importlib.abc module": {
		"description": "PathEntryFinder from the importlib.abc module",
		"prefix": "PathEntryFinder",
		"body": ["PathEntryFinder"]},
	"PathFinder from the importlib.abc module": {
		"description": "PathFinder from the importlib.abc module",
		"prefix": "PathFinder",
		"body": ["PathFinder"]},
	"ResourceLoader from the importlib.abc module": {
		"description": "ResourceLoader from the importlib.abc module",
		"prefix": "ResourceLoader",
		"body": ["ResourceLoader"]},
	"SOURCE_SUFFIXES from the importlib.abc module": {
		"description": "SOURCE_SUFFIXES from the importlib.abc module",
		"prefix": "SOURCE_SUFFIXES",
		"body": ["SOURCE_SUFFIXES"]},
	"SourceFileLoader from the importlib.abc module": {
		"description": "SourceFileLoader from the importlib.abc module",
		"prefix": "SourceFileLoader",
		"body": ["SourceFileLoader(${1:fullname}, ${2:path})"]},
	"SourceLoader from the importlib.abc module": {
		"description": "SourceLoader from the importlib.abc module",
		"prefix": "SourceLoader",
		"body": ["SourceLoader"]},
	"SourcelessFileLoader from the importlib.abc module": {
		"description": "SourcelessFileLoader from the importlib.abc module",
		"prefix": "SourcelessFileLoader",
		"body": ["SourcelessFileLoader(${1:fullname}, ${2:path})"]},
	"WindowsRegistryFinder from the importlib.abc module": {
		"description": "WindowsRegistryFinder from the importlib.abc module",
		"prefix": "WindowsRegistryFinder",
		"body": ["WindowsRegistryFinder"]},
	"__import__() from the importlib.abc module": {
		"description": "__import__() from the importlib.abc module",
		"prefix": "__import__",
		"body": ["__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})"]},
	"all_suffixes() from the importlib.abc module": {
		"description": "all_suffixes() from the importlib.abc module",
		"prefix": "all_suffixes",
		"body": ["all_suffixes(${1:})"]},
	"cache_from_source() from the importlib.abc module": {
		"description": "cache_from_source() from the importlib.abc module",
		"prefix": "cache_from_source",
		"body": ["cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})"]},
	"decode_source() from the importlib.abc module": {
		"description": "decode_source() from the importlib.abc module",
		"prefix": "decode_source",
		"body": ["decode_source(${1:source_bytes})"]},
	"find_loader() from the importlib.abc module": {
		"description": "find_loader() from the importlib.abc module",
		"prefix": "find_loader",
		"body": ["find_loader(${1:name}, ${2:path=None})"]},
	"find_spec() from the importlib.abc module": {
		"description": "find_spec() from the importlib.abc module",
		"prefix": "find_spec",
		"body": ["find_spec(${1:name}, ${2:package=None})"]},
	"import_module() from the importlib.abc module": {
		"description": "import_module() from the importlib.abc module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:package=None})"]},
	"invalidate_caches() from the importlib.abc module": {
		"description": "invalidate_caches() from the importlib.abc module",
		"prefix": "invalidate_caches",
		"body": ["invalidate_caches(${1:})"]},
	"module_for_loader() from the importlib.abc module": {
		"description": "module_for_loader() from the importlib.abc module",
		"prefix": "module_for_loader",
		"body": ["module_for_loader()"]},
	"module_from_spec() from the importlib.abc module": {
		"description": "module_from_spec() from the importlib.abc module",
		"prefix": "module_from_spec",
		"body": ["module_from_spec(${1:spec})"]},
	"reload() from the importlib.abc module": {
		"description": "reload() from the importlib.abc module",
		"prefix": "reload",
		"body": ["reload(${1:module})"]},
	"resolve_name() from the importlib.abc module": {
		"description": "resolve_name() from the importlib.abc module",
		"prefix": "resolve_name",
		"body": ["resolve_name(${1:name}, ${2:package})"]},
	"set_loader() from the importlib.abc module": {
		"description": "set_loader() from the importlib.abc module",
		"prefix": "set_loader",
		"body": ["set_loader()"]},
	"set_package() from the importlib.abc module": {
		"description": "set_package() from the importlib.abc module",
		"prefix": "set_package",
		"body": ["set_package()"]},
	"source_from_cache() from the importlib.abc module": {
		"description": "source_from_cache() from the importlib.abc module",
		"prefix": "source_from_cache",
		"body": ["source_from_cache(${1:path})"]},
	"spec_from_file_location() from the importlib.abc module": {
		"description": "spec_from_file_location() from the importlib.abc module",
		"prefix": "spec_from_file_location",
		"body": ["spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})"]},
	"spec_from_loader() from the importlib.abc module": {
		"description": "spec_from_loader() from the importlib.abc module",
		"prefix": "spec_from_loader",
		"body": ["spec_from_loader(${1:name,})"]},
// importlib.machinery completion
	"BYTECODE_SUFFIXES from the importlib.machinery module": {
		"description": "BYTECODE_SUFFIXES from the importlib.machinery module",
		"prefix": "BYTECODE_SUFFIXES",
		"body": ["BYTECODE_SUFFIXES"]},
	"BuiltinImporter from the importlib.machinery module": {
		"description": "BuiltinImporter from the importlib.machinery module",
		"prefix": "BuiltinImporter",
		"body": ["BuiltinImporter"]},
	"DEBUG_BYTECODE_SUFFIXES from the importlib.machinery module": {
		"description": "DEBUG_BYTECODE_SUFFIXES from the importlib.machinery module",
		"prefix": "DEBUG_BYTECODE_SUFFIXES",
		"body": ["DEBUG_BYTECODE_SUFFIXES"]},
	"EXTENSION_SUFFIXES from the importlib.machinery module": {
		"description": "EXTENSION_SUFFIXES from the importlib.machinery module",
		"prefix": "EXTENSION_SUFFIXES",
		"body": ["EXTENSION_SUFFIXES"]},
	"ExecutionLoader from the importlib.machinery module": {
		"description": "ExecutionLoader from the importlib.machinery module",
		"prefix": "ExecutionLoader",
		"body": ["ExecutionLoader"]},
	"ExtensionFileLoader from the importlib.machinery module": {
		"description": "ExtensionFileLoader from the importlib.machinery module",
		"prefix": "ExtensionFileLoader",
		"body": ["ExtensionFileLoader(${1:fullname}, ${2:path})"]},
	"FileFinder from the importlib.machinery module": {
		"description": "FileFinder from the importlib.machinery module",
		"prefix": "FileFinder",
		"body": ["FileFinder(${1:path}, ${2:*loader_details})"]},
	"FileLoader from the importlib.machinery module": {
		"description": "FileLoader from the importlib.machinery module",
		"prefix": "FileLoader",
		"body": ["FileLoader(${1:fullname}, ${2:path})"]},
	"Finder from the importlib.machinery module": {
		"description": "Finder from the importlib.machinery module",
		"prefix": "Finder",
		"body": ["Finder"]},
	"FrozenImporter from the importlib.machinery module": {
		"description": "FrozenImporter from the importlib.machinery module",
		"prefix": "FrozenImporter",
		"body": ["FrozenImporter"]},
	"InspectLoader from the importlib.machinery module": {
		"description": "InspectLoader from the importlib.machinery module",
		"prefix": "InspectLoader",
		"body": ["InspectLoader"]},
	"LazyLoader from the importlib.machinery module": {
		"description": "LazyLoader from the importlib.machinery module",
		"prefix": "LazyLoader",
		"body": ["LazyLoader(${1:loader})"]},
	"Loader from the importlib.machinery module": {
		"description": "Loader from the importlib.machinery module",
		"prefix": "Loader",
		"body": ["Loader"]},
	"MAGIC_NUMBER from the importlib.machinery module": {
		"description": "MAGIC_NUMBER from the importlib.machinery module",
		"prefix": "MAGIC_NUMBER",
		"body": ["MAGIC_NUMBER"]},
	"MetaPathFinder from the importlib.machinery module": {
		"description": "MetaPathFinder from the importlib.machinery module",
		"prefix": "MetaPathFinder",
		"body": ["MetaPathFinder"]},
	"ModuleSpec from the importlib.machinery module": {
		"description": "ModuleSpec from the importlib.machinery module",
		"prefix": "ModuleSpec",
		"body": ["ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})"]},
	"OPTIMIZED_BYTECODE_SUFFIXES from the importlib.machinery module": {
		"description": "OPTIMIZED_BYTECODE_SUFFIXES from the importlib.machinery module",
		"prefix": "OPTIMIZED_BYTECODE_SUFFIXES",
		"body": ["OPTIMIZED_BYTECODE_SUFFIXES"]},
	"PathEntryFinder from the importlib.machinery module": {
		"description": "PathEntryFinder from the importlib.machinery module",
		"prefix": "PathEntryFinder",
		"body": ["PathEntryFinder"]},
	"PathFinder from the importlib.machinery module": {
		"description": "PathFinder from the importlib.machinery module",
		"prefix": "PathFinder",
		"body": ["PathFinder"]},
	"ResourceLoader from the importlib.machinery module": {
		"description": "ResourceLoader from the importlib.machinery module",
		"prefix": "ResourceLoader",
		"body": ["ResourceLoader"]},
	"SOURCE_SUFFIXES from the importlib.machinery module": {
		"description": "SOURCE_SUFFIXES from the importlib.machinery module",
		"prefix": "SOURCE_SUFFIXES",
		"body": ["SOURCE_SUFFIXES"]},
	"SourceFileLoader from the importlib.machinery module": {
		"description": "SourceFileLoader from the importlib.machinery module",
		"prefix": "SourceFileLoader",
		"body": ["SourceFileLoader(${1:fullname}, ${2:path})"]},
	"SourceLoader from the importlib.machinery module": {
		"description": "SourceLoader from the importlib.machinery module",
		"prefix": "SourceLoader",
		"body": ["SourceLoader"]},
	"SourcelessFileLoader from the importlib.machinery module": {
		"description": "SourcelessFileLoader from the importlib.machinery module",
		"prefix": "SourcelessFileLoader",
		"body": ["SourcelessFileLoader(${1:fullname}, ${2:path})"]},
	"WindowsRegistryFinder from the importlib.machinery module": {
		"description": "WindowsRegistryFinder from the importlib.machinery module",
		"prefix": "WindowsRegistryFinder",
		"body": ["WindowsRegistryFinder"]},
	"__import__() from the importlib.machinery module": {
		"description": "__import__() from the importlib.machinery module",
		"prefix": "__import__",
		"body": ["__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})"]},
	"all_suffixes() from the importlib.machinery module": {
		"description": "all_suffixes() from the importlib.machinery module",
		"prefix": "all_suffixes",
		"body": ["all_suffixes(${1:})"]},
	"cache_from_source() from the importlib.machinery module": {
		"description": "cache_from_source() from the importlib.machinery module",
		"prefix": "cache_from_source",
		"body": ["cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})"]},
	"decode_source() from the importlib.machinery module": {
		"description": "decode_source() from the importlib.machinery module",
		"prefix": "decode_source",
		"body": ["decode_source(${1:source_bytes})"]},
	"find_loader() from the importlib.machinery module": {
		"description": "find_loader() from the importlib.machinery module",
		"prefix": "find_loader",
		"body": ["find_loader(${1:name}, ${2:path=None})"]},
	"find_spec() from the importlib.machinery module": {
		"description": "find_spec() from the importlib.machinery module",
		"prefix": "find_spec",
		"body": ["find_spec(${1:name}, ${2:package=None})"]},
	"import_module() from the importlib.machinery module": {
		"description": "import_module() from the importlib.machinery module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:package=None})"]},
	"invalidate_caches() from the importlib.machinery module": {
		"description": "invalidate_caches() from the importlib.machinery module",
		"prefix": "invalidate_caches",
		"body": ["invalidate_caches(${1:})"]},
	"module_for_loader() from the importlib.machinery module": {
		"description": "module_for_loader() from the importlib.machinery module",
		"prefix": "module_for_loader",
		"body": ["module_for_loader()"]},
	"module_from_spec() from the importlib.machinery module": {
		"description": "module_from_spec() from the importlib.machinery module",
		"prefix": "module_from_spec",
		"body": ["module_from_spec(${1:spec})"]},
	"reload() from the importlib.machinery module": {
		"description": "reload() from the importlib.machinery module",
		"prefix": "reload",
		"body": ["reload(${1:module})"]},
	"resolve_name() from the importlib.machinery module": {
		"description": "resolve_name() from the importlib.machinery module",
		"prefix": "resolve_name",
		"body": ["resolve_name(${1:name}, ${2:package})"]},
	"set_loader() from the importlib.machinery module": {
		"description": "set_loader() from the importlib.machinery module",
		"prefix": "set_loader",
		"body": ["set_loader()"]},
	"set_package() from the importlib.machinery module": {
		"description": "set_package() from the importlib.machinery module",
		"prefix": "set_package",
		"body": ["set_package()"]},
	"source_from_cache() from the importlib.machinery module": {
		"description": "source_from_cache() from the importlib.machinery module",
		"prefix": "source_from_cache",
		"body": ["source_from_cache(${1:path})"]},
	"spec_from_file_location() from the importlib.machinery module": {
		"description": "spec_from_file_location() from the importlib.machinery module",
		"prefix": "spec_from_file_location",
		"body": ["spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})"]},
	"spec_from_loader() from the importlib.machinery module": {
		"description": "spec_from_loader() from the importlib.machinery module",
		"prefix": "spec_from_loader",
		"body": ["spec_from_loader(${1:name,})"]},
// importlib.util completion
	"BYTECODE_SUFFIXES from the importlib.util module": {
		"description": "BYTECODE_SUFFIXES from the importlib.util module",
		"prefix": "BYTECODE_SUFFIXES",
		"body": ["BYTECODE_SUFFIXES"]},
	"BuiltinImporter from the importlib.util module": {
		"description": "BuiltinImporter from the importlib.util module",
		"prefix": "BuiltinImporter",
		"body": ["BuiltinImporter"]},
	"DEBUG_BYTECODE_SUFFIXES from the importlib.util module": {
		"description": "DEBUG_BYTECODE_SUFFIXES from the importlib.util module",
		"prefix": "DEBUG_BYTECODE_SUFFIXES",
		"body": ["DEBUG_BYTECODE_SUFFIXES"]},
	"EXTENSION_SUFFIXES from the importlib.util module": {
		"description": "EXTENSION_SUFFIXES from the importlib.util module",
		"prefix": "EXTENSION_SUFFIXES",
		"body": ["EXTENSION_SUFFIXES"]},
	"ExecutionLoader from the importlib.util module": {
		"description": "ExecutionLoader from the importlib.util module",
		"prefix": "ExecutionLoader",
		"body": ["ExecutionLoader"]},
	"ExtensionFileLoader from the importlib.util module": {
		"description": "ExtensionFileLoader from the importlib.util module",
		"prefix": "ExtensionFileLoader",
		"body": ["ExtensionFileLoader(${1:fullname}, ${2:path})"]},
	"FileFinder from the importlib.util module": {
		"description": "FileFinder from the importlib.util module",
		"prefix": "FileFinder",
		"body": ["FileFinder(${1:path}, ${2:*loader_details})"]},
	"FileLoader from the importlib.util module": {
		"description": "FileLoader from the importlib.util module",
		"prefix": "FileLoader",
		"body": ["FileLoader(${1:fullname}, ${2:path})"]},
	"Finder from the importlib.util module": {
		"description": "Finder from the importlib.util module",
		"prefix": "Finder",
		"body": ["Finder"]},
	"FrozenImporter from the importlib.util module": {
		"description": "FrozenImporter from the importlib.util module",
		"prefix": "FrozenImporter",
		"body": ["FrozenImporter"]},
	"InspectLoader from the importlib.util module": {
		"description": "InspectLoader from the importlib.util module",
		"prefix": "InspectLoader",
		"body": ["InspectLoader"]},
	"LazyLoader from the importlib.util module": {
		"description": "LazyLoader from the importlib.util module",
		"prefix": "LazyLoader",
		"body": ["LazyLoader(${1:loader})"]},
	"Loader from the importlib.util module": {
		"description": "Loader from the importlib.util module",
		"prefix": "Loader",
		"body": ["Loader"]},
	"MAGIC_NUMBER from the importlib.util module": {
		"description": "MAGIC_NUMBER from the importlib.util module",
		"prefix": "MAGIC_NUMBER",
		"body": ["MAGIC_NUMBER"]},
	"MetaPathFinder from the importlib.util module": {
		"description": "MetaPathFinder from the importlib.util module",
		"prefix": "MetaPathFinder",
		"body": ["MetaPathFinder"]},
	"ModuleSpec from the importlib.util module": {
		"description": "ModuleSpec from the importlib.util module",
		"prefix": "ModuleSpec",
		"body": ["ModuleSpec(${1:name}, ${2:loader}, ${3:*}, ${4:origin=None}, ${5:loader_state=None}, ${6:is_package=None})"]},
	"OPTIMIZED_BYTECODE_SUFFIXES from the importlib.util module": {
		"description": "OPTIMIZED_BYTECODE_SUFFIXES from the importlib.util module",
		"prefix": "OPTIMIZED_BYTECODE_SUFFIXES",
		"body": ["OPTIMIZED_BYTECODE_SUFFIXES"]},
	"PathEntryFinder from the importlib.util module": {
		"description": "PathEntryFinder from the importlib.util module",
		"prefix": "PathEntryFinder",
		"body": ["PathEntryFinder"]},
	"PathFinder from the importlib.util module": {
		"description": "PathFinder from the importlib.util module",
		"prefix": "PathFinder",
		"body": ["PathFinder"]},
	"ResourceLoader from the importlib.util module": {
		"description": "ResourceLoader from the importlib.util module",
		"prefix": "ResourceLoader",
		"body": ["ResourceLoader"]},
	"SOURCE_SUFFIXES from the importlib.util module": {
		"description": "SOURCE_SUFFIXES from the importlib.util module",
		"prefix": "SOURCE_SUFFIXES",
		"body": ["SOURCE_SUFFIXES"]},
	"SourceFileLoader from the importlib.util module": {
		"description": "SourceFileLoader from the importlib.util module",
		"prefix": "SourceFileLoader",
		"body": ["SourceFileLoader(${1:fullname}, ${2:path})"]},
	"SourceLoader from the importlib.util module": {
		"description": "SourceLoader from the importlib.util module",
		"prefix": "SourceLoader",
		"body": ["SourceLoader"]},
	"SourcelessFileLoader from the importlib.util module": {
		"description": "SourcelessFileLoader from the importlib.util module",
		"prefix": "SourcelessFileLoader",
		"body": ["SourcelessFileLoader(${1:fullname}, ${2:path})"]},
	"WindowsRegistryFinder from the importlib.util module": {
		"description": "WindowsRegistryFinder from the importlib.util module",
		"prefix": "WindowsRegistryFinder",
		"body": ["WindowsRegistryFinder"]},
	"__import__() from the importlib.util module": {
		"description": "__import__() from the importlib.util module",
		"prefix": "__import__",
		"body": ["__import__(${1:name}, ${2:globals=None}, ${3:locals=None}, ${4:fromlist=}, ${5:})"]},
	"all_suffixes() from the importlib.util module": {
		"description": "all_suffixes() from the importlib.util module",
		"prefix": "all_suffixes",
		"body": ["all_suffixes(${1:})"]},
	"cache_from_source() from the importlib.util module": {
		"description": "cache_from_source() from the importlib.util module",
		"prefix": "cache_from_source",
		"body": ["cache_from_source(${1:path}, ${2:debug_override=None}, ${3:*}, ${4:optimization=None})"]},
	"decode_source() from the importlib.util module": {
		"description": "decode_source() from the importlib.util module",
		"prefix": "decode_source",
		"body": ["decode_source(${1:source_bytes})"]},
	"find_loader() from the importlib.util module": {
		"description": "find_loader() from the importlib.util module",
		"prefix": "find_loader",
		"body": ["find_loader(${1:name}, ${2:path=None})"]},
	"find_spec() from the importlib.util module": {
		"description": "find_spec() from the importlib.util module",
		"prefix": "find_spec",
		"body": ["find_spec(${1:name}, ${2:package=None})"]},
	"import_module() from the importlib.util module": {
		"description": "import_module() from the importlib.util module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:package=None})"]},
	"invalidate_caches() from the importlib.util module": {
		"description": "invalidate_caches() from the importlib.util module",
		"prefix": "invalidate_caches",
		"body": ["invalidate_caches(${1:})"]},
	"module_for_loader() from the importlib.util module": {
		"description": "module_for_loader() from the importlib.util module",
		"prefix": "module_for_loader",
		"body": ["module_for_loader()"]},
	"module_from_spec() from the importlib.util module": {
		"description": "module_from_spec() from the importlib.util module",
		"prefix": "module_from_spec",
		"body": ["module_from_spec(${1:spec})"]},
	"reload() from the importlib.util module": {
		"description": "reload() from the importlib.util module",
		"prefix": "reload",
		"body": ["reload(${1:module})"]},
	"resolve_name() from the importlib.util module": {
		"description": "resolve_name() from the importlib.util module",
		"prefix": "resolve_name",
		"body": ["resolve_name(${1:name}, ${2:package})"]},
	"set_loader() from the importlib.util module": {
		"description": "set_loader() from the importlib.util module",
		"prefix": "set_loader",
		"body": ["set_loader()"]},
	"set_package() from the importlib.util module": {
		"description": "set_package() from the importlib.util module",
		"prefix": "set_package",
		"body": ["set_package()"]},
	"source_from_cache() from the importlib.util module": {
		"description": "source_from_cache() from the importlib.util module",
		"prefix": "source_from_cache",
		"body": ["source_from_cache(${1:path})"]},
	"spec_from_file_location() from the importlib.util module": {
		"description": "spec_from_file_location() from the importlib.util module",
		"prefix": "spec_from_file_location",
		"body": ["spec_from_file_location(${1:name}, ${2:location}, ${3:*}, ${4:loader=None}, ${5:submodule_search_locations=None})"]},
	"spec_from_loader() from the importlib.util module": {
		"description": "spec_from_loader() from the importlib.util module",
		"prefix": "spec_from_loader",
		"body": ["spec_from_loader(${1:name,})"]},
// inspect completion
	"BoundArguments from the inspect module": {
		"description": "BoundArguments from the inspect module",
		"prefix": "BoundArguments",
		"body": ["BoundArguments"]},
	"Parameter from the inspect module": {
		"description": "Parameter from the inspect module",
		"prefix": "Parameter",
		"body": ["Parameter(${1:name}, ${2:kind}, ${3:*}, ${4:default=Parameter.empty}, ${5:annotation=Parameter.empty})"]},
	"Signature from the inspect module": {
		"description": "Signature from the inspect module",
		"prefix": "Signature",
		"body": ["Signature(${1:parameters=None}, ${2:*}, ${3:return_annotation=Signature.empty})"]},
	"cleandoc() from the inspect module": {
		"description": "cleandoc() from the inspect module",
		"prefix": "cleandoc",
		"body": ["cleandoc(${1:doc})"]},
	"currentframe() from the inspect module": {
		"description": "currentframe() from the inspect module",
		"prefix": "currentframe",
		"body": ["currentframe(${1:})"]},
	"formatargspec() from the inspect module": {
		"description": "formatargspec() from the inspect module",
		"prefix": "formatargspec",
		"body": ["formatargspec(${1:args[}, ${2:varargs}, ${3:varkw}, ${4:defaults}, ${5:kwonlyargs}, ${6:kwonlydefaults}, ${7:annotations[}, ${8:formatarg}, ${9:formatvarargs}, ${10:formatvarkw}, ${11:formatvalue}, ${12:formatreturns}, ${13:formatannotations]]})"]},
	"formatargvalues() from the inspect module": {
		"description": "formatargvalues() from the inspect module",
		"prefix": "formatargvalues",
		"body": ["formatargvalues(${1:args[}, ${2:varargs}, ${3:varkw}, ${4:locals}, ${5:formatarg}, ${6:formatvarargs}, ${7:formatvarkw}, ${8:formatvalue]})"]},
	"getargspec() from the inspect module": {
		"description": "getargspec() from the inspect module",
		"prefix": "getargspec",
		"body": ["getargspec(${1:func})"]},
	"getargvalues() from the inspect module": {
		"description": "getargvalues() from the inspect module",
		"prefix": "getargvalues",
		"body": ["getargvalues(${1:frame})"]},
	"getattr_static() from the inspect module": {
		"description": "getattr_static() from the inspect module",
		"prefix": "getattr_static",
		"body": ["getattr_static(${1:obj}, ${2:attr}, ${3:default=None})"]},
	"getcallargs() from the inspect module": {
		"description": "getcallargs() from the inspect module",
		"prefix": "getcallargs",
		"body": ["getcallargs(${1:func}, ${2:*args}, ${3:**kwds})"]},
	"getclasstree() from the inspect module": {
		"description": "getclasstree() from the inspect module",
		"prefix": "getclasstree",
		"body": ["getclasstree(${1:classes}, ${2:unique=False})"]},
	"getclosurevars() from the inspect module": {
		"description": "getclosurevars() from the inspect module",
		"prefix": "getclosurevars",
		"body": ["getclosurevars(${1:func})"]},
	"getcomments() from the inspect module": {
		"description": "getcomments() from the inspect module",
		"prefix": "getcomments",
		"body": ["getcomments(${1:object})"]},
	"getcoroutinelocals() from the inspect module": {
		"description": "getcoroutinelocals() from the inspect module",
		"prefix": "getcoroutinelocals",
		"body": ["getcoroutinelocals(${1:coroutine})"]},
	"getcoroutinestate() from the inspect module": {
		"description": "getcoroutinestate() from the inspect module",
		"prefix": "getcoroutinestate",
		"body": ["getcoroutinestate(${1:coroutine})"]},
	"getdoc() from the inspect module": {
		"description": "getdoc() from the inspect module",
		"prefix": "getdoc",
		"body": ["getdoc(${1:object})"]},
	"getfile() from the inspect module": {
		"description": "getfile() from the inspect module",
		"prefix": "getfile",
		"body": ["getfile(${1:object})"]},
	"getframeinfo() from the inspect module": {
		"description": "getframeinfo() from the inspect module",
		"prefix": "getframeinfo",
		"body": ["getframeinfo(${1:frame}, ${2:context=1})"]},
	"getfullargspec() from the inspect module": {
		"description": "getfullargspec() from the inspect module",
		"prefix": "getfullargspec",
		"body": ["getfullargspec(${1:func})"]},
	"getgeneratorlocals() from the inspect module": {
		"description": "getgeneratorlocals() from the inspect module",
		"prefix": "getgeneratorlocals",
		"body": ["getgeneratorlocals(${1:generator})"]},
	"getgeneratorstate() from the inspect module": {
		"description": "getgeneratorstate() from the inspect module",
		"prefix": "getgeneratorstate",
		"body": ["getgeneratorstate(${1:generator})"]},
	"getinnerframes() from the inspect module": {
		"description": "getinnerframes() from the inspect module",
		"prefix": "getinnerframes",
		"body": ["getinnerframes(${1:traceback}, ${2:context=1})"]},
	"getmembers() from the inspect module": {
		"description": "getmembers() from the inspect module",
		"prefix": "getmembers",
		"body": ["getmembers(${1:object[}, ${2:predicate]})"]},
	"getmodule() from the inspect module": {
		"description": "getmodule() from the inspect module",
		"prefix": "getmodule",
		"body": ["getmodule(${1:object})"]},
	"getmoduleinfo() from the inspect module": {
		"description": "getmoduleinfo() from the inspect module",
		"prefix": "getmoduleinfo",
		"body": ["getmoduleinfo(${1:path})"]},
	"getmodulename() from the inspect module": {
		"description": "getmodulename() from the inspect module",
		"prefix": "getmodulename",
		"body": ["getmodulename(${1:path})"]},
	"getmro() from the inspect module": {
		"description": "getmro() from the inspect module",
		"prefix": "getmro",
		"body": ["getmro(${1:cls})"]},
	"getouterframes() from the inspect module": {
		"description": "getouterframes() from the inspect module",
		"prefix": "getouterframes",
		"body": ["getouterframes(${1:frame}, ${2:context=1})"]},
	"getsource() from the inspect module": {
		"description": "getsource() from the inspect module",
		"prefix": "getsource",
		"body": ["getsource(${1:object})"]},
	"getsourcefile() from the inspect module": {
		"description": "getsourcefile() from the inspect module",
		"prefix": "getsourcefile",
		"body": ["getsourcefile(${1:object})"]},
	"getsourcelines() from the inspect module": {
		"description": "getsourcelines() from the inspect module",
		"prefix": "getsourcelines",
		"body": ["getsourcelines(${1:object})"]},
	"isabstract() from the inspect module": {
		"description": "isabstract() from the inspect module",
		"prefix": "isabstract",
		"body": ["isabstract(${1:object})"]},
	"isawaitable() from the inspect module": {
		"description": "isawaitable() from the inspect module",
		"prefix": "isawaitable",
		"body": ["isawaitable(${1:object})"]},
	"isbuiltin() from the inspect module": {
		"description": "isbuiltin() from the inspect module",
		"prefix": "isbuiltin",
		"body": ["isbuiltin(${1:object})"]},
	"isclass() from the inspect module": {
		"description": "isclass() from the inspect module",
		"prefix": "isclass",
		"body": ["isclass(${1:object})"]},
	"iscode() from the inspect module": {
		"description": "iscode() from the inspect module",
		"prefix": "iscode",
		"body": ["iscode(${1:object})"]},
	"iscoroutine() from the inspect module": {
		"description": "iscoroutine() from the inspect module",
		"prefix": "iscoroutine",
		"body": ["iscoroutine(${1:object})"]},
	"iscoroutinefunction() from the inspect module": {
		"description": "iscoroutinefunction() from the inspect module",
		"prefix": "iscoroutinefunction",
		"body": ["iscoroutinefunction(${1:object})"]},
	"isdatadescriptor() from the inspect module": {
		"description": "isdatadescriptor() from the inspect module",
		"prefix": "isdatadescriptor",
		"body": ["isdatadescriptor(${1:object})"]},
	"isframe() from the inspect module": {
		"description": "isframe() from the inspect module",
		"prefix": "isframe",
		"body": ["isframe(${1:object})"]},
	"isfunction() from the inspect module": {
		"description": "isfunction() from the inspect module",
		"prefix": "isfunction",
		"body": ["isfunction(${1:object})"]},
	"isgenerator() from the inspect module": {
		"description": "isgenerator() from the inspect module",
		"prefix": "isgenerator",
		"body": ["isgenerator(${1:object})"]},
	"isgeneratorfunction() from the inspect module": {
		"description": "isgeneratorfunction() from the inspect module",
		"prefix": "isgeneratorfunction",
		"body": ["isgeneratorfunction(${1:object})"]},
	"isgetsetdescriptor() from the inspect module": {
		"description": "isgetsetdescriptor() from the inspect module",
		"prefix": "isgetsetdescriptor",
		"body": ["isgetsetdescriptor(${1:object})"]},
	"ismemberdescriptor() from the inspect module": {
		"description": "ismemberdescriptor() from the inspect module",
		"prefix": "ismemberdescriptor",
		"body": ["ismemberdescriptor(${1:object})"]},
	"ismethod() from the inspect module": {
		"description": "ismethod() from the inspect module",
		"prefix": "ismethod",
		"body": ["ismethod(${1:object})"]},
	"ismethoddescriptor() from the inspect module": {
		"description": "ismethoddescriptor() from the inspect module",
		"prefix": "ismethoddescriptor",
		"body": ["ismethoddescriptor(${1:object})"]},
	"ismodule() from the inspect module": {
		"description": "ismodule() from the inspect module",
		"prefix": "ismodule",
		"body": ["ismodule(${1:object})"]},
	"isroutine() from the inspect module": {
		"description": "isroutine() from the inspect module",
		"prefix": "isroutine",
		"body": ["isroutine(${1:object})"]},
	"istraceback() from the inspect module": {
		"description": "istraceback() from the inspect module",
		"prefix": "istraceback",
		"body": ["istraceback(${1:object})"]},
	"signature() from the inspect module": {
		"description": "signature() from the inspect module",
		"prefix": "signature",
		"body": ["signature(${1:callable}, ${2:*}, ${3:follow_wrapped=True})"]},
	"stack() from the inspect module": {
		"description": "stack() from the inspect module",
		"prefix": "stack",
		"body": ["stack(${1:context=1})"]},
	"trace() from the inspect module": {
		"description": "trace() from the inspect module",
		"prefix": "trace",
		"body": ["trace(${1:context=1})"]},
	"unwrap() from the inspect module": {
		"description": "unwrap() from the inspect module",
		"prefix": "unwrap",
		"body": ["unwrap(${1:func,})"]},
// io completion
	"BlockingIOError from the io module": {
		"description": "BlockingIOError from the io module",
		"prefix": "BlockingIOError",
		"body": ["BlockingIOError"]},
	"BufferedIOBase from the io module": {
		"description": "BufferedIOBase from the io module",
		"prefix": "BufferedIOBase",
		"body": ["BufferedIOBase"]},
	"BufferedRWPair from the io module": {
		"description": "BufferedRWPair from the io module",
		"prefix": "BufferedRWPair",
		"body": ["BufferedRWPair(${1:reader}, ${2:writer}, ${3:buffer_size=DEFAULT_BUFFER_SIZE})"]},
	"BufferedRandom from the io module": {
		"description": "BufferedRandom from the io module",
		"prefix": "BufferedRandom",
		"body": ["BufferedRandom(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})"]},
	"BufferedReader from the io module": {
		"description": "BufferedReader from the io module",
		"prefix": "BufferedReader",
		"body": ["BufferedReader(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})"]},
	"BufferedWriter from the io module": {
		"description": "BufferedWriter from the io module",
		"prefix": "BufferedWriter",
		"body": ["BufferedWriter(${1:raw}, ${2:buffer_size=DEFAULT_BUFFER_SIZE})"]},
	"BytesIO from the io module": {
		"description": "BytesIO from the io module",
		"prefix": "BytesIO",
		"body": ["BytesIO(${1:[initial_bytes]})"]},
	"DEFAULT_BUFFER_SIZE from the io module": {
		"description": "DEFAULT_BUFFER_SIZE from the io module",
		"prefix": "DEFAULT_BUFFER_SIZE",
		"body": ["DEFAULT_BUFFER_SIZE"]},
	"FileIO from the io module": {
		"description": "FileIO from the io module",
		"prefix": "FileIO",
		"body": ["FileIO(${1:name}, ${2:mode='r'}, ${3:closefd=True}, ${4:opener=None})"]},
	"IOBase from the io module": {
		"description": "IOBase from the io module",
		"prefix": "IOBase",
		"body": ["IOBase"]},
	"IncrementalNewlineDecoder from the io module": {
		"description": "IncrementalNewlineDecoder from the io module",
		"prefix": "IncrementalNewlineDecoder",
		"body": ["IncrementalNewlineDecoder"]},
	"RawIOBase from the io module": {
		"description": "RawIOBase from the io module",
		"prefix": "RawIOBase",
		"body": ["RawIOBase"]},
	"StringIO from the io module": {
		"description": "StringIO from the io module",
		"prefix": "StringIO",
		"body": ["StringIO(${1:initial_value=''}, ${2:newline=' '})"]},
	"TextIOBase from the io module": {
		"description": "TextIOBase from the io module",
		"prefix": "TextIOBase",
		"body": ["TextIOBase"]},
	"TextIOWrapper from the io module": {
		"description": "TextIOWrapper from the io module",
		"prefix": "TextIOWrapper",
		"body": ["TextIOWrapper(${1:buffer}, ${2:encoding=None}, ${3:errors=None}, ${4:newline=None}, ${5:line_buffering=False}, ${6:write_through=False})"]},
	"UnsupportedOperation from the io module": {
		"description": "UnsupportedOperation from the io module",
		"prefix": "UnsupportedOperation",
		"body": ["UnsupportedOperation"]},
	"open() from the io module": {
		"description": "open() from the io module",
		"prefix": "open",
		"body": ["open(${1:file,})"]},
// ipaddress completion
	"AddressValueError from the ipaddress module": {
		"description": "AddressValueError from the ipaddress module",
		"prefix": "AddressValueError",
		"body": ["AddressValueError(${1:ValueError})"]},
	"IPv4Address from the ipaddress module": {
		"description": "IPv4Address from the ipaddress module",
		"prefix": "IPv4Address",
		"body": ["IPv4Address(${1:address})"]},
	"IPv4Interface from the ipaddress module": {
		"description": "IPv4Interface from the ipaddress module",
		"prefix": "IPv4Interface",
		"body": ["IPv4Interface(${1:address})"]},
	"IPv4Network from the ipaddress module": {
		"description": "IPv4Network from the ipaddress module",
		"prefix": "IPv4Network",
		"body": ["IPv4Network(${1:address}, ${2:strict=True})"]},
	"IPv6Address from the ipaddress module": {
		"description": "IPv6Address from the ipaddress module",
		"prefix": "IPv6Address",
		"body": ["IPv6Address(${1:address})"]},
	"IPv6Interface from the ipaddress module": {
		"description": "IPv6Interface from the ipaddress module",
		"prefix": "IPv6Interface",
		"body": ["IPv6Interface(${1:address})"]},
	"IPv6Network from the ipaddress module": {
		"description": "IPv6Network from the ipaddress module",
		"prefix": "IPv6Network",
		"body": ["IPv6Network(${1:address}, ${2:strict=True})"]},
	"NetmaskValueError from the ipaddress module": {
		"description": "NetmaskValueError from the ipaddress module",
		"prefix": "NetmaskValueError",
		"body": ["NetmaskValueError(${1:ValueError})"]},
	"collapse_addresses() from the ipaddress module": {
		"description": "collapse_addresses() from the ipaddress module",
		"prefix": "collapse_addresses",
		"body": ["collapse_addresses(${1:addresses})"]},
	"get_mixed_type_key() from the ipaddress module": {
		"description": "get_mixed_type_key() from the ipaddress module",
		"prefix": "get_mixed_type_key",
		"body": ["get_mixed_type_key(${1:obj})"]},
	"ip_address() from the ipaddress module": {
		"description": "ip_address() from the ipaddress module",
		"prefix": "ip_address",
		"body": ["ip_address(${1:address})"]},
	"ip_interface() from the ipaddress module": {
		"description": "ip_interface() from the ipaddress module",
		"prefix": "ip_interface",
		"body": ["ip_interface(${1:address})"]},
	"ip_network() from the ipaddress module": {
		"description": "ip_network() from the ipaddress module",
		"prefix": "ip_network",
		"body": ["ip_network(${1:address}, ${2:strict=True})"]},
	"summarize_address_range() from the ipaddress module": {
		"description": "summarize_address_range() from the ipaddress module",
		"prefix": "summarize_address_range",
		"body": ["summarize_address_range(${1:first}, ${2:last})"]},
	"v4_int_to_packed() from the ipaddress module": {
		"description": "v4_int_to_packed() from the ipaddress module",
		"prefix": "v4_int_to_packed",
		"body": ["v4_int_to_packed(${1:address})"]},
	"v6_int_to_packed() from the ipaddress module": {
		"description": "v6_int_to_packed() from the ipaddress module",
		"prefix": "v6_int_to_packed",
		"body": ["v6_int_to_packed(${1:address})"]},
// itertools completion
	"accumulate() from the itertools module": {
		"description": "accumulate() from the itertools module",
		"prefix": "accumulate",
		"body": ["accumulate(${1:iterable[}, ${2:func]})"]},
	"chain() from the itertools module": {
		"description": "chain() from the itertools module",
		"prefix": "chain",
		"body": ["chain(${1:*iterables})"]},
	"combinations() from the itertools module": {
		"description": "combinations() from the itertools module",
		"prefix": "combinations",
		"body": ["combinations(${1:iterable}, ${2:r})"]},
	"combinations_with_replacement() from the itertools module": {
		"description": "combinations_with_replacement() from the itertools module",
		"prefix": "combinations_with_replacement",
		"body": ["combinations_with_replacement(${1:iterable}, ${2:r})"]},
	"compress() from the itertools module": {
		"description": "compress() from the itertools module",
		"prefix": "compress",
		"body": ["compress(${1:data}, ${2:selectors})"]},
	"count() from the itertools module": {
		"description": "count() from the itertools module",
		"prefix": "count",
		"body": ["count(${1:start=0}, ${2:step=1})"]},
	"cycle() from the itertools module": {
		"description": "cycle() from the itertools module",
		"prefix": "cycle",
		"body": ["cycle(${1:iterable})"]},
	"dropwhile() from the itertools module": {
		"description": "dropwhile() from the itertools module",
		"prefix": "dropwhile",
		"body": ["dropwhile(${1:predicate}, ${2:iterable})"]},
	"filterfalse() from the itertools module": {
		"description": "filterfalse() from the itertools module",
		"prefix": "filterfalse",
		"body": ["filterfalse(${1:predicate}, ${2:iterable})"]},
	"from_iterable() from the itertools module": {
		"description": "from_iterable() from the itertools module",
		"prefix": "from_iterable",
		"body": ["from_iterable(${1:iterable})"]},
	"groupby() from the itertools module": {
		"description": "groupby() from the itertools module",
		"prefix": "groupby",
		"body": ["groupby(${1:iterable}, ${2:key=None})"]},
	"islice() from the itertools module": {
		"description": "islice() from the itertools module",
		"prefix": "islice",
		"body": ["islice(${1:iterable}, ${2:start}, ${3:stop[}, ${4:step]})"]},
	"islice() from the itertools module": {
		"description": "islice() from the itertools module",
		"prefix": "islice",
		"body": ["islice(${1:iterable}, ${2:stop})"]},
	"permutations() from the itertools module": {
		"description": "permutations() from the itertools module",
		"prefix": "permutations",
		"body": ["permutations(${1:iterable}, ${2:r=None})"]},
	"product() from the itertools module": {
		"description": "product() from the itertools module",
		"prefix": "product",
		"body": ["product(${1:*iterables}, ${2:repeat=1})"]},
	"repeat() from the itertools module": {
		"description": "repeat() from the itertools module",
		"prefix": "repeat",
		"body": ["repeat(${1:object[}, ${2:times]})"]},
	"starmap() from the itertools module": {
		"description": "starmap() from the itertools module",
		"prefix": "starmap",
		"body": ["starmap(${1:function}, ${2:iterable})"]},
	"takewhile() from the itertools module": {
		"description": "takewhile() from the itertools module",
		"prefix": "takewhile",
		"body": ["takewhile(${1:predicate}, ${2:iterable})"]},
	"tee() from the itertools module": {
		"description": "tee() from the itertools module",
		"prefix": "tee",
		"body": ["tee(${1:iterable}, ${2:n=2})"]},
	"zip_longest() from the itertools module": {
		"description": "zip_longest() from the itertools module",
		"prefix": "zip_longest",
		"body": ["zip_longest(${1:*iterables,})"]},
// json completion
	"JSONDecodeError from the json module": {
		"description": "JSONDecodeError from the json module",
		"prefix": "JSONDecodeError",
		"body": ["JSONDecodeError(${1:msg}, ${2:doc}, ${3:pos}, ${4:end=None})"]},
	"JSONDecoder from the json module": {
		"description": "JSONDecoder from the json module",
		"prefix": "JSONDecoder",
		"body": ["JSONDecoder(${1:object_hook=None}, ${2:parse_float=None}, ${3:parse_int=None}, ${4:parse_constant=None}, ${5:strict=True}, ${6:object_pairs_hook=None})"]},
	"JSONEncoder from the json module": {
		"description": "JSONEncoder from the json module",
		"prefix": "JSONEncoder",
		"body": ["JSONEncoder(${1:skipkeys=False}, ${2:ensure_ascii=True}, ${3:check_circular=True}, ${4:allow_nan=True}, ${5:sort_keys=False}, ${6:indent=None}, ${7:separators=None}, ${8:default=None})"]},
	"dump() from the json module": {
		"description": "dump() from the json module",
		"prefix": "dump",
		"body": ["dump(${1:obj}, ${2:fp}, ${3:skipkeys=False}, ${4:ensure_ascii=True}, ${5:check_circular=True}, ${6:allow_nan=True}, ${7:cls=None}, ${8:indent=None}, ${9:separators=None}, ${10:default=None}, ${11:sort_keys=False}, ${12:**kw})"]},
	"dumps() from the json module": {
		"description": "dumps() from the json module",
		"prefix": "dumps",
		"body": ["dumps(${1:obj}, ${2:skipkeys=False}, ${3:ensure_ascii=True}, ${4:check_circular=True}, ${5:allow_nan=True}, ${6:cls=None}, ${7:indent=None}, ${8:separators=None}, ${9:default=None}, ${10:sort_keys=False}, ${11:**kw})"]},
	"load() from the json module": {
		"description": "load() from the json module",
		"prefix": "load",
		"body": ["load(${1:fp}, ${2:cls=None}, ${3:object_hook=None}, ${4:parse_float=None}, ${5:parse_int=None}, ${6:parse_constant=None}, ${7:object_pairs_hook=None}, ${8:**kw})"]},
	"loads() from the json module": {
		"description": "loads() from the json module",
		"prefix": "loads",
		"body": ["loads(${1:s,})"]},
// json.tool completion
	"JSONDecodeError from the json.tool module": {
		"description": "JSONDecodeError from the json.tool module",
		"prefix": "JSONDecodeError",
		"body": ["JSONDecodeError(${1:msg}, ${2:doc}, ${3:pos}, ${4:end=None})"]},
	"JSONDecoder from the json.tool module": {
		"description": "JSONDecoder from the json.tool module",
		"prefix": "JSONDecoder",
		"body": ["JSONDecoder(${1:object_hook=None}, ${2:parse_float=None}, ${3:parse_int=None}, ${4:parse_constant=None}, ${5:strict=True}, ${6:object_pairs_hook=None})"]},
	"JSONEncoder from the json.tool module": {
		"description": "JSONEncoder from the json.tool module",
		"prefix": "JSONEncoder",
		"body": ["JSONEncoder(${1:skipkeys=False}, ${2:ensure_ascii=True}, ${3:check_circular=True}, ${4:allow_nan=True}, ${5:sort_keys=False}, ${6:indent=None}, ${7:separators=None}, ${8:default=None})"]},
	"dump() from the json.tool module": {
		"description": "dump() from the json.tool module",
		"prefix": "dump",
		"body": ["dump(${1:obj}, ${2:fp}, ${3:skipkeys=False}, ${4:ensure_ascii=True}, ${5:check_circular=True}, ${6:allow_nan=True}, ${7:cls=None}, ${8:indent=None}, ${9:separators=None}, ${10:default=None}, ${11:sort_keys=False}, ${12:**kw})"]},
	"dumps() from the json.tool module": {
		"description": "dumps() from the json.tool module",
		"prefix": "dumps",
		"body": ["dumps(${1:obj}, ${2:skipkeys=False}, ${3:ensure_ascii=True}, ${4:check_circular=True}, ${5:allow_nan=True}, ${6:cls=None}, ${7:indent=None}, ${8:separators=None}, ${9:default=None}, ${10:sort_keys=False}, ${11:**kw})"]},
	"load() from the json.tool module": {
		"description": "load() from the json.tool module",
		"prefix": "load",
		"body": ["load(${1:fp}, ${2:cls=None}, ${3:object_hook=None}, ${4:parse_float=None}, ${5:parse_int=None}, ${6:parse_constant=None}, ${7:object_pairs_hook=None}, ${8:**kw})"]},
	"loads() from the json.tool module": {
		"description": "loads() from the json.tool module",
		"prefix": "loads",
		"body": ["loads(${1:s,})"]},
// keyword completion
	"iskeyword() from the keyword module": {
		"description": "iskeyword() from the keyword module",
		"prefix": "iskeyword",
		"body": ["iskeyword(${1:s})"]},
	"kwlist() from the keyword module": {
		"description": "kwlist() from the keyword module",
		"prefix": "kwlist",
		"body": ["kwlist()"]},
// lib2to3 completion
	"iskeyword() from the lib2to3 module": {
		"description": "iskeyword() from the lib2to3 module",
		"prefix": "iskeyword",
		"body": ["iskeyword(${1:s})"]},
	"kwlist() from the lib2to3 module": {
		"description": "kwlist() from the lib2to3 module",
		"prefix": "kwlist",
		"body": ["kwlist()"]},
// linecache completion
	"checkcache() from the linecache module": {
		"description": "checkcache() from the linecache module",
		"prefix": "checkcache",
		"body": ["checkcache(${1:filename=None})"]},
	"clearcache() from the linecache module": {
		"description": "clearcache() from the linecache module",
		"prefix": "clearcache",
		"body": ["clearcache(${1:})"]},
	"getline() from the linecache module": {
		"description": "getline() from the linecache module",
		"prefix": "getline",
		"body": ["getline(${1:filename}, ${2:lineno}, ${3:module_globals=None})"]},
	"lazycache() from the linecache module": {
		"description": "lazycache() from the linecache module",
		"prefix": "lazycache",
		"body": ["lazycache(${1:filename,})"]},
// locale completion
	"ALT_DIGITS from the locale module": {
		"description": "ALT_DIGITS from the locale module",
		"prefix": "ALT_DIGITS",
		"body": ["ALT_DIGITS"]},
	"CHAR_MAX from the locale module": {
		"description": "CHAR_MAX from the locale module",
		"prefix": "CHAR_MAX",
		"body": ["CHAR_MAX"]},
	"CODESET from the locale module": {
		"description": "CODESET from the locale module",
		"prefix": "CODESET",
		"body": ["CODESET"]},
	"CRNCYSTR from the locale module": {
		"description": "CRNCYSTR from the locale module",
		"prefix": "CRNCYSTR",
		"body": ["CRNCYSTR"]},
	"D_FMT from the locale module": {
		"description": "D_FMT from the locale module",
		"prefix": "D_FMT",
		"body": ["D_FMT"]},
	"D_T_FMT from the locale module": {
		"description": "D_T_FMT from the locale module",
		"prefix": "D_T_FMT",
		"body": ["D_T_FMT"]},
	"ERA from the locale module": {
		"description": "ERA from the locale module",
		"prefix": "ERA",
		"body": ["ERA"]},
	"ERA_D_FMT from the locale module": {
		"description": "ERA_D_FMT from the locale module",
		"prefix": "ERA_D_FMT",
		"body": ["ERA_D_FMT"]},
	"ERA_D_T_FMT from the locale module": {
		"description": "ERA_D_T_FMT from the locale module",
		"prefix": "ERA_D_T_FMT",
		"body": ["ERA_D_T_FMT"]},
	"ERA_T_FMT from the locale module": {
		"description": "ERA_T_FMT from the locale module",
		"prefix": "ERA_T_FMT",
		"body": ["ERA_T_FMT"]},
	"Error from the locale module": {
		"description": "Error from the locale module",
		"prefix": "Error",
		"body": ["Error"]},
	"LC_ALL from the locale module": {
		"description": "LC_ALL from the locale module",
		"prefix": "LC_ALL",
		"body": ["LC_ALL"]},
	"LC_COLLATE from the locale module": {
		"description": "LC_COLLATE from the locale module",
		"prefix": "LC_COLLATE",
		"body": ["LC_COLLATE"]},
	"LC_CTYPE from the locale module": {
		"description": "LC_CTYPE from the locale module",
		"prefix": "LC_CTYPE",
		"body": ["LC_CTYPE"]},
	"LC_MESSAGES from the locale module": {
		"description": "LC_MESSAGES from the locale module",
		"prefix": "LC_MESSAGES",
		"body": ["LC_MESSAGES"]},
	"LC_MONETARY from the locale module": {
		"description": "LC_MONETARY from the locale module",
		"prefix": "LC_MONETARY",
		"body": ["LC_MONETARY"]},
	"LC_NUMERIC from the locale module": {
		"description": "LC_NUMERIC from the locale module",
		"prefix": "LC_NUMERIC",
		"body": ["LC_NUMERIC"]},
	"LC_TIME from the locale module": {
		"description": "LC_TIME from the locale module",
		"prefix": "LC_TIME",
		"body": ["LC_TIME"]},
	"NOEXPR from the locale module": {
		"description": "NOEXPR from the locale module",
		"prefix": "NOEXPR",
		"body": ["NOEXPR"]},
	"RADIXCHAR from the locale module": {
		"description": "RADIXCHAR from the locale module",
		"prefix": "RADIXCHAR",
		"body": ["RADIXCHAR"]},
	"THOUSEP from the locale module": {
		"description": "THOUSEP from the locale module",
		"prefix": "THOUSEP",
		"body": ["THOUSEP"]},
	"T_FMT from the locale module": {
		"description": "T_FMT from the locale module",
		"prefix": "T_FMT",
		"body": ["T_FMT"]},
	"T_FMT_AMPM from the locale module": {
		"description": "T_FMT_AMPM from the locale module",
		"prefix": "T_FMT_AMPM",
		"body": ["T_FMT_AMPM"]},
	"YESEXPR from the locale module": {
		"description": "YESEXPR from the locale module",
		"prefix": "YESEXPR",
		"body": ["YESEXPR"]},
	"atof() from the locale module": {
		"description": "atof() from the locale module",
		"prefix": "atof",
		"body": ["atof(${1:string})"]},
	"atoi() from the locale module": {
		"description": "atoi() from the locale module",
		"prefix": "atoi",
		"body": ["atoi(${1:string})"]},
	"currency() from the locale module": {
		"description": "currency() from the locale module",
		"prefix": "currency",
		"body": ["currency(${1:val}, ${2:symbol=True}, ${3:grouping=False}, ${4:international=False})"]},
	"delocalize() from the locale module": {
		"description": "delocalize() from the locale module",
		"prefix": "delocalize",
		"body": ["delocalize(${1:string})"]},
	"format() from the locale module": {
		"description": "format() from the locale module",
		"prefix": "format",
		"body": ["format(${0:format}, ${2:val}, ${3:grouping=False}, ${4:monetary=False})"]},
	"format_string() from the locale module": {
		"description": "format_string() from the locale module",
		"prefix": "format_string",
		"body": ["format_string(${1:format}, ${2:val}, ${3:grouping=False})"]},
	"getdefaultlocale() from the locale module": {
		"description": "getdefaultlocale() from the locale module",
		"prefix": "getdefaultlocale",
		"body": ["getdefaultlocale(${1:[envvars]})"]},
	"getlocale() from the locale module": {
		"description": "getlocale() from the locale module",
		"prefix": "getlocale",
		"body": ["getlocale(${1:category=LC_CTYPE})"]},
	"getpreferredencoding() from the locale module": {
		"description": "getpreferredencoding() from the locale module",
		"prefix": "getpreferredencoding",
		"body": ["getpreferredencoding(${1:do_setlocale=True})"]},
	"localeconv() from the locale module": {
		"description": "localeconv() from the locale module",
		"prefix": "localeconv",
		"body": ["localeconv(${1:})"]},
	"nl_langinfo() from the locale module": {
		"description": "nl_langinfo() from the locale module",
		"prefix": "nl_langinfo",
		"body": ["nl_langinfo(${1:option})"]},
	"normalize() from the locale module": {
		"description": "normalize() from the locale module",
		"prefix": "normalize",
		"body": ["normalize(${1:localename})"]},
	"resetlocale() from the locale module": {
		"description": "resetlocale() from the locale module",
		"prefix": "resetlocale",
		"body": ["resetlocale(${1:category=LC_ALL})"]},
	"setlocale() from the locale module": {
		"description": "setlocale() from the locale module",
		"prefix": "setlocale",
		"body": ["setlocale(${1:category}, ${2:locale=None})"]},
	"str() from the locale module": {
		"description": "str() from the locale module",
		"prefix": "str",
		"body": ["str(${1:float})"]},
	"strcoll() from the locale module": {
		"description": "strcoll() from the locale module",
		"prefix": "strcoll",
		"body": ["strcoll(${1:string1}, ${2:string2})"]},
	"strxfrm() from the locale module": {
		"description": "strxfrm() from the locale module",
		"prefix": "strxfrm",
		"body": ["strxfrm(${1:string})"]},
// logging completion
	"Filter from the logging module": {
		"description": "Filter from the logging module",
		"prefix": "Filter",
		"body": ["Filter(${1:name=''})"]},
	"Formatter from the logging module": {
		"description": "Formatter from the logging module",
		"prefix": "Formatter",
		"body": ["Formatter(${1:fmt=None}, ${2:datefmt=None}, ${3:style='%'})"]},
	"LogRecord from the logging module": {
		"description": "LogRecord from the logging module",
		"prefix": "LogRecord",
		"body": ["LogRecord(${1:name}, ${2:level}, ${3:pathname}, ${4:lineno}, ${5:msg}, ${6:args}, ${7:exc_info}, ${8:func=None}, ${9:sinfo=None})"]},
	"Logger from the logging module": {
		"description": "Logger from the logging module",
		"prefix": "Logger",
		"body": ["Logger"]},
	"LoggerAdapter from the logging module": {
		"description": "LoggerAdapter from the logging module",
		"prefix": "LoggerAdapter",
		"body": ["LoggerAdapter(${1:logger}, ${2:extra})"]},
	"__init__() from the logging module": {
		"description": "__init__() from the logging module",
		"prefix": "__init__",
		"body": ["__init__(${1:level=NOTSET})"]},
	"acquire() from the logging module": {
		"description": "acquire() from the logging module",
		"prefix": "acquire",
		"body": ["acquire(${1:})"]},
	"addFilter() from the logging module": {
		"description": "addFilter() from the logging module",
		"prefix": "addFilter",
		"body": ["addFilter(${1:filt})"]},
	"addHandler() from the logging module": {
		"description": "addHandler() from the logging module",
		"prefix": "addHandler",
		"body": ["addHandler(${1:hdlr})"]},
	"addLevelName() from the logging module": {
		"description": "addLevelName() from the logging module",
		"prefix": "addLevelName",
		"body": ["addLevelName(${1:lvl}, ${2:levelName})"]},
	"basicConfig() from the logging module": {
		"description": "basicConfig() from the logging module",
		"prefix": "basicConfig",
		"body": ["basicConfig(${1:**kwargs})"]},
	"captureWarnings() from the logging module": {
		"description": "captureWarnings() from the logging module",
		"prefix": "captureWarnings",
		"body": ["captureWarnings(${1:capture})"]},
	"close() from the logging module": {
		"description": "close() from the logging module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"createLock() from the logging module": {
		"description": "createLock() from the logging module",
		"prefix": "createLock",
		"body": ["createLock(${1:})"]},
	"critical() from the logging module": {
		"description": "critical() from the logging module",
		"prefix": "critical",
		"body": ["critical(${1:msg}, ${2:*args}, ${3:**kwargs})"]},
	"debug() from the logging module": {
		"description": "debug() from the logging module",
		"prefix": "debug",
		"body": ["debug(${1:msg}, ${2:*args}, ${3:**kwargs})"]},
	"disable() from the logging module": {
		"description": "disable() from the logging module",
		"prefix": "disable",
		"body": ["disable(${1:lvl})"]},
	"emit() from the logging module": {
		"description": "emit() from the logging module",
		"prefix": "emit",
		"body": ["emit(${1:record})"]},
	"error() from the logging module": {
		"description": "error() from the logging module",
		"prefix": "error",
		"body": ["error(${1:msg}, ${2:*args}, ${3:**kwargs})"]},
	"exception() from the logging module": {
		"description": "exception() from the logging module",
		"prefix": "exception",
		"body": ["exception(${1:msg}, ${2:*args}, ${3:**kwargs})"]},
	"filter() from the logging module": {
		"description": "filter() from the logging module",
		"prefix": "filter",
		"body": ["filter(${1:record})"]},
	"findCaller() from the logging module": {
		"description": "findCaller() from the logging module",
		"prefix": "findCaller",
		"body": ["findCaller(${1:stack_info=False})"]},
	"flush() from the logging module": {
		"description": "flush() from the logging module",
		"prefix": "flush",
		"body": ["flush(${1:})"]},
	"format() from the logging module": {
		"description": "format() from the logging module",
		"prefix": "format",
		"body": ["format(${1:record})"]},
	"getChild() from the logging module": {
		"description": "getChild() from the logging module",
		"prefix": "getChild",
		"body": ["getChild(${1:suffix})"]},
	"getEffectiveLevel() from the logging module": {
		"description": "getEffectiveLevel() from the logging module",
		"prefix": "getEffectiveLevel",
		"body": ["getEffectiveLevel(${1:})"]},
	"getLevelName() from the logging module": {
		"description": "getLevelName() from the logging module",
		"prefix": "getLevelName",
		"body": ["getLevelName(${1:lvl})"]},
	"getLogRecordFactory() from the logging module": {
		"description": "getLogRecordFactory() from the logging module",
		"prefix": "getLogRecordFactory",
		"body": ["getLogRecordFactory(${1:})"]},
	"getLogger() from the logging module": {
		"description": "getLogger() from the logging module",
		"prefix": "getLogger",
		"body": ["getLogger(${1:name=None})"]},
	"getLoggerClass() from the logging module": {
		"description": "getLoggerClass() from the logging module",
		"prefix": "getLoggerClass",
		"body": ["getLoggerClass(${1:})"]},
	"handle() from the logging module": {
		"description": "handle() from the logging module",
		"prefix": "handle",
		"body": ["handle(${1:record})"]},
	"handleError() from the logging module": {
		"description": "handleError() from the logging module",
		"prefix": "handleError",
		"body": ["handleError(${1:record})"]},
	"hasHandlers() from the logging module": {
		"description": "hasHandlers() from the logging module",
		"prefix": "hasHandlers",
		"body": ["hasHandlers(${1:})"]},
	"info() from the logging module": {
		"description": "info() from the logging module",
		"prefix": "info",
		"body": ["info(${1:msg}, ${2:*args}, ${3:**kwargs})"]},
	"isEnabledFor() from the logging module": {
		"description": "isEnabledFor() from the logging module",
		"prefix": "isEnabledFor",
		"body": ["isEnabledFor(${1:lvl})"]},
	"lastResort() from the logging module": {
		"description": "lastResort() from the logging module",
		"prefix": "lastResort",
		"body": ["lastResort()"]},
	"log() from the logging module": {
		"description": "log() from the logging module",
		"prefix": "log",
		"body": ["log(${1:level}, ${2:msg}, ${3:*args}, ${4:**kwargs})"]},
	"log() from the logging module": {
		"description": "log() from the logging module",
		"prefix": "log",
		"body": ["log(${1:lvl}, ${2:msg}, ${3:*args}, ${4:**kwargs})"]},
	"makeLogRecord() from the logging module": {
		"description": "makeLogRecord() from the logging module",
		"prefix": "makeLogRecord",
		"body": ["makeLogRecord(${1:attrdict})"]},
	"makeRecord() from the logging module": {
		"description": "makeRecord() from the logging module",
		"prefix": "makeRecord",
		"body": ["makeRecord(${1:name}, ${2:lvl}, ${3:fn}, ${4:lno}, ${5:msg}, ${6:args}, ${7:exc_info}, ${8:func=None}, ${9:extra=None}, ${10:sinfo=None})"]},
	"propagate() from the logging module": {
		"description": "propagate() from the logging module",
		"prefix": "propagate",
		"body": ["propagate()"]},
	"release() from the logging module": {
		"description": "release() from the logging module",
		"prefix": "release",
		"body": ["release(${1:})"]},
	"removeFilter() from the logging module": {
		"description": "removeFilter() from the logging module",
		"prefix": "removeFilter",
		"body": ["removeFilter(${1:filt})"]},
	"removeHandler() from the logging module": {
		"description": "removeHandler() from the logging module",
		"prefix": "removeHandler",
		"body": ["removeHandler(${1:hdlr})"]},
	"setFormatter() from the logging module": {
		"description": "setFormatter() from the logging module",
		"prefix": "setFormatter",
		"body": ["setFormatter(${1:form})"]},
	"setLevel() from the logging module": {
		"description": "setLevel() from the logging module",
		"prefix": "setLevel",
		"body": ["setLevel(${1:lvl})"]},
	"setLogRecordFactory() from the logging module": {
		"description": "setLogRecordFactory() from the logging module",
		"prefix": "setLogRecordFactory",
		"body": ["setLogRecordFactory(${1:factory})"]},
	"setLoggerClass() from the logging module": {
		"description": "setLoggerClass() from the logging module",
		"prefix": "setLoggerClass",
		"body": ["setLoggerClass(${1:klass})"]},
	"shutdown() from the logging module": {
		"description": "shutdown() from the logging module",
		"prefix": "shutdown",
		"body": ["shutdown(${1:})"]},
	"warning() from the logging module": {
		"description": "warning() from the logging module",
		"prefix": "warning",
		"body": ["warning(${1:msg,})"]},
// logging.config completion
	"dictConfig() from the logging.config module": {
		"description": "dictConfig() from the logging.config module",
		"prefix": "dictConfig",
		"body": ["dictConfig(${1:config})"]},
	"fileConfig() from the logging.config module": {
		"description": "fileConfig() from the logging.config module",
		"prefix": "fileConfig",
		"body": ["fileConfig(${1:fname}, ${2:defaults=None}, ${3:disable_existing_loggers=True})"]},
	"listen() from the logging.config module": {
		"description": "listen() from the logging.config module",
		"prefix": "listen",
		"body": ["listen(${1:port=DEFAULT_LOGGING_CONFIG_PORT}, ${2:verify=None})"]},
	"stopListening() from the logging.config module": {
		"description": "stopListening() from the logging.config module",
		"prefix": "stopListening",
		"body": ["stopListening(${1:})"]},
// logging.handlers completion
	"BaseRotatingHandler from the logging.handlers module": {
		"description": "BaseRotatingHandler from the logging.handlers module",
		"prefix": "BaseRotatingHandler",
		"body": ["BaseRotatingHandler(${1:filename}, ${2:mode}, ${3:encoding=None}, ${4:delay=False})"]},
	"BufferingHandler from the logging.handlers module": {
		"description": "BufferingHandler from the logging.handlers module",
		"prefix": "BufferingHandler",
		"body": ["BufferingHandler(${1:capacity})"]},
	"DatagramHandler from the logging.handlers module": {
		"description": "DatagramHandler from the logging.handlers module",
		"prefix": "DatagramHandler",
		"body": ["DatagramHandler(${1:host}, ${2:port})"]},
	"FileHandler from the logging.handlers module": {
		"description": "FileHandler from the logging.handlers module",
		"prefix": "FileHandler",
		"body": ["FileHandler(${1:filename}, ${2:mode='a'}, ${3:encoding=None}, ${4:delay=False})"]},
	"HTTPHandler from the logging.handlers module": {
		"description": "HTTPHandler from the logging.handlers module",
		"prefix": "HTTPHandler",
		"body": ["HTTPHandler(${1:host}, ${2:url}, ${3:method='GET'}, ${4:secure=False}, ${5:credentials=None}, ${6:context=None})"]},
	"MemoryHandler from the logging.handlers module": {
		"description": "MemoryHandler from the logging.handlers module",
		"prefix": "MemoryHandler",
		"body": ["MemoryHandler(${1:capacity}, ${2:flushLevel=ERROR}, ${3:target=None})"]},
	"NTEventLogHandler from the logging.handlers module": {
		"description": "NTEventLogHandler from the logging.handlers module",
		"prefix": "NTEventLogHandler",
		"body": ["NTEventLogHandler(${1:appname}, ${2:dllname=None}, ${3:logtype='Application'})"]},
	"NullHandler from the logging.handlers module": {
		"description": "NullHandler from the logging.handlers module",
		"prefix": "NullHandler",
		"body": ["NullHandler"]},
	"QueueHandler from the logging.handlers module": {
		"description": "QueueHandler from the logging.handlers module",
		"prefix": "QueueHandler",
		"body": ["QueueHandler(${1:queue})"]},
	"QueueListener from the logging.handlers module": {
		"description": "QueueListener from the logging.handlers module",
		"prefix": "QueueListener",
		"body": ["QueueListener(${1:queue}, ${2:*handlers}, ${3:respect_handler_level=False})"]},
	"RotatingFileHandler from the logging.handlers module": {
		"description": "RotatingFileHandler from the logging.handlers module",
		"prefix": "RotatingFileHandler",
		"body": ["RotatingFileHandler(${1:filename}, ${2:mode='a'}, ${3:maxBytes=0}, ${4:backupCount=0}, ${5:encoding=None}, ${6:delay=0})"]},
	"SMTPHandler from the logging.handlers module": {
		"description": "SMTPHandler from the logging.handlers module",
		"prefix": "SMTPHandler",
		"body": ["SMTPHandler(${1:mailhost}, ${2:fromaddr}, ${3:toaddrs}, ${4:subject}, ${5:credentials=None}, ${6:secure=None}, ${7:timeout=1.0})"]},
	"SocketHandler from the logging.handlers module": {
		"description": "SocketHandler from the logging.handlers module",
		"prefix": "SocketHandler",
		"body": ["SocketHandler(${1:host}, ${2:port})"]},
	"StreamHandler from the logging.handlers module": {
		"description": "StreamHandler from the logging.handlers module",
		"prefix": "StreamHandler",
		"body": ["StreamHandler(${1:stream=None})"]},
	"SysLogHandler from the logging.handlers module": {
		"description": "SysLogHandler from the logging.handlers module",
		"prefix": "SysLogHandler",
		"body": ["SysLogHandler(${1:address=}, ${2:'localhost'}, ${3:SYSLOG_UDP_PORT})"]},
	"TimedRotatingFileHandler from the logging.handlers module": {
		"description": "TimedRotatingFileHandler from the logging.handlers module",
		"prefix": "TimedRotatingFileHandler",
		"body": ["TimedRotatingFileHandler(${1:filename}, ${2:when='h'}, ${3:interval=1}, ${4:backupCount=0}, ${5:encoding=None}, ${6:delay=False}, ${7:utc=False}, ${8:atTime=None})"]},
	"WatchedFileHandler from the logging.handlers module": {
		"description": "WatchedFileHandler from the logging.handlers module",
		"prefix": "WatchedFileHandler",
		"body": ["WatchedFileHandler(${1:filename[,})"]},
// lzma completion
	"LZMACompressor from the lzma module": {
		"description": "LZMACompressor from the lzma module",
		"prefix": "LZMACompressor",
		"body": ["LZMACompressor(${1:format=FORMAT_XZ}, ${2:check=-1}, ${3:preset=None}, ${4:filters=None})"]},
	"LZMADecompressor from the lzma module": {
		"description": "LZMADecompressor from the lzma module",
		"prefix": "LZMADecompressor",
		"body": ["LZMADecompressor(${1:format=FORMAT_AUTO}, ${2:memlimit=None}, ${3:filters=None})"]},
	"LZMAError from the lzma module": {
		"description": "LZMAError from the lzma module",
		"prefix": "LZMAError",
		"body": ["LZMAError"]},
	"LZMAFile from the lzma module": {
		"description": "LZMAFile from the lzma module",
		"prefix": "LZMAFile",
		"body": ["LZMAFile(${1:filename=None}, ${2:mode=\"r\"}, ${3:*}, ${4:format=None}, ${5:check=-1}, ${6:preset=None}, ${7:filters=None})"]},
	"compress() from the lzma module": {
		"description": "compress() from the lzma module",
		"prefix": "compress",
		"body": ["compress(${1:data}, ${2:format=FORMAT_XZ}, ${3:check=-1}, ${4:preset=None}, ${5:filters=None})"]},
	"decompress() from the lzma module": {
		"description": "decompress() from the lzma module",
		"prefix": "decompress",
		"body": ["decompress(${1:data}, ${2:format=FORMAT_AUTO}, ${3:memlimit=None}, ${4:filters=None})"]},
	"is_check_supported() from the lzma module": {
		"description": "is_check_supported() from the lzma module",
		"prefix": "is_check_supported",
		"body": ["is_check_supported(${1:check})"]},
	"open() from the lzma module": {
		"description": "open() from the lzma module",
		"prefix": "open",
		"body": ["open(${1:filename,})"]},
// mailbox completion
	"Babyl from the mailbox module": {
		"description": "Babyl from the mailbox module",
		"prefix": "Babyl",
		"body": ["Babyl(${1:path}, ${2:factory=None}, ${3:create=True})"]},
	"BabylMessage from the mailbox module": {
		"description": "BabylMessage from the mailbox module",
		"prefix": "BabylMessage",
		"body": ["BabylMessage(${1:message=None})"]},
	"Error from the mailbox module": {
		"description": "Error from the mailbox module",
		"prefix": "Error",
		"body": ["Error"]},
	"ExternalClashError from the mailbox module": {
		"description": "ExternalClashError from the mailbox module",
		"prefix": "ExternalClashError",
		"body": ["ExternalClashError"]},
	"FormatError from the mailbox module": {
		"description": "FormatError from the mailbox module",
		"prefix": "FormatError",
		"body": ["FormatError"]},
	"MH from the mailbox module": {
		"description": "MH from the mailbox module",
		"prefix": "MH",
		"body": ["MH(${1:path}, ${2:factory=None}, ${3:create=True})"]},
	"MHMessage from the mailbox module": {
		"description": "MHMessage from the mailbox module",
		"prefix": "MHMessage",
		"body": ["MHMessage(${1:message=None})"]},
	"MMDF from the mailbox module": {
		"description": "MMDF from the mailbox module",
		"prefix": "MMDF",
		"body": ["MMDF(${1:path}, ${2:factory=None}, ${3:create=True})"]},
	"MMDFMessage from the mailbox module": {
		"description": "MMDFMessage from the mailbox module",
		"prefix": "MMDFMessage",
		"body": ["MMDFMessage(${1:message=None})"]},
	"Mailbox from the mailbox module": {
		"description": "Mailbox from the mailbox module",
		"prefix": "Mailbox",
		"body": ["Mailbox"]},
	"Maildir from the mailbox module": {
		"description": "Maildir from the mailbox module",
		"prefix": "Maildir",
		"body": ["Maildir(${1:dirname}, ${2:factory=None}, ${3:create=True})"]},
	"MaildirMessage from the mailbox module": {
		"description": "MaildirMessage from the mailbox module",
		"prefix": "MaildirMessage",
		"body": ["MaildirMessage(${1:message=None})"]},
	"Message from the mailbox module": {
		"description": "Message from the mailbox module",
		"prefix": "Message",
		"body": ["Message(${1:message=None})"]},
	"NoSuchMailboxError from the mailbox module": {
		"description": "NoSuchMailboxError from the mailbox module",
		"prefix": "NoSuchMailboxError",
		"body": ["NoSuchMailboxError"]},
	"NotEmptyError from the mailbox module": {
		"description": "NotEmptyError from the mailbox module",
		"prefix": "NotEmptyError",
		"body": ["NotEmptyError"]},
	"mbox() from the mailbox module": {
		"description": "mbox() from the mailbox module",
		"prefix": "mbox",
		"body": ["mbox(${1:path}, ${2:factory=None}, ${3:create=True})"]},
	"mboxMessage() from the mailbox module": {
		"description": "mboxMessage() from the mailbox module",
		"prefix": "mboxMessage",
		"body": ["mboxMessage(${1:message=None})"]},
// mailcap completion
	"findmatch() from the mailcap module": {
		"description": "findmatch() from the mailcap module",
		"prefix": "findmatch",
		"body": ["findmatch(${1:caps}, ${2:MIMEtype}, ${3:key='view'}, ${4:filename='/dev/null'}, ${5:plist=[]})"]},
	"getcaps() from the mailcap module": {
		"description": "getcaps() from the mailcap module",
		"prefix": "getcaps",
		"body": ["getcaps(${1:})"]},
// marshal completion
	"dump() from the marshal module": {
		"description": "dump() from the marshal module",
		"prefix": "dump",
		"body": ["dump(${1:value}, ${2:file[}, ${3:version]})"]},
	"dumps() from the marshal module": {
		"description": "dumps() from the marshal module",
		"prefix": "dumps",
		"body": ["dumps(${1:value[}, ${2:version]})"]},
	"load() from the marshal module": {
		"description": "load() from the marshal module",
		"prefix": "load",
		"body": ["load(${1:file})"]},
	"loads() from the marshal module": {
		"description": "loads() from the marshal module",
		"prefix": "loads",
		"body": ["loads(${1:string})"]},
	"version() from the marshal module": {
		"description": "version() from the marshal module",
		"prefix": "version",
		"body": ["version()"]},
// math completion
	"acos() from the math module": {
		"description": "acos() from the math module",
		"prefix": "acos",
		"body": ["acos(${1:x})"]},
	"acosh() from the math module": {
		"description": "acosh() from the math module",
		"prefix": "acosh",
		"body": ["acosh(${1:x})"]},
	"asin() from the math module": {
		"description": "asin() from the math module",
		"prefix": "asin",
		"body": ["asin(${1:x})"]},
	"asinh() from the math module": {
		"description": "asinh() from the math module",
		"prefix": "asinh",
		"body": ["asinh(${1:x})"]},
	"atan2() from the math module": {
		"description": "atan2() from the math module",
		"prefix": "atan2",
		"body": ["atan2(${1:y}, ${2:x})"]},
	"atan() from the math module": {
		"description": "atan() from the math module",
		"prefix": "atan",
		"body": ["atan(${1:x})"]},
	"atanh() from the math module": {
		"description": "atanh() from the math module",
		"prefix": "atanh",
		"body": ["atanh(${1:x})"]},
	"ceil() from the math module": {
		"description": "ceil() from the math module",
		"prefix": "ceil",
		"body": ["ceil(${1:x})"]},
	"copysign() from the math module": {
		"description": "copysign() from the math module",
		"prefix": "copysign",
		"body": ["copysign(${1:x}, ${2:y})"]},
	"cos() from the math module": {
		"description": "cos() from the math module",
		"prefix": "cos",
		"body": ["cos(${1:x})"]},
	"cosh() from the math module": {
		"description": "cosh() from the math module",
		"prefix": "cosh",
		"body": ["cosh(${1:x})"]},
	"degrees() from the math module": {
		"description": "degrees() from the math module",
		"prefix": "degrees",
		"body": ["degrees(${1:x})"]},
	"e() from the math module": {
		"description": "e() from the math module",
		"prefix": "e",
		"body": ["e()"]},
	"erf() from the math module": {
		"description": "erf() from the math module",
		"prefix": "erf",
		"body": ["erf(${1:x})"]},
	"erfc() from the math module": {
		"description": "erfc() from the math module",
		"prefix": "erfc",
		"body": ["erfc(${1:x})"]},
	"exp() from the math module": {
		"description": "exp() from the math module",
		"prefix": "exp",
		"body": ["exp(${1:x})"]},
	"expm1() from the math module": {
		"description": "expm1() from the math module",
		"prefix": "expm1",
		"body": ["expm1(${1:x})"]},
	"fabs() from the math module": {
		"description": "fabs() from the math module",
		"prefix": "fabs",
		"body": ["fabs(${1:x})"]},
	"factorial() from the math module": {
		"description": "factorial() from the math module",
		"prefix": "factorial",
		"body": ["factorial(${1:x})"]},
	"floor() from the math module": {
		"description": "floor() from the math module",
		"prefix": "floor",
		"body": ["floor(${1:x})"]},
	"fmod() from the math module": {
		"description": "fmod() from the math module",
		"prefix": "fmod",
		"body": ["fmod(${1:x}, ${2:y})"]},
	"frexp() from the math module": {
		"description": "frexp() from the math module",
		"prefix": "frexp",
		"body": ["frexp(${1:x})"]},
	"fsum() from the math module": {
		"description": "fsum() from the math module",
		"prefix": "fsum",
		"body": ["fsum(${1:iterable})"]},
	"gamma() from the math module": {
		"description": "gamma() from the math module",
		"prefix": "gamma",
		"body": ["gamma(${1:x})"]},
	"gcd() from the math module": {
		"description": "gcd() from the math module",
		"prefix": "gcd",
		"body": ["gcd(${1:a}, ${2:b})"]},
	"hypot() from the math module": {
		"description": "hypot() from the math module",
		"prefix": "hypot",
		"body": ["hypot(${1:x}, ${2:y})"]},
	"inf() from the math module": {
		"description": "inf() from the math module",
		"prefix": "inf",
		"body": ["inf()"]},
	"isclose() from the math module": {
		"description": "isclose() from the math module",
		"prefix": "isclose",
		"body": ["isclose(${1:a}, ${2:b}, ${3:*}, ${4:rel_tol=1e-09}, ${5:abs_tol=0.0})"]},
	"isfinite() from the math module": {
		"description": "isfinite() from the math module",
		"prefix": "isfinite",
		"body": ["isfinite(${1:x})"]},
	"isinf() from the math module": {
		"description": "isinf() from the math module",
		"prefix": "isinf",
		"body": ["isinf(${1:x})"]},
	"isnan() from the math module": {
		"description": "isnan() from the math module",
		"prefix": "isnan",
		"body": ["isnan(${1:x})"]},
	"ldexp() from the math module": {
		"description": "ldexp() from the math module",
		"prefix": "ldexp",
		"body": ["ldexp(${1:x}, ${2:i})"]},
	"lgamma() from the math module": {
		"description": "lgamma() from the math module",
		"prefix": "lgamma",
		"body": ["lgamma(${1:x})"]},
	"log10() from the math module": {
		"description": "log10() from the math module",
		"prefix": "log10",
		"body": ["log10(${1:x})"]},
	"log1p() from the math module": {
		"description": "log1p() from the math module",
		"prefix": "log1p",
		"body": ["log1p(${1:x})"]},
	"log2() from the math module": {
		"description": "log2() from the math module",
		"prefix": "log2",
		"body": ["log2(${1:x})"]},
	"log() from the math module": {
		"description": "log() from the math module",
		"prefix": "log",
		"body": ["log(${1:x[}, ${2:base]})"]},
	"modf() from the math module": {
		"description": "modf() from the math module",
		"prefix": "modf",
		"body": ["modf(${1:x})"]},
	"nan() from the math module": {
		"description": "nan() from the math module",
		"prefix": "nan",
		"body": ["nan()"]},
	"pi() from the math module": {
		"description": "pi() from the math module",
		"prefix": "pi",
		"body": ["pi()"]},
	"pow() from the math module": {
		"description": "pow() from the math module",
		"prefix": "pow",
		"body": ["pow(${1:x}, ${2:y})"]},
	"radians() from the math module": {
		"description": "radians() from the math module",
		"prefix": "radians",
		"body": ["radians(${1:x})"]},
	"sin() from the math module": {
		"description": "sin() from the math module",
		"prefix": "sin",
		"body": ["sin(${1:x})"]},
	"sinh() from the math module": {
		"description": "sinh() from the math module",
		"prefix": "sinh",
		"body": ["sinh(${1:x})"]},
	"sqrt() from the math module": {
		"description": "sqrt() from the math module",
		"prefix": "sqrt",
		"body": ["sqrt(${1:x})"]},
	"tan() from the math module": {
		"description": "tan() from the math module",
		"prefix": "tan",
		"body": ["tan(${1:x})"]},
	"tanh() from the math module": {
		"description": "tanh() from the math module",
		"prefix": "tanh",
		"body": ["tanh(${1:x})"]},
	"trunc() from the math module": {
		"description": "trunc() from the math module",
		"prefix": "trunc",
		"body": ["trunc(${1:x})"]},
// mimetypes completion
	"MimeTypes from the mimetypes module": {
		"description": "MimeTypes from the mimetypes module",
		"prefix": "MimeTypes",
		"body": ["MimeTypes(${1:filenames=}, ${2:})"]},
	"add_type() from the mimetypes module": {
		"description": "add_type() from the mimetypes module",
		"prefix": "add_type",
		"body": ["add_type(${1:type}, ${2:ext}, ${3:strict=True})"]},
	"common_types() from the mimetypes module": {
		"description": "common_types() from the mimetypes module",
		"prefix": "common_types",
		"body": ["common_types()"]},
	"encodings_map() from the mimetypes module": {
		"description": "encodings_map() from the mimetypes module",
		"prefix": "encodings_map",
		"body": ["encodings_map()"]},
	"guess_all_extensions() from the mimetypes module": {
		"description": "guess_all_extensions() from the mimetypes module",
		"prefix": "guess_all_extensions",
		"body": ["guess_all_extensions(${1:type}, ${2:strict=True})"]},
	"guess_extension() from the mimetypes module": {
		"description": "guess_extension() from the mimetypes module",
		"prefix": "guess_extension",
		"body": ["guess_extension(${1:type}, ${2:strict=True})"]},
	"guess_type() from the mimetypes module": {
		"description": "guess_type() from the mimetypes module",
		"prefix": "guess_type",
		"body": ["guess_type(${1:url}, ${2:strict=True})"]},
	"init() from the mimetypes module": {
		"description": "init() from the mimetypes module",
		"prefix": "init",
		"body": ["init(${1:files=None})"]},
	"inited() from the mimetypes module": {
		"description": "inited() from the mimetypes module",
		"prefix": "inited",
		"body": ["inited()"]},
	"knownfiles() from the mimetypes module": {
		"description": "knownfiles() from the mimetypes module",
		"prefix": "knownfiles",
		"body": ["knownfiles()"]},
	"read() from the mimetypes module": {
		"description": "read() from the mimetypes module",
		"prefix": "read",
		"body": ["read(${1:filename}, ${2:strict=True})"]},
	"read_mime_types() from the mimetypes module": {
		"description": "read_mime_types() from the mimetypes module",
		"prefix": "read_mime_types",
		"body": ["read_mime_types(${1:filename})"]},
	"read_windows_registry() from the mimetypes module": {
		"description": "read_windows_registry() from the mimetypes module",
		"prefix": "read_windows_registry",
		"body": ["read_windows_registry(${1:strict=True})"]},
	"readfp() from the mimetypes module": {
		"description": "readfp() from the mimetypes module",
		"prefix": "readfp",
		"body": ["readfp(${1:fp}, ${2:strict=True})"]},
	"suffix_map() from the mimetypes module": {
		"description": "suffix_map() from the mimetypes module",
		"prefix": "suffix_map",
		"body": ["suffix_map()"]},
	"types_map() from the mimetypes module": {
		"description": "types_map() from the mimetypes module",
		"prefix": "types_map",
		"body": ["types_map()"]},
	"types_map_inv() from the mimetypes module": {
		"description": "types_map_inv() from the mimetypes module",
		"prefix": "types_map_inv",
		"body": ["types_map_inv()"]},
// mmap completion
	"mmap() from the mmap module": {
		"description": "mmap() from the mmap module",
		"prefix": "mmap",
		"body": ["mmap(${1:fileno}, ${2:length}, ${3:flags=MAP_SHARED}, ${4:prot=PROT_WRITE|PROT_READ}, ${5:access=ACCESS_DEFAULT[}, ${6:offset]})"]},
	"mmap() from the mmap module": {
		"description": "mmap() from the mmap module",
		"prefix": "mmap",
		"body": ["mmap(${1:fileno,})"]},
// modulefinder completion
	"AddPackagePath from the modulefinder module": {
		"description": "AddPackagePath from the modulefinder module",
		"prefix": "AddPackagePath",
		"body": ["AddPackagePath(${1:pkg_name}, ${2:path})"]},
	"ModuleFinder from the modulefinder module": {
		"description": "ModuleFinder from the modulefinder module",
		"prefix": "ModuleFinder",
		"body": ["ModuleFinder(${1:path=None}, ${2:debug=0}, ${3:excludes=[]}, ${4:replace_paths=[]})"]},
	"ReplacePackage from the modulefinder module": {
		"description": "ReplacePackage from the modulefinder module",
		"prefix": "ReplacePackage",
		"body": ["ReplacePackage(${1:oldname,})"]},
// msilib completion
	"Binary from the msilib module": {
		"description": "Binary from the msilib module",
		"prefix": "Binary",
		"body": ["Binary(${1:filename})"]},
	"CAB from the msilib module": {
		"description": "CAB from the msilib module",
		"prefix": "CAB",
		"body": ["CAB(${1:name})"]},
	"ClearData from the msilib module": {
		"description": "ClearData from the msilib module",
		"prefix": "ClearData",
		"body": ["ClearData(${1:})"]},
	"Close from the msilib module": {
		"description": "Close from the msilib module",
		"prefix": "Close",
		"body": ["Close(${1:})"]},
	"Commit from the msilib module": {
		"description": "Commit from the msilib module",
		"prefix": "Commit",
		"body": ["Commit(${1:})"]},
	"Control from the msilib module": {
		"description": "Control from the msilib module",
		"prefix": "Control",
		"body": ["Control(${1:dlg}, ${2:name})"]},
	"CreateRecord from the msilib module": {
		"description": "CreateRecord from the msilib module",
		"prefix": "CreateRecord",
		"body": ["CreateRecord(${1:count})"]},
	"Dialog from the msilib module": {
		"description": "Dialog from the msilib module",
		"prefix": "Dialog",
		"body": ["Dialog(${1:db}, ${2:name}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:attr}, ${8:title}, ${9:first}, ${10:default}, ${11:cancel})"]},
	"Directory from the msilib module": {
		"description": "Directory from the msilib module",
		"prefix": "Directory",
		"body": ["Directory(${1:database}, ${2:cab}, ${3:basedir}, ${4:physical}, ${5:logical}, ${6:default[}, ${7:componentflags]})"]},
	"Execute from the msilib module": {
		"description": "Execute from the msilib module",
		"prefix": "Execute",
		"body": ["Execute(${1:params})"]},
	"FCICreate from the msilib module": {
		"description": "FCICreate from the msilib module",
		"prefix": "FCICreate",
		"body": ["FCICreate(${1:cabname}, ${2:files})"]},
	"Feature from the msilib module": {
		"description": "Feature from the msilib module",
		"prefix": "Feature",
		"body": ["Feature(${1:db}, ${2:id}, ${3:title}, ${4:desc}, ${5:display}, ${6:level=1}, ${7:parent=None}, ${8:directory=None}, ${9:attributes=0})"]},
	"Fetch from the msilib module": {
		"description": "Fetch from the msilib module",
		"prefix": "Fetch",
		"body": ["Fetch(${1:})"]},
	"GetColumnInfo from the msilib module": {
		"description": "GetColumnInfo from the msilib module",
		"prefix": "GetColumnInfo",
		"body": ["GetColumnInfo(${1:kind})"]},
	"GetFieldCount from the msilib module": {
		"description": "GetFieldCount from the msilib module",
		"prefix": "GetFieldCount",
		"body": ["GetFieldCount(${1:})"]},
	"GetInteger from the msilib module": {
		"description": "GetInteger from the msilib module",
		"prefix": "GetInteger",
		"body": ["GetInteger(${1:field})"]},
	"GetProperty from the msilib module": {
		"description": "GetProperty from the msilib module",
		"prefix": "GetProperty",
		"body": ["GetProperty(${1:field})"]},
	"GetPropertyCount from the msilib module": {
		"description": "GetPropertyCount from the msilib module",
		"prefix": "GetPropertyCount",
		"body": ["GetPropertyCount(${1:})"]},
	"GetString from the msilib module": {
		"description": "GetString from the msilib module",
		"prefix": "GetString",
		"body": ["GetString(${1:field})"]},
	"GetSummaryInformation from the msilib module": {
		"description": "GetSummaryInformation from the msilib module",
		"prefix": "GetSummaryInformation",
		"body": ["GetSummaryInformation(${1:count})"]},
	"Modify from the msilib module": {
		"description": "Modify from the msilib module",
		"prefix": "Modify",
		"body": ["Modify(${1:kind}, ${2:data})"]},
	"OpenDatabase from the msilib module": {
		"description": "OpenDatabase from the msilib module",
		"prefix": "OpenDatabase",
		"body": ["OpenDatabase(${1:path}, ${2:persist})"]},
	"OpenView from the msilib module": {
		"description": "OpenView from the msilib module",
		"prefix": "OpenView",
		"body": ["OpenView(${1:sql})"]},
	"Persist from the msilib module": {
		"description": "Persist from the msilib module",
		"prefix": "Persist",
		"body": ["Persist(${1:})"]},
	"RadioButtonGroup from the msilib module": {
		"description": "RadioButtonGroup from the msilib module",
		"prefix": "RadioButtonGroup",
		"body": ["RadioButtonGroup(${1:dlg}, ${2:name}, ${3:property})"]},
	"SetInteger from the msilib module": {
		"description": "SetInteger from the msilib module",
		"prefix": "SetInteger",
		"body": ["SetInteger(${1:field}, ${2:value})"]},
	"SetProperty from the msilib module": {
		"description": "SetProperty from the msilib module",
		"prefix": "SetProperty",
		"body": ["SetProperty(${1:field}, ${2:value})"]},
	"SetStream from the msilib module": {
		"description": "SetStream from the msilib module",
		"prefix": "SetStream",
		"body": ["SetStream(${1:field}, ${2:value})"]},
	"SetString from the msilib module": {
		"description": "SetString from the msilib module",
		"prefix": "SetString",
		"body": ["SetString(${1:field}, ${2:value})"]},
	"UuidCreate from the msilib module": {
		"description": "UuidCreate from the msilib module",
		"prefix": "UuidCreate",
		"body": ["UuidCreate(${1:})"]},
	"add_data() from the msilib module": {
		"description": "add_data() from the msilib module",
		"prefix": "add_data",
		"body": ["add_data(${1:database}, ${2:table}, ${3:records})"]},
	"add_stream() from the msilib module": {
		"description": "add_stream() from the msilib module",
		"prefix": "add_stream",
		"body": ["add_stream(${1:database}, ${2:name}, ${3:path})"]},
	"add_tables() from the msilib module": {
		"description": "add_tables() from the msilib module",
		"prefix": "add_tables",
		"body": ["add_tables(${1:database}, ${2:module})"]},
	"gen_uuid() from the msilib module": {
		"description": "gen_uuid() from the msilib module",
		"prefix": "gen_uuid",
		"body": ["gen_uuid(${1:})"]},
	"init_database() from the msilib module": {
		"description": "init_database() from the msilib module",
		"prefix": "init_database",
		"body": ["init_database(${1:name}, ${2:schema}, ${3:ProductName}, ${4:ProductCode}, ${5:ProductVersion}, ${6:Manufacturer})"]},
	"schema() from the msilib module": {
		"description": "schema() from the msilib module",
		"prefix": "schema",
		"body": ["schema()"]},
	"sequence() from the msilib module": {
		"description": "sequence() from the msilib module",
		"prefix": "sequence",
		"body": ["sequence()"]},
	"text() from the msilib module": {
		"description": "text() from the msilib module",
		"prefix": "text",
		"body": ["text()"]},
// msvcrt completion
	"LK_LOCK from the msvcrt module": {
		"description": "LK_LOCK from the msvcrt module",
		"prefix": "LK_LOCK",
		"body": ["LK_LOCK"]},
	"LK_NBLCK from the msvcrt module": {
		"description": "LK_NBLCK from the msvcrt module",
		"prefix": "LK_NBLCK",
		"body": ["LK_NBLCK"]},
	"LK_NBRLCK from the msvcrt module": {
		"description": "LK_NBRLCK from the msvcrt module",
		"prefix": "LK_NBRLCK",
		"body": ["LK_NBRLCK"]},
	"LK_RLCK from the msvcrt module": {
		"description": "LK_RLCK from the msvcrt module",
		"prefix": "LK_RLCK",
		"body": ["LK_RLCK"]},
	"LK_UNLCK from the msvcrt module": {
		"description": "LK_UNLCK from the msvcrt module",
		"prefix": "LK_UNLCK",
		"body": ["LK_UNLCK"]},
	"get_osfhandle() from the msvcrt module": {
		"description": "get_osfhandle() from the msvcrt module",
		"prefix": "get_osfhandle",
		"body": ["get_osfhandle(${1:fd})"]},
	"getch() from the msvcrt module": {
		"description": "getch() from the msvcrt module",
		"prefix": "getch",
		"body": ["getch(${1:})"]},
	"getche() from the msvcrt module": {
		"description": "getche() from the msvcrt module",
		"prefix": "getche",
		"body": ["getche(${1:})"]},
	"getwch() from the msvcrt module": {
		"description": "getwch() from the msvcrt module",
		"prefix": "getwch",
		"body": ["getwch(${1:})"]},
	"getwche() from the msvcrt module": {
		"description": "getwche() from the msvcrt module",
		"prefix": "getwche",
		"body": ["getwche(${1:})"]},
	"heapmin() from the msvcrt module": {
		"description": "heapmin() from the msvcrt module",
		"prefix": "heapmin",
		"body": ["heapmin(${1:})"]},
	"kbhit() from the msvcrt module": {
		"description": "kbhit() from the msvcrt module",
		"prefix": "kbhit",
		"body": ["kbhit(${1:})"]},
	"locking() from the msvcrt module": {
		"description": "locking() from the msvcrt module",
		"prefix": "locking",
		"body": ["locking(${1:fd}, ${2:mode}, ${3:nbytes})"]},
	"open_osfhandle() from the msvcrt module": {
		"description": "open_osfhandle() from the msvcrt module",
		"prefix": "open_osfhandle",
		"body": ["open_osfhandle(${1:handle}, ${2:flags})"]},
	"putch() from the msvcrt module": {
		"description": "putch() from the msvcrt module",
		"prefix": "putch",
		"body": ["putch(${1:char})"]},
	"putwch() from the msvcrt module": {
		"description": "putwch() from the msvcrt module",
		"prefix": "putwch",
		"body": ["putwch(${1:unicode_char})"]},
	"setmode() from the msvcrt module": {
		"description": "setmode() from the msvcrt module",
		"prefix": "setmode",
		"body": ["setmode(${1:fd}, ${2:flags})"]},
	"ungetch() from the msvcrt module": {
		"description": "ungetch() from the msvcrt module",
		"prefix": "ungetch",
		"body": ["ungetch(${1:char})"]},
	"ungetwch() from the msvcrt module": {
		"description": "ungetwch() from the msvcrt module",
		"prefix": "ungetwch",
		"body": ["ungetwch(${1:unicode_char})"]},
// multiprocessing completion
	"Array from the multiprocessing module": {
		"description": "Array from the multiprocessing module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing module": {
		"description": "AsyncResult from the multiprocessing module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing module": {
		"description": "AuthenticationError from the multiprocessing module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing module": {
		"description": "Barrier from the multiprocessing module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing module": {
		"description": "BaseManager from the multiprocessing module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing module": {
		"description": "BaseProxy from the multiprocessing module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing module": {
		"description": "BoundedSemaphore from the multiprocessing module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing module": {
		"description": "BufferTooShort from the multiprocessing module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing module": {
		"description": "Client from the multiprocessing module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing module": {
		"description": "Condition from the multiprocessing module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing module": {
		"description": "Connection from the multiprocessing module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing module": {
		"description": "Event from the multiprocessing module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing module": {
		"description": "JoinableQueue from the multiprocessing module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing module": {
		"description": "Listener from the multiprocessing module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing module": {
		"description": "Lock from the multiprocessing module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing module": {
		"description": "Manager from the multiprocessing module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing module": {
		"description": "Namespace from the multiprocessing module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing module": {
		"description": "Pipe from the multiprocessing module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing module": {
		"description": "Pool from the multiprocessing module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing module": {
		"description": "Process from the multiprocessing module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing module": {
		"description": "ProcessError from the multiprocessing module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing module": {
		"description": "Queue from the multiprocessing module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing module": {
		"description": "RLock from the multiprocessing module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing module": {
		"description": "RawArray from the multiprocessing module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing module": {
		"description": "RawValue from the multiprocessing module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing module": {
		"description": "Semaphore from the multiprocessing module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing module": {
		"description": "SimpleQueue from the multiprocessing module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing module": {
		"description": "SyncManager from the multiprocessing module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing module": {
		"description": "TimeoutError from the multiprocessing module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing module": {
		"description": "Value from the multiprocessing module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing module": {
		"description": "active_children() from the multiprocessing module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing module": {
		"description": "answer_challenge() from the multiprocessing module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing module": {
		"description": "copy() from the multiprocessing module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing module": {
		"description": "cpu_count() from the multiprocessing module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing module": {
		"description": "current_process() from the multiprocessing module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing module": {
		"description": "deliver_challenge() from the multiprocessing module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing module": {
		"description": "freeze_support() from the multiprocessing module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing module": {
		"description": "get_all_start_methods() from the multiprocessing module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing module": {
		"description": "get_context() from the multiprocessing module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing module": {
		"description": "get_logger() from the multiprocessing module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing module": {
		"description": "get_start_method() from the multiprocessing module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing module": {
		"description": "log_to_stderr() from the multiprocessing module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing module": {
		"description": "set_executable() from the multiprocessing module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing module": {
		"description": "set_start_method() from the multiprocessing module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing module": {
		"description": "synchronized() from the multiprocessing module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing module": {
		"description": "wait() from the multiprocessing module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// multiprocessing.connection completion
	"Array from the multiprocessing.connection module": {
		"description": "Array from the multiprocessing.connection module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing.connection module": {
		"description": "AsyncResult from the multiprocessing.connection module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing.connection module": {
		"description": "AuthenticationError from the multiprocessing.connection module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing.connection module": {
		"description": "Barrier from the multiprocessing.connection module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing.connection module": {
		"description": "BaseManager from the multiprocessing.connection module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing.connection module": {
		"description": "BaseProxy from the multiprocessing.connection module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing.connection module": {
		"description": "BoundedSemaphore from the multiprocessing.connection module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing.connection module": {
		"description": "BufferTooShort from the multiprocessing.connection module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing.connection module": {
		"description": "Client from the multiprocessing.connection module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing.connection module": {
		"description": "Condition from the multiprocessing.connection module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing.connection module": {
		"description": "Connection from the multiprocessing.connection module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing.connection module": {
		"description": "Event from the multiprocessing.connection module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing.connection module": {
		"description": "JoinableQueue from the multiprocessing.connection module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing.connection module": {
		"description": "Listener from the multiprocessing.connection module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing.connection module": {
		"description": "Lock from the multiprocessing.connection module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing.connection module": {
		"description": "Manager from the multiprocessing.connection module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing.connection module": {
		"description": "Namespace from the multiprocessing.connection module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing.connection module": {
		"description": "Pipe from the multiprocessing.connection module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing.connection module": {
		"description": "Pool from the multiprocessing.connection module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing.connection module": {
		"description": "Process from the multiprocessing.connection module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing.connection module": {
		"description": "ProcessError from the multiprocessing.connection module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing.connection module": {
		"description": "Queue from the multiprocessing.connection module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing.connection module": {
		"description": "RLock from the multiprocessing.connection module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing.connection module": {
		"description": "RawArray from the multiprocessing.connection module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing.connection module": {
		"description": "RawValue from the multiprocessing.connection module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing.connection module": {
		"description": "Semaphore from the multiprocessing.connection module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing.connection module": {
		"description": "SimpleQueue from the multiprocessing.connection module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing.connection module": {
		"description": "SyncManager from the multiprocessing.connection module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing.connection module": {
		"description": "TimeoutError from the multiprocessing.connection module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing.connection module": {
		"description": "Value from the multiprocessing.connection module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing.connection module": {
		"description": "active_children() from the multiprocessing.connection module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing.connection module": {
		"description": "answer_challenge() from the multiprocessing.connection module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing.connection module": {
		"description": "copy() from the multiprocessing.connection module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing.connection module": {
		"description": "cpu_count() from the multiprocessing.connection module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing.connection module": {
		"description": "current_process() from the multiprocessing.connection module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing.connection module": {
		"description": "deliver_challenge() from the multiprocessing.connection module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing.connection module": {
		"description": "freeze_support() from the multiprocessing.connection module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing.connection module": {
		"description": "get_all_start_methods() from the multiprocessing.connection module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing.connection module": {
		"description": "get_context() from the multiprocessing.connection module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing.connection module": {
		"description": "get_logger() from the multiprocessing.connection module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing.connection module": {
		"description": "get_start_method() from the multiprocessing.connection module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing.connection module": {
		"description": "log_to_stderr() from the multiprocessing.connection module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing.connection module": {
		"description": "set_executable() from the multiprocessing.connection module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing.connection module": {
		"description": "set_start_method() from the multiprocessing.connection module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing.connection module": {
		"description": "synchronized() from the multiprocessing.connection module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing.connection module": {
		"description": "wait() from the multiprocessing.connection module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// multiprocessing.dummy completion
	"Array from the multiprocessing.dummy module": {
		"description": "Array from the multiprocessing.dummy module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing.dummy module": {
		"description": "AsyncResult from the multiprocessing.dummy module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing.dummy module": {
		"description": "AuthenticationError from the multiprocessing.dummy module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing.dummy module": {
		"description": "Barrier from the multiprocessing.dummy module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing.dummy module": {
		"description": "BaseManager from the multiprocessing.dummy module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing.dummy module": {
		"description": "BaseProxy from the multiprocessing.dummy module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing.dummy module": {
		"description": "BoundedSemaphore from the multiprocessing.dummy module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing.dummy module": {
		"description": "BufferTooShort from the multiprocessing.dummy module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing.dummy module": {
		"description": "Client from the multiprocessing.dummy module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing.dummy module": {
		"description": "Condition from the multiprocessing.dummy module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing.dummy module": {
		"description": "Connection from the multiprocessing.dummy module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing.dummy module": {
		"description": "Event from the multiprocessing.dummy module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing.dummy module": {
		"description": "JoinableQueue from the multiprocessing.dummy module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing.dummy module": {
		"description": "Listener from the multiprocessing.dummy module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing.dummy module": {
		"description": "Lock from the multiprocessing.dummy module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing.dummy module": {
		"description": "Manager from the multiprocessing.dummy module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing.dummy module": {
		"description": "Namespace from the multiprocessing.dummy module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing.dummy module": {
		"description": "Pipe from the multiprocessing.dummy module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing.dummy module": {
		"description": "Pool from the multiprocessing.dummy module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing.dummy module": {
		"description": "Process from the multiprocessing.dummy module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing.dummy module": {
		"description": "ProcessError from the multiprocessing.dummy module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing.dummy module": {
		"description": "Queue from the multiprocessing.dummy module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing.dummy module": {
		"description": "RLock from the multiprocessing.dummy module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing.dummy module": {
		"description": "RawArray from the multiprocessing.dummy module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing.dummy module": {
		"description": "RawValue from the multiprocessing.dummy module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing.dummy module": {
		"description": "Semaphore from the multiprocessing.dummy module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing.dummy module": {
		"description": "SimpleQueue from the multiprocessing.dummy module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing.dummy module": {
		"description": "SyncManager from the multiprocessing.dummy module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing.dummy module": {
		"description": "TimeoutError from the multiprocessing.dummy module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing.dummy module": {
		"description": "Value from the multiprocessing.dummy module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing.dummy module": {
		"description": "active_children() from the multiprocessing.dummy module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing.dummy module": {
		"description": "answer_challenge() from the multiprocessing.dummy module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing.dummy module": {
		"description": "copy() from the multiprocessing.dummy module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing.dummy module": {
		"description": "cpu_count() from the multiprocessing.dummy module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing.dummy module": {
		"description": "current_process() from the multiprocessing.dummy module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing.dummy module": {
		"description": "deliver_challenge() from the multiprocessing.dummy module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing.dummy module": {
		"description": "freeze_support() from the multiprocessing.dummy module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing.dummy module": {
		"description": "get_all_start_methods() from the multiprocessing.dummy module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing.dummy module": {
		"description": "get_context() from the multiprocessing.dummy module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing.dummy module": {
		"description": "get_logger() from the multiprocessing.dummy module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing.dummy module": {
		"description": "get_start_method() from the multiprocessing.dummy module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing.dummy module": {
		"description": "log_to_stderr() from the multiprocessing.dummy module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing.dummy module": {
		"description": "set_executable() from the multiprocessing.dummy module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing.dummy module": {
		"description": "set_start_method() from the multiprocessing.dummy module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing.dummy module": {
		"description": "synchronized() from the multiprocessing.dummy module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing.dummy module": {
		"description": "wait() from the multiprocessing.dummy module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// multiprocessing.managers completion
	"Array from the multiprocessing.managers module": {
		"description": "Array from the multiprocessing.managers module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing.managers module": {
		"description": "AsyncResult from the multiprocessing.managers module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing.managers module": {
		"description": "AuthenticationError from the multiprocessing.managers module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing.managers module": {
		"description": "Barrier from the multiprocessing.managers module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing.managers module": {
		"description": "BaseManager from the multiprocessing.managers module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing.managers module": {
		"description": "BaseProxy from the multiprocessing.managers module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing.managers module": {
		"description": "BoundedSemaphore from the multiprocessing.managers module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing.managers module": {
		"description": "BufferTooShort from the multiprocessing.managers module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing.managers module": {
		"description": "Client from the multiprocessing.managers module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing.managers module": {
		"description": "Condition from the multiprocessing.managers module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing.managers module": {
		"description": "Connection from the multiprocessing.managers module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing.managers module": {
		"description": "Event from the multiprocessing.managers module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing.managers module": {
		"description": "JoinableQueue from the multiprocessing.managers module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing.managers module": {
		"description": "Listener from the multiprocessing.managers module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing.managers module": {
		"description": "Lock from the multiprocessing.managers module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing.managers module": {
		"description": "Manager from the multiprocessing.managers module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing.managers module": {
		"description": "Namespace from the multiprocessing.managers module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing.managers module": {
		"description": "Pipe from the multiprocessing.managers module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing.managers module": {
		"description": "Pool from the multiprocessing.managers module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing.managers module": {
		"description": "Process from the multiprocessing.managers module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing.managers module": {
		"description": "ProcessError from the multiprocessing.managers module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing.managers module": {
		"description": "Queue from the multiprocessing.managers module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing.managers module": {
		"description": "RLock from the multiprocessing.managers module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing.managers module": {
		"description": "RawArray from the multiprocessing.managers module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing.managers module": {
		"description": "RawValue from the multiprocessing.managers module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing.managers module": {
		"description": "Semaphore from the multiprocessing.managers module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing.managers module": {
		"description": "SimpleQueue from the multiprocessing.managers module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing.managers module": {
		"description": "SyncManager from the multiprocessing.managers module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing.managers module": {
		"description": "TimeoutError from the multiprocessing.managers module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing.managers module": {
		"description": "Value from the multiprocessing.managers module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing.managers module": {
		"description": "active_children() from the multiprocessing.managers module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing.managers module": {
		"description": "answer_challenge() from the multiprocessing.managers module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing.managers module": {
		"description": "copy() from the multiprocessing.managers module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing.managers module": {
		"description": "cpu_count() from the multiprocessing.managers module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing.managers module": {
		"description": "current_process() from the multiprocessing.managers module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing.managers module": {
		"description": "deliver_challenge() from the multiprocessing.managers module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing.managers module": {
		"description": "freeze_support() from the multiprocessing.managers module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing.managers module": {
		"description": "get_all_start_methods() from the multiprocessing.managers module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing.managers module": {
		"description": "get_context() from the multiprocessing.managers module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing.managers module": {
		"description": "get_logger() from the multiprocessing.managers module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing.managers module": {
		"description": "get_start_method() from the multiprocessing.managers module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing.managers module": {
		"description": "log_to_stderr() from the multiprocessing.managers module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing.managers module": {
		"description": "set_executable() from the multiprocessing.managers module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing.managers module": {
		"description": "set_start_method() from the multiprocessing.managers module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing.managers module": {
		"description": "synchronized() from the multiprocessing.managers module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing.managers module": {
		"description": "wait() from the multiprocessing.managers module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// multiprocessing.pool completion
	"Array from the multiprocessing.pool module": {
		"description": "Array from the multiprocessing.pool module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing.pool module": {
		"description": "AsyncResult from the multiprocessing.pool module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing.pool module": {
		"description": "AuthenticationError from the multiprocessing.pool module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing.pool module": {
		"description": "Barrier from the multiprocessing.pool module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing.pool module": {
		"description": "BaseManager from the multiprocessing.pool module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing.pool module": {
		"description": "BaseProxy from the multiprocessing.pool module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing.pool module": {
		"description": "BoundedSemaphore from the multiprocessing.pool module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing.pool module": {
		"description": "BufferTooShort from the multiprocessing.pool module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing.pool module": {
		"description": "Client from the multiprocessing.pool module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing.pool module": {
		"description": "Condition from the multiprocessing.pool module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing.pool module": {
		"description": "Connection from the multiprocessing.pool module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing.pool module": {
		"description": "Event from the multiprocessing.pool module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing.pool module": {
		"description": "JoinableQueue from the multiprocessing.pool module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing.pool module": {
		"description": "Listener from the multiprocessing.pool module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing.pool module": {
		"description": "Lock from the multiprocessing.pool module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing.pool module": {
		"description": "Manager from the multiprocessing.pool module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing.pool module": {
		"description": "Namespace from the multiprocessing.pool module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing.pool module": {
		"description": "Pipe from the multiprocessing.pool module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing.pool module": {
		"description": "Pool from the multiprocessing.pool module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing.pool module": {
		"description": "Process from the multiprocessing.pool module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing.pool module": {
		"description": "ProcessError from the multiprocessing.pool module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing.pool module": {
		"description": "Queue from the multiprocessing.pool module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing.pool module": {
		"description": "RLock from the multiprocessing.pool module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing.pool module": {
		"description": "RawArray from the multiprocessing.pool module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing.pool module": {
		"description": "RawValue from the multiprocessing.pool module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing.pool module": {
		"description": "Semaphore from the multiprocessing.pool module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing.pool module": {
		"description": "SimpleQueue from the multiprocessing.pool module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing.pool module": {
		"description": "SyncManager from the multiprocessing.pool module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing.pool module": {
		"description": "TimeoutError from the multiprocessing.pool module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing.pool module": {
		"description": "Value from the multiprocessing.pool module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing.pool module": {
		"description": "active_children() from the multiprocessing.pool module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing.pool module": {
		"description": "answer_challenge() from the multiprocessing.pool module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing.pool module": {
		"description": "copy() from the multiprocessing.pool module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing.pool module": {
		"description": "cpu_count() from the multiprocessing.pool module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing.pool module": {
		"description": "current_process() from the multiprocessing.pool module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing.pool module": {
		"description": "deliver_challenge() from the multiprocessing.pool module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing.pool module": {
		"description": "freeze_support() from the multiprocessing.pool module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing.pool module": {
		"description": "get_all_start_methods() from the multiprocessing.pool module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing.pool module": {
		"description": "get_context() from the multiprocessing.pool module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing.pool module": {
		"description": "get_logger() from the multiprocessing.pool module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing.pool module": {
		"description": "get_start_method() from the multiprocessing.pool module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing.pool module": {
		"description": "log_to_stderr() from the multiprocessing.pool module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing.pool module": {
		"description": "set_executable() from the multiprocessing.pool module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing.pool module": {
		"description": "set_start_method() from the multiprocessing.pool module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing.pool module": {
		"description": "synchronized() from the multiprocessing.pool module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing.pool module": {
		"description": "wait() from the multiprocessing.pool module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// multiprocessing.sharedctypes completion
	"Array from the multiprocessing.sharedctypes module": {
		"description": "Array from the multiprocessing.sharedctypes module",
		"prefix": "Array",
		"body": ["Array(${1:typecode_or_type}, ${2:size_or_initializer}, ${3:*}, ${4:lock=True})"]},
	"AsyncResult from the multiprocessing.sharedctypes module": {
		"description": "AsyncResult from the multiprocessing.sharedctypes module",
		"prefix": "AsyncResult",
		"body": ["AsyncResult"]},
	"AuthenticationError from the multiprocessing.sharedctypes module": {
		"description": "AuthenticationError from the multiprocessing.sharedctypes module",
		"prefix": "AuthenticationError",
		"body": ["AuthenticationError"]},
	"Barrier from the multiprocessing.sharedctypes module": {
		"description": "Barrier from the multiprocessing.sharedctypes module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties[}, ${2:action[}, ${3:timeout]]})"]},
	"BaseManager from the multiprocessing.sharedctypes module": {
		"description": "BaseManager from the multiprocessing.sharedctypes module",
		"prefix": "BaseManager",
		"body": ["BaseManager(${1:[address[}, ${2:authkey]]})"]},
	"BaseProxy from the multiprocessing.sharedctypes module": {
		"description": "BaseProxy from the multiprocessing.sharedctypes module",
		"prefix": "BaseProxy",
		"body": ["BaseProxy"]},
	"BoundedSemaphore from the multiprocessing.sharedctypes module": {
		"description": "BoundedSemaphore from the multiprocessing.sharedctypes module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:[value]})"]},
	"BufferTooShort from the multiprocessing.sharedctypes module": {
		"description": "BufferTooShort from the multiprocessing.sharedctypes module",
		"prefix": "BufferTooShort",
		"body": ["BufferTooShort"]},
	"Client from the multiprocessing.sharedctypes module": {
		"description": "Client from the multiprocessing.sharedctypes module",
		"prefix": "Client",
		"body": ["Client(${1:address[}, ${2:family[}, ${3:authenticate[}, ${4:authkey]]]})"]},
	"Condition from the multiprocessing.sharedctypes module": {
		"description": "Condition from the multiprocessing.sharedctypes module",
		"prefix": "Condition",
		"body": ["Condition(${1:[lock]})"]},
	"Connection from the multiprocessing.sharedctypes module": {
		"description": "Connection from the multiprocessing.sharedctypes module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Event from the multiprocessing.sharedctypes module": {
		"description": "Event from the multiprocessing.sharedctypes module",
		"prefix": "Event",
		"body": ["Event"]},
	"JoinableQueue from the multiprocessing.sharedctypes module": {
		"description": "JoinableQueue from the multiprocessing.sharedctypes module",
		"prefix": "JoinableQueue",
		"body": ["JoinableQueue(${1:[maxsize]})"]},
	"Listener from the multiprocessing.sharedctypes module": {
		"description": "Listener from the multiprocessing.sharedctypes module",
		"prefix": "Listener",
		"body": ["Listener(${1:[address[}, ${2:family[}, ${3:backlog[}, ${4:authenticate[}, ${5:authkey]]]]]})"]},
	"Lock from the multiprocessing.sharedctypes module": {
		"description": "Lock from the multiprocessing.sharedctypes module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"Manager from the multiprocessing.sharedctypes module": {
		"description": "Manager from the multiprocessing.sharedctypes module",
		"prefix": "Manager",
		"body": ["Manager(${1:})"]},
	"Namespace from the multiprocessing.sharedctypes module": {
		"description": "Namespace from the multiprocessing.sharedctypes module",
		"prefix": "Namespace",
		"body": ["Namespace"]},
	"Pipe from the multiprocessing.sharedctypes module": {
		"description": "Pipe from the multiprocessing.sharedctypes module",
		"prefix": "Pipe",
		"body": ["Pipe(${1:[duplex]})"]},
	"Pool from the multiprocessing.sharedctypes module": {
		"description": "Pool from the multiprocessing.sharedctypes module",
		"prefix": "Pool",
		"body": ["Pool(${1:[processes[}, ${2:initializer[}, ${3:initargs[}, ${4:maxtasksperchild[}, ${5:context]]]]]})"]},
	"Process from the multiprocessing.sharedctypes module": {
		"description": "Process from the multiprocessing.sharedctypes module",
		"prefix": "Process",
		"body": ["Process(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"ProcessError from the multiprocessing.sharedctypes module": {
		"description": "ProcessError from the multiprocessing.sharedctypes module",
		"prefix": "ProcessError",
		"body": ["ProcessError"]},
	"Queue from the multiprocessing.sharedctypes module": {
		"description": "Queue from the multiprocessing.sharedctypes module",
		"prefix": "Queue",
		"body": ["Queue(${1:[maxsize]})"]},
	"RLock from the multiprocessing.sharedctypes module": {
		"description": "RLock from the multiprocessing.sharedctypes module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"RawArray from the multiprocessing.sharedctypes module": {
		"description": "RawArray from the multiprocessing.sharedctypes module",
		"prefix": "RawArray",
		"body": ["RawArray(${1:typecode_or_type}, ${2:size_or_initializer})"]},
	"RawValue from the multiprocessing.sharedctypes module": {
		"description": "RawValue from the multiprocessing.sharedctypes module",
		"prefix": "RawValue",
		"body": ["RawValue(${1:typecode_or_type}, ${2:*args})"]},
	"Semaphore from the multiprocessing.sharedctypes module": {
		"description": "Semaphore from the multiprocessing.sharedctypes module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:[value]})"]},
	"SimpleQueue from the multiprocessing.sharedctypes module": {
		"description": "SimpleQueue from the multiprocessing.sharedctypes module",
		"prefix": "SimpleQueue",
		"body": ["SimpleQueue"]},
	"SyncManager from the multiprocessing.sharedctypes module": {
		"description": "SyncManager from the multiprocessing.sharedctypes module",
		"prefix": "SyncManager",
		"body": ["SyncManager"]},
	"TimeoutError from the multiprocessing.sharedctypes module": {
		"description": "TimeoutError from the multiprocessing.sharedctypes module",
		"prefix": "TimeoutError",
		"body": ["TimeoutError"]},
	"Value from the multiprocessing.sharedctypes module": {
		"description": "Value from the multiprocessing.sharedctypes module",
		"prefix": "Value",
		"body": ["Value(${1:typecode_or_type}, ${2:*args}, ${3:lock=True})"]},
	"active_children() from the multiprocessing.sharedctypes module": {
		"description": "active_children() from the multiprocessing.sharedctypes module",
		"prefix": "active_children",
		"body": ["active_children(${1:})"]},
	"answer_challenge() from the multiprocessing.sharedctypes module": {
		"description": "answer_challenge() from the multiprocessing.sharedctypes module",
		"prefix": "answer_challenge",
		"body": ["answer_challenge(${1:connection}, ${2:authkey})"]},
	"copy() from the multiprocessing.sharedctypes module": {
		"description": "copy() from the multiprocessing.sharedctypes module",
		"prefix": "copy",
		"body": ["copy(${1:obj})"]},
	"cpu_count() from the multiprocessing.sharedctypes module": {
		"description": "cpu_count() from the multiprocessing.sharedctypes module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"current_process() from the multiprocessing.sharedctypes module": {
		"description": "current_process() from the multiprocessing.sharedctypes module",
		"prefix": "current_process",
		"body": ["current_process(${1:})"]},
	"deliver_challenge() from the multiprocessing.sharedctypes module": {
		"description": "deliver_challenge() from the multiprocessing.sharedctypes module",
		"prefix": "deliver_challenge",
		"body": ["deliver_challenge(${1:connection}, ${2:authkey})"]},
	"freeze_support() from the multiprocessing.sharedctypes module": {
		"description": "freeze_support() from the multiprocessing.sharedctypes module",
		"prefix": "freeze_support",
		"body": ["freeze_support(${1:})"]},
	"get_all_start_methods() from the multiprocessing.sharedctypes module": {
		"description": "get_all_start_methods() from the multiprocessing.sharedctypes module",
		"prefix": "get_all_start_methods",
		"body": ["get_all_start_methods(${1:})"]},
	"get_context() from the multiprocessing.sharedctypes module": {
		"description": "get_context() from the multiprocessing.sharedctypes module",
		"prefix": "get_context",
		"body": ["get_context(${1:method=None})"]},
	"get_logger() from the multiprocessing.sharedctypes module": {
		"description": "get_logger() from the multiprocessing.sharedctypes module",
		"prefix": "get_logger",
		"body": ["get_logger(${1:})"]},
	"get_start_method() from the multiprocessing.sharedctypes module": {
		"description": "get_start_method() from the multiprocessing.sharedctypes module",
		"prefix": "get_start_method",
		"body": ["get_start_method(${1:allow_none=False})"]},
	"log_to_stderr() from the multiprocessing.sharedctypes module": {
		"description": "log_to_stderr() from the multiprocessing.sharedctypes module",
		"prefix": "log_to_stderr",
		"body": ["log_to_stderr(${1:})"]},
	"set_executable() from the multiprocessing.sharedctypes module": {
		"description": "set_executable() from the multiprocessing.sharedctypes module",
		"prefix": "set_executable",
		"body": ["set_executable(${1:})"]},
	"set_start_method() from the multiprocessing.sharedctypes module": {
		"description": "set_start_method() from the multiprocessing.sharedctypes module",
		"prefix": "set_start_method",
		"body": ["set_start_method(${1:method})"]},
	"synchronized() from the multiprocessing.sharedctypes module": {
		"description": "synchronized() from the multiprocessing.sharedctypes module",
		"prefix": "synchronized",
		"body": ["synchronized(${1:obj[}, ${2:lock]})"]},
	"wait() from the multiprocessing.sharedctypes module": {
		"description": "wait() from the multiprocessing.sharedctypes module",
		"prefix": "wait",
		"body": ["wait(${1:object_list,})"]},
// netrc completion
	"NetrcParseError from the netrc module": {
		"description": "NetrcParseError from the netrc module",
		"prefix": "NetrcParseError",
		"body": ["NetrcParseError"]},
	"__repr__() from the netrc module": {
		"description": "__repr__() from the netrc module",
		"prefix": "__repr__",
		"body": ["__repr__(${1:})"]},
	"authenticators() from the netrc module": {
		"description": "authenticators() from the netrc module",
		"prefix": "authenticators",
		"body": ["authenticators(${1:host})"]},
	"hosts() from the netrc module": {
		"description": "hosts() from the netrc module",
		"prefix": "hosts",
		"body": ["hosts()"]},
	"macros() from the netrc module": {
		"description": "macros() from the netrc module",
		"prefix": "macros",
		"body": ["macros()"]},
	"netrc() from the netrc module": {
		"description": "netrc() from the netrc module",
		"prefix": "netrc",
		"body": ["netrc(${1:[file]})"]},
// nis completion
	"cat() from the nis module": {
		"description": "cat() from the nis module",
		"prefix": "cat",
		"body": ["cat(${1:mapname}, ${2:domain=default_domain})"]},
	"error() from the nis module": {
		"description": "error() from the nis module",
		"prefix": "error",
		"body": ["error()"]},
	"get_default_domain() from the nis module": {
		"description": "get_default_domain() from the nis module",
		"prefix": "get_default_domain",
		"body": ["get_default_domain(${1:})"]},
	"maps() from the nis module": {
		"description": "maps() from the nis module",
		"prefix": "maps",
		"body": ["maps(${1:domain=default_domain})"]},
	"match() from the nis module": {
		"description": "match() from the nis module",
		"prefix": "match",
		"body": ["match(${1:key,})"]},
// nntplib completion
	"NNTP from the nntplib module": {
		"description": "NNTP from the nntplib module",
		"prefix": "NNTP",
		"body": ["NNTP(${1:host}, ${2:port=119}, ${3:user=None}, ${4:password=None}, ${5:readermode=None}, ${6:usenetrc=False[}, ${7:timeout]})"]},
	"NNTPDataError from the nntplib module": {
		"description": "NNTPDataError from the nntplib module",
		"prefix": "NNTPDataError",
		"body": ["NNTPDataError"]},
	"NNTPError from the nntplib module": {
		"description": "NNTPError from the nntplib module",
		"prefix": "NNTPError",
		"body": ["NNTPError"]},
	"NNTPPermanentError from the nntplib module": {
		"description": "NNTPPermanentError from the nntplib module",
		"prefix": "NNTPPermanentError",
		"body": ["NNTPPermanentError"]},
	"NNTPProtocolError from the nntplib module": {
		"description": "NNTPProtocolError from the nntplib module",
		"prefix": "NNTPProtocolError",
		"body": ["NNTPProtocolError"]},
	"NNTPReplyError from the nntplib module": {
		"description": "NNTPReplyError from the nntplib module",
		"prefix": "NNTPReplyError",
		"body": ["NNTPReplyError"]},
	"NNTPTemporaryError from the nntplib module": {
		"description": "NNTPTemporaryError from the nntplib module",
		"prefix": "NNTPTemporaryError",
		"body": ["NNTPTemporaryError"]},
	"NNTP_SSL from the nntplib module": {
		"description": "NNTP_SSL from the nntplib module",
		"prefix": "NNTP_SSL",
		"body": ["NNTP_SSL(${1:host}, ${2:port=563}, ${3:user=None}, ${4:password=None}, ${5:ssl_context=None}, ${6:readermode=None}, ${7:usenetrc=False[}, ${8:timeout]})"]},
	"article() from the nntplib module": {
		"description": "article() from the nntplib module",
		"prefix": "article",
		"body": ["article(${1:message_spec=None}, ${2:*}, ${3:file=None})"]},
	"body() from the nntplib module": {
		"description": "body() from the nntplib module",
		"prefix": "body",
		"body": ["body(${1:message_spec=None}, ${2:*}, ${3:file=None})"]},
	"date() from the nntplib module": {
		"description": "date() from the nntplib module",
		"prefix": "date",
		"body": ["date(${1:})"]},
	"decode_header() from the nntplib module": {
		"description": "decode_header() from the nntplib module",
		"prefix": "decode_header",
		"body": ["decode_header(${1:header_str})"]},
	"description() from the nntplib module": {
		"description": "description() from the nntplib module",
		"prefix": "description",
		"body": ["description(${1:group})"]},
	"descriptions() from the nntplib module": {
		"description": "descriptions() from the nntplib module",
		"prefix": "descriptions",
		"body": ["descriptions(${1:grouppattern})"]},
	"getcapabilities() from the nntplib module": {
		"description": "getcapabilities() from the nntplib module",
		"prefix": "getcapabilities",
		"body": ["getcapabilities(${1:})"]},
	"getwelcome() from the nntplib module": {
		"description": "getwelcome() from the nntplib module",
		"prefix": "getwelcome",
		"body": ["getwelcome(${1:})"]},
	"group() from the nntplib module": {
		"description": "group() from the nntplib module",
		"prefix": "group",
		"body": ["group(${1:name})"]},
	"head() from the nntplib module": {
		"description": "head() from the nntplib module",
		"prefix": "head",
		"body": ["head(${1:message_spec=None}, ${2:*}, ${3:file=None})"]},
	"help() from the nntplib module": {
		"description": "help() from the nntplib module",
		"prefix": "help",
		"body": ["help(${1:*}, ${2:file=None})"]},
	"ihave() from the nntplib module": {
		"description": "ihave() from the nntplib module",
		"prefix": "ihave",
		"body": ["ihave(${1:message_id}, ${2:data})"]},
	"last() from the nntplib module": {
		"description": "last() from the nntplib module",
		"prefix": "last",
		"body": ["last(${1:})"]},
	"list() from the nntplib module": {
		"description": "list() from the nntplib module",
		"prefix": "list",
		"body": ["list(${1:group_pattern=None}, ${2:*}, ${3:file=None})"]},
	"login() from the nntplib module": {
		"description": "login() from the nntplib module",
		"prefix": "login",
		"body": ["login(${1:user=None}, ${2:password=None}, ${3:usenetrc=True})"]},
	"newgroups() from the nntplib module": {
		"description": "newgroups() from the nntplib module",
		"prefix": "newgroups",
		"body": ["newgroups(${1:date}, ${2:*}, ${3:file=None})"]},
	"newnews() from the nntplib module": {
		"description": "newnews() from the nntplib module",
		"prefix": "newnews",
		"body": ["newnews(${1:group}, ${2:date}, ${3:*}, ${4:file=None})"]},
	"next() from the nntplib module": {
		"description": "next() from the nntplib module",
		"prefix": "next",
		"body": ["next(${1:})"]},
	"nntp_implementation() from the nntplib module": {
		"description": "nntp_implementation() from the nntplib module",
		"prefix": "nntp_implementation",
		"body": ["nntp_implementation()"]},
	"nntp_version() from the nntplib module": {
		"description": "nntp_version() from the nntplib module",
		"prefix": "nntp_version",
		"body": ["nntp_version()"]},
	"over() from the nntplib module": {
		"description": "over() from the nntplib module",
		"prefix": "over",
		"body": ["over(${1:message_spec}, ${2:*}, ${3:file=None})"]},
	"post() from the nntplib module": {
		"description": "post() from the nntplib module",
		"prefix": "post",
		"body": ["post(${1:data})"]},
	"quit() from the nntplib module": {
		"description": "quit() from the nntplib module",
		"prefix": "quit",
		"body": ["quit(${1:})"]},
	"set_debuglevel() from the nntplib module": {
		"description": "set_debuglevel() from the nntplib module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:level})"]},
	"slave() from the nntplib module": {
		"description": "slave() from the nntplib module",
		"prefix": "slave",
		"body": ["slave(${1:})"]},
	"starttls() from the nntplib module": {
		"description": "starttls() from the nntplib module",
		"prefix": "starttls",
		"body": ["starttls(${1:ssl_context=None})"]},
	"stat() from the nntplib module": {
		"description": "stat() from the nntplib module",
		"prefix": "stat",
		"body": ["stat(${1:message_spec=None})"]},
	"xhdr() from the nntplib module": {
		"description": "xhdr() from the nntplib module",
		"prefix": "xhdr",
		"body": ["xhdr(${1:hdr}, ${2:str}, ${3:*}, ${4:file=None})"]},
	"xover() from the nntplib module": {
		"description": "xover() from the nntplib module",
		"prefix": "xover",
		"body": ["xover(${1:start}, ${2:end}, ${3:*}, ${4:file=None})"]},
	"xpath() from the nntplib module": {
		"description": "xpath() from the nntplib module",
		"prefix": "xpath",
		"body": ["xpath(${1:id})"]},
// numbers completion
	"Complex from the numbers module": {
		"description": "Complex from the numbers module",
		"prefix": "Complex",
		"body": ["Complex"]},
	"Integral from the numbers module": {
		"description": "Integral from the numbers module",
		"prefix": "Integral",
		"body": ["Integral"]},
	"Number from the numbers module": {
		"description": "Number from the numbers module",
		"prefix": "Number",
		"body": ["Number"]},
	"Rational from the numbers module": {
		"description": "Rational from the numbers module",
		"prefix": "Rational",
		"body": ["Rational"]},
	"Real from the numbers module": {
		"description": "Real from the numbers module",
		"prefix": "Real",
		"body": ["Real"]},
// operator completion
	"__abs__() from the operator module": {
		"description": "__abs__() from the operator module",
		"prefix": "__abs__",
		"body": ["__abs__(${1:obj})"]},
	"__add__() from the operator module": {
		"description": "__add__() from the operator module",
		"prefix": "__add__",
		"body": ["__add__(${1:a}, ${2:b})"]},
	"__and__() from the operator module": {
		"description": "__and__() from the operator module",
		"prefix": "__and__",
		"body": ["__and__(${1:a}, ${2:b})"]},
	"__concat__() from the operator module": {
		"description": "__concat__() from the operator module",
		"prefix": "__concat__",
		"body": ["__concat__(${1:a}, ${2:b})"]},
	"__contains__() from the operator module": {
		"description": "__contains__() from the operator module",
		"prefix": "__contains__",
		"body": ["__contains__(${1:a}, ${2:b})"]},
	"__delitem__() from the operator module": {
		"description": "__delitem__() from the operator module",
		"prefix": "__delitem__",
		"body": ["__delitem__(${1:a}, ${2:b})"]},
	"__eq__() from the operator module": {
		"description": "__eq__() from the operator module",
		"prefix": "__eq__",
		"body": ["__eq__(${1:a}, ${2:b})"]},
	"__floordiv__() from the operator module": {
		"description": "__floordiv__() from the operator module",
		"prefix": "__floordiv__",
		"body": ["__floordiv__(${1:a}, ${2:b})"]},
	"__ge__() from the operator module": {
		"description": "__ge__() from the operator module",
		"prefix": "__ge__",
		"body": ["__ge__(${1:a}, ${2:b})"]},
	"__getitem__() from the operator module": {
		"description": "__getitem__() from the operator module",
		"prefix": "__getitem__",
		"body": ["__getitem__(${1:a}, ${2:b})"]},
	"__gt__() from the operator module": {
		"description": "__gt__() from the operator module",
		"prefix": "__gt__",
		"body": ["__gt__(${1:a}, ${2:b})"]},
	"__iadd__() from the operator module": {
		"description": "__iadd__() from the operator module",
		"prefix": "__iadd__",
		"body": ["__iadd__(${1:a}, ${2:b})"]},
	"__iand__() from the operator module": {
		"description": "__iand__() from the operator module",
		"prefix": "__iand__",
		"body": ["__iand__(${1:a}, ${2:b})"]},
	"__iconcat__() from the operator module": {
		"description": "__iconcat__() from the operator module",
		"prefix": "__iconcat__",
		"body": ["__iconcat__(${1:a}, ${2:b})"]},
	"__ifloordiv__() from the operator module": {
		"description": "__ifloordiv__() from the operator module",
		"prefix": "__ifloordiv__",
		"body": ["__ifloordiv__(${1:a}, ${2:b})"]},
	"__ilshift__() from the operator module": {
		"description": "__ilshift__() from the operator module",
		"prefix": "__ilshift__",
		"body": ["__ilshift__(${1:a}, ${2:b})"]},
	"__imatmul__() from the operator module": {
		"description": "__imatmul__() from the operator module",
		"prefix": "__imatmul__",
		"body": ["__imatmul__(${1:a}, ${2:b})"]},
	"__imod__() from the operator module": {
		"description": "__imod__() from the operator module",
		"prefix": "__imod__",
		"body": ["__imod__(${1:a}, ${2:b})"]},
	"__imul__() from the operator module": {
		"description": "__imul__() from the operator module",
		"prefix": "__imul__",
		"body": ["__imul__(${1:a}, ${2:b})"]},
	"__index__() from the operator module": {
		"description": "__index__() from the operator module",
		"prefix": "__index__",
		"body": ["__index__(${1:a})"]},
	"__inv__() from the operator module": {
		"description": "__inv__() from the operator module",
		"prefix": "__inv__",
		"body": ["__inv__(${1:obj})"]},
	"__invert__() from the operator module": {
		"description": "__invert__() from the operator module",
		"prefix": "__invert__",
		"body": ["__invert__(${1:obj})"]},
	"__ior__() from the operator module": {
		"description": "__ior__() from the operator module",
		"prefix": "__ior__",
		"body": ["__ior__(${1:a}, ${2:b})"]},
	"__ipow__() from the operator module": {
		"description": "__ipow__() from the operator module",
		"prefix": "__ipow__",
		"body": ["__ipow__(${1:a}, ${2:b})"]},
	"__irshift__() from the operator module": {
		"description": "__irshift__() from the operator module",
		"prefix": "__irshift__",
		"body": ["__irshift__(${1:a}, ${2:b})"]},
	"__isub__() from the operator module": {
		"description": "__isub__() from the operator module",
		"prefix": "__isub__",
		"body": ["__isub__(${1:a}, ${2:b})"]},
	"__itruediv__() from the operator module": {
		"description": "__itruediv__() from the operator module",
		"prefix": "__itruediv__",
		"body": ["__itruediv__(${1:a}, ${2:b})"]},
	"__ixor__() from the operator module": {
		"description": "__ixor__() from the operator module",
		"prefix": "__ixor__",
		"body": ["__ixor__(${1:a}, ${2:b})"]},
	"__le__() from the operator module": {
		"description": "__le__() from the operator module",
		"prefix": "__le__",
		"body": ["__le__(${1:a}, ${2:b})"]},
	"__lshift__() from the operator module": {
		"description": "__lshift__() from the operator module",
		"prefix": "__lshift__",
		"body": ["__lshift__(${1:a}, ${2:b})"]},
	"__lt__() from the operator module": {
		"description": "__lt__() from the operator module",
		"prefix": "__lt__",
		"body": ["__lt__(${1:a}, ${2:b})"]},
	"__matmul__() from the operator module": {
		"description": "__matmul__() from the operator module",
		"prefix": "__matmul__",
		"body": ["__matmul__(${1:a}, ${2:b})"]},
	"__mod__() from the operator module": {
		"description": "__mod__() from the operator module",
		"prefix": "__mod__",
		"body": ["__mod__(${1:a}, ${2:b})"]},
	"__mul__() from the operator module": {
		"description": "__mul__() from the operator module",
		"prefix": "__mul__",
		"body": ["__mul__(${1:a}, ${2:b})"]},
	"__ne__() from the operator module": {
		"description": "__ne__() from the operator module",
		"prefix": "__ne__",
		"body": ["__ne__(${1:a}, ${2:b})"]},
	"__neg__() from the operator module": {
		"description": "__neg__() from the operator module",
		"prefix": "__neg__",
		"body": ["__neg__(${1:obj})"]},
	"__not__() from the operator module": {
		"description": "__not__() from the operator module",
		"prefix": "__not__",
		"body": ["__not__(${1:obj})"]},
	"__or__() from the operator module": {
		"description": "__or__() from the operator module",
		"prefix": "__or__",
		"body": ["__or__(${1:a}, ${2:b})"]},
	"__pos__() from the operator module": {
		"description": "__pos__() from the operator module",
		"prefix": "__pos__",
		"body": ["__pos__(${1:obj})"]},
	"__pow__() from the operator module": {
		"description": "__pow__() from the operator module",
		"prefix": "__pow__",
		"body": ["__pow__(${1:a}, ${2:b})"]},
	"__rshift__() from the operator module": {
		"description": "__rshift__() from the operator module",
		"prefix": "__rshift__",
		"body": ["__rshift__(${1:a}, ${2:b})"]},
	"__setitem__() from the operator module": {
		"description": "__setitem__() from the operator module",
		"prefix": "__setitem__",
		"body": ["__setitem__(${1:a}, ${2:b}, ${3:c})"]},
	"__sub__() from the operator module": {
		"description": "__sub__() from the operator module",
		"prefix": "__sub__",
		"body": ["__sub__(${1:a}, ${2:b})"]},
	"__truediv__() from the operator module": {
		"description": "__truediv__() from the operator module",
		"prefix": "__truediv__",
		"body": ["__truediv__(${1:a}, ${2:b})"]},
	"__xor__() from the operator module": {
		"description": "__xor__() from the operator module",
		"prefix": "__xor__",
		"body": ["__xor__(${1:a}, ${2:b})"]},
	"abs() from the operator module": {
		"description": "abs() from the operator module",
		"prefix": "abs",
		"body": ["abs(${1:obj})"]},
	"add() from the operator module": {
		"description": "add() from the operator module",
		"prefix": "add",
		"body": ["add(${1:a}, ${2:b})"]},
	"and_() from the operator module": {
		"description": "and_() from the operator module",
		"prefix": "and_",
		"body": ["and_(${1:a}, ${2:b})"]},
	"attrgetter() from the operator module": {
		"description": "attrgetter() from the operator module",
		"prefix": "attrgetter",
		"body": ["attrgetter(${1:*attrs})"]},
	"attrgetter() from the operator module": {
		"description": "attrgetter() from the operator module",
		"prefix": "attrgetter",
		"body": ["attrgetter(${1:attr})"]},
	"concat() from the operator module": {
		"description": "concat() from the operator module",
		"prefix": "concat",
		"body": ["concat(${1:a}, ${2:b})"]},
	"contains() from the operator module": {
		"description": "contains() from the operator module",
		"prefix": "contains",
		"body": ["contains(${1:a}, ${2:b})"]},
	"countOf() from the operator module": {
		"description": "countOf() from the operator module",
		"prefix": "countOf",
		"body": ["countOf(${1:a}, ${2:b})"]},
	"delitem() from the operator module": {
		"description": "delitem() from the operator module",
		"prefix": "delitem",
		"body": ["delitem(${1:a}, ${2:b})"]},
	"eq() from the operator module": {
		"description": "eq() from the operator module",
		"prefix": "eq",
		"body": ["eq(${1:a}, ${2:b})"]},
	"floordiv() from the operator module": {
		"description": "floordiv() from the operator module",
		"prefix": "floordiv",
		"body": ["floordiv(${1:a}, ${2:b})"]},
	"ge() from the operator module": {
		"description": "ge() from the operator module",
		"prefix": "ge",
		"body": ["ge(${1:a}, ${2:b})"]},
	"getitem() from the operator module": {
		"description": "getitem() from the operator module",
		"prefix": "getitem",
		"body": ["getitem(${1:a}, ${2:b})"]},
	"gt() from the operator module": {
		"description": "gt() from the operator module",
		"prefix": "gt",
		"body": ["gt(${1:a}, ${2:b})"]},
	"iadd() from the operator module": {
		"description": "iadd() from the operator module",
		"prefix": "iadd",
		"body": ["iadd(${1:a}, ${2:b})"]},
	"iand() from the operator module": {
		"description": "iand() from the operator module",
		"prefix": "iand",
		"body": ["iand(${1:a}, ${2:b})"]},
	"iconcat() from the operator module": {
		"description": "iconcat() from the operator module",
		"prefix": "iconcat",
		"body": ["iconcat(${1:a}, ${2:b})"]},
	"ifloordiv() from the operator module": {
		"description": "ifloordiv() from the operator module",
		"prefix": "ifloordiv",
		"body": ["ifloordiv(${1:a}, ${2:b})"]},
	"ilshift() from the operator module": {
		"description": "ilshift() from the operator module",
		"prefix": "ilshift",
		"body": ["ilshift(${1:a}, ${2:b})"]},
	"imatmul() from the operator module": {
		"description": "imatmul() from the operator module",
		"prefix": "imatmul",
		"body": ["imatmul(${1:a}, ${2:b})"]},
	"imod() from the operator module": {
		"description": "imod() from the operator module",
		"prefix": "imod",
		"body": ["imod(${1:a}, ${2:b})"]},
	"imul() from the operator module": {
		"description": "imul() from the operator module",
		"prefix": "imul",
		"body": ["imul(${1:a}, ${2:b})"]},
	"index() from the operator module": {
		"description": "index() from the operator module",
		"prefix": "index",
		"body": ["index(${1:a})"]},
	"indexOf() from the operator module": {
		"description": "indexOf() from the operator module",
		"prefix": "indexOf",
		"body": ["indexOf(${1:a}, ${2:b})"]},
	"inv() from the operator module": {
		"description": "inv() from the operator module",
		"prefix": "inv",
		"body": ["inv(${1:obj})"]},
	"invert() from the operator module": {
		"description": "invert() from the operator module",
		"prefix": "invert",
		"body": ["invert(${1:obj})"]},
	"ior() from the operator module": {
		"description": "ior() from the operator module",
		"prefix": "ior",
		"body": ["ior(${1:a}, ${2:b})"]},
	"ipow() from the operator module": {
		"description": "ipow() from the operator module",
		"prefix": "ipow",
		"body": ["ipow(${1:a}, ${2:b})"]},
	"irshift() from the operator module": {
		"description": "irshift() from the operator module",
		"prefix": "irshift",
		"body": ["irshift(${1:a}, ${2:b})"]},
	"is_() from the operator module": {
		"description": "is_() from the operator module",
		"prefix": "is_",
		"body": ["is_(${1:a}, ${2:b})"]},
	"is_not() from the operator module": {
		"description": "is_not() from the operator module",
		"prefix": "is_not",
		"body": ["is_not(${1:a}, ${2:b})"]},
	"isub() from the operator module": {
		"description": "isub() from the operator module",
		"prefix": "isub",
		"body": ["isub(${1:a}, ${2:b})"]},
	"itemgetter() from the operator module": {
		"description": "itemgetter() from the operator module",
		"prefix": "itemgetter",
		"body": ["itemgetter(${1:*items})"]},
	"itruediv() from the operator module": {
		"description": "itruediv() from the operator module",
		"prefix": "itruediv",
		"body": ["itruediv(${1:a}, ${2:b})"]},
	"ixor() from the operator module": {
		"description": "ixor() from the operator module",
		"prefix": "ixor",
		"body": ["ixor(${1:a}, ${2:b})"]},
	"le() from the operator module": {
		"description": "le() from the operator module",
		"prefix": "le",
		"body": ["le(${1:a}, ${2:b})"]},
	"length_hint() from the operator module": {
		"description": "length_hint() from the operator module",
		"prefix": "length_hint",
		"body": ["length_hint(${1:obj}, ${2:default=0})"]},
	"lshift() from the operator module": {
		"description": "lshift() from the operator module",
		"prefix": "lshift",
		"body": ["lshift(${1:a}, ${2:b})"]},
	"lt() from the operator module": {
		"description": "lt() from the operator module",
		"prefix": "lt",
		"body": ["lt(${1:a}, ${2:b})"]},
	"matmul() from the operator module": {
		"description": "matmul() from the operator module",
		"prefix": "matmul",
		"body": ["matmul(${1:a}, ${2:b})"]},
	"methodcaller() from the operator module": {
		"description": "methodcaller() from the operator module",
		"prefix": "methodcaller",
		"body": ["methodcaller(${1:name[}, ${2:args...]})"]},
	"mod() from the operator module": {
		"description": "mod() from the operator module",
		"prefix": "mod",
		"body": ["mod(${1:a}, ${2:b})"]},
	"mul() from the operator module": {
		"description": "mul() from the operator module",
		"prefix": "mul",
		"body": ["mul(${1:a}, ${2:b})"]},
	"ne() from the operator module": {
		"description": "ne() from the operator module",
		"prefix": "ne",
		"body": ["ne(${1:a}, ${2:b})"]},
	"neg() from the operator module": {
		"description": "neg() from the operator module",
		"prefix": "neg",
		"body": ["neg(${1:obj})"]},
	"not_() from the operator module": {
		"description": "not_() from the operator module",
		"prefix": "not_",
		"body": ["not_(${1:obj})"]},
	"or_() from the operator module": {
		"description": "or_() from the operator module",
		"prefix": "or_",
		"body": ["or_(${1:a}, ${2:b})"]},
	"pos() from the operator module": {
		"description": "pos() from the operator module",
		"prefix": "pos",
		"body": ["pos(${1:obj})"]},
	"pow() from the operator module": {
		"description": "pow() from the operator module",
		"prefix": "pow",
		"body": ["pow(${1:a}, ${2:b})"]},
	"rshift() from the operator module": {
		"description": "rshift() from the operator module",
		"prefix": "rshift",
		"body": ["rshift(${1:a}, ${2:b})"]},
	"setitem() from the operator module": {
		"description": "setitem() from the operator module",
		"prefix": "setitem",
		"body": ["setitem(${1:a}, ${2:b}, ${3:c})"]},
	"sub() from the operator module": {
		"description": "sub() from the operator module",
		"prefix": "sub",
		"body": ["sub(${1:a}, ${2:b})"]},
	"truediv() from the operator module": {
		"description": "truediv() from the operator module",
		"prefix": "truediv",
		"body": ["truediv(${1:a}, ${2:b})"]},
	"truth() from the operator module": {
		"description": "truth() from the operator module",
		"prefix": "truth",
		"body": ["truth(${1:obj})"]},
	"xor() from the operator module": {
		"description": "xor() from the operator module",
		"prefix": "xor",
		"body": ["xor(${1:a,})"]},
// optparse completion
	"ACTIONS from the optparse module": {
		"description": "ACTIONS from the optparse module",
		"prefix": "ACTIONS",
		"body": ["ACTIONS"]},
	"ALWAYS_TYPED_ACTIONS from the optparse module": {
		"description": "ALWAYS_TYPED_ACTIONS from the optparse module",
		"prefix": "ALWAYS_TYPED_ACTIONS",
		"body": ["ALWAYS_TYPED_ACTIONS"]},
	"OptionGroup from the optparse module": {
		"description": "OptionGroup from the optparse module",
		"prefix": "OptionGroup",
		"body": ["OptionGroup(${1:parser}, ${2:title}, ${3:description=None})"]},
	"OptionParser from the optparse module": {
		"description": "OptionParser from the optparse module",
		"prefix": "OptionParser",
		"body": ["OptionParser(${1:...})"]},
	"STORE_ACTIONS from the optparse module": {
		"description": "STORE_ACTIONS from the optparse module",
		"prefix": "STORE_ACTIONS",
		"body": ["STORE_ACTIONS"]},
	"TYPED_ACTIONS from the optparse module": {
		"description": "TYPED_ACTIONS from the optparse module",
		"prefix": "TYPED_ACTIONS",
		"body": ["TYPED_ACTIONS"]},
	"TYPES from the optparse module": {
		"description": "TYPES from the optparse module",
		"prefix": "TYPES",
		"body": ["TYPES"]},
	"TYPE_CHECKER from the optparse module": {
		"description": "TYPE_CHECKER from the optparse module",
		"prefix": "TYPE_CHECKER",
		"body": ["TYPE_CHECKER"]},
	"action() from the optparse module": {
		"description": "action() from the optparse module",
		"prefix": "action",
		"body": ["action()"]},
	"add_option() from the optparse module": {
		"description": "add_option() from the optparse module",
		"prefix": "add_option",
		"body": ["add_option(${1:*opt_str}, ${2:attr=value}, ${3:...})"]},
	"add_option() from the optparse module": {
		"description": "add_option() from the optparse module",
		"prefix": "add_option",
		"body": ["add_option(${1:option})"]},
	"callback() from the optparse module": {
		"description": "callback() from the optparse module",
		"prefix": "callback",
		"body": ["callback()"]},
	"callback_args() from the optparse module": {
		"description": "callback_args() from the optparse module",
		"prefix": "callback_args",
		"body": ["callback_args()"]},
	"callback_kwargs() from the optparse module": {
		"description": "callback_kwargs() from the optparse module",
		"prefix": "callback_kwargs",
		"body": ["callback_kwargs()"]},
	"choices() from the optparse module": {
		"description": "choices() from the optparse module",
		"prefix": "choices",
		"body": ["choices()"]},
	"const() from the optparse module": {
		"description": "const() from the optparse module",
		"prefix": "const",
		"body": ["const()"]},
	"default() from the optparse module": {
		"description": "default() from the optparse module",
		"prefix": "default",
		"body": ["default()"]},
	"dest() from the optparse module": {
		"description": "dest() from the optparse module",
		"prefix": "dest",
		"body": ["dest()"]},
	"disable_interspersed_args() from the optparse module": {
		"description": "disable_interspersed_args() from the optparse module",
		"prefix": "disable_interspersed_args",
		"body": ["disable_interspersed_args(${1:})"]},
	"enable_interspersed_args() from the optparse module": {
		"description": "enable_interspersed_args() from the optparse module",
		"prefix": "enable_interspersed_args",
		"body": ["enable_interspersed_args(${1:})"]},
	"get_option() from the optparse module": {
		"description": "get_option() from the optparse module",
		"prefix": "get_option",
		"body": ["get_option(${1:opt_str})"]},
	"get_option_group() from the optparse module": {
		"description": "get_option_group() from the optparse module",
		"prefix": "get_option_group",
		"body": ["get_option_group(${1:opt_str})"]},
	"get_usage() from the optparse module": {
		"description": "get_usage() from the optparse module",
		"prefix": "get_usage",
		"body": ["get_usage(${1:})"]},
	"get_version() from the optparse module": {
		"description": "get_version() from the optparse module",
		"prefix": "get_version",
		"body": ["get_version(${1:})"]},
	"has_option() from the optparse module": {
		"description": "has_option() from the optparse module",
		"prefix": "has_option",
		"body": ["has_option(${1:opt_str})"]},
	"help() from the optparse module": {
		"description": "help() from the optparse module",
		"prefix": "help",
		"body": ["help()"]},
	"metavar() from the optparse module": {
		"description": "metavar() from the optparse module",
		"prefix": "metavar",
		"body": ["metavar()"]},
	"nargs() from the optparse module": {
		"description": "nargs() from the optparse module",
		"prefix": "nargs",
		"body": ["nargs()"]},
	"print_usage() from the optparse module": {
		"description": "print_usage() from the optparse module",
		"prefix": "print_usage",
		"body": ["print_usage(${1:file=None})"]},
	"print_version() from the optparse module": {
		"description": "print_version() from the optparse module",
		"prefix": "print_version",
		"body": ["print_version(${1:file=None})"]},
	"remove_option() from the optparse module": {
		"description": "remove_option() from the optparse module",
		"prefix": "remove_option",
		"body": ["remove_option(${1:opt_str})"]},
	"set_defaults() from the optparse module": {
		"description": "set_defaults() from the optparse module",
		"prefix": "set_defaults",
		"body": ["set_defaults(${1:dest=value}, ${2:...})"]},
	"set_usage() from the optparse module": {
		"description": "set_usage() from the optparse module",
		"prefix": "set_usage",
		"body": ["set_usage(${1:usage})"]},
	"type() from the optparse module": {
		"description": "type() from the optparse module",
		"prefix": "type",
		"body": ["type()"]},
// os completion
	"CLD_CONTINUED from the os module": {
		"description": "CLD_CONTINUED from the os module",
		"prefix": "CLD_CONTINUED",
		"body": ["CLD_CONTINUED"]},
	"CLD_DUMPED from the os module": {
		"description": "CLD_DUMPED from the os module",
		"prefix": "CLD_DUMPED",
		"body": ["CLD_DUMPED"]},
	"CLD_EXITED from the os module": {
		"description": "CLD_EXITED from the os module",
		"prefix": "CLD_EXITED",
		"body": ["CLD_EXITED"]},
	"CLD_TRAPPED from the os module": {
		"description": "CLD_TRAPPED from the os module",
		"prefix": "CLD_TRAPPED",
		"body": ["CLD_TRAPPED"]},
	"DirEntry from the os module": {
		"description": "DirEntry from the os module",
		"prefix": "DirEntry",
		"body": ["DirEntry"]},
	"EX_CANTCREAT from the os module": {
		"description": "EX_CANTCREAT from the os module",
		"prefix": "EX_CANTCREAT",
		"body": ["EX_CANTCREAT"]},
	"EX_CONFIG from the os module": {
		"description": "EX_CONFIG from the os module",
		"prefix": "EX_CONFIG",
		"body": ["EX_CONFIG"]},
	"EX_DATAERR from the os module": {
		"description": "EX_DATAERR from the os module",
		"prefix": "EX_DATAERR",
		"body": ["EX_DATAERR"]},
	"EX_IOERR from the os module": {
		"description": "EX_IOERR from the os module",
		"prefix": "EX_IOERR",
		"body": ["EX_IOERR"]},
	"EX_NOHOST from the os module": {
		"description": "EX_NOHOST from the os module",
		"prefix": "EX_NOHOST",
		"body": ["EX_NOHOST"]},
	"EX_NOINPUT from the os module": {
		"description": "EX_NOINPUT from the os module",
		"prefix": "EX_NOINPUT",
		"body": ["EX_NOINPUT"]},
	"EX_NOPERM from the os module": {
		"description": "EX_NOPERM from the os module",
		"prefix": "EX_NOPERM",
		"body": ["EX_NOPERM"]},
	"EX_NOTFOUND from the os module": {
		"description": "EX_NOTFOUND from the os module",
		"prefix": "EX_NOTFOUND",
		"body": ["EX_NOTFOUND"]},
	"EX_NOUSER from the os module": {
		"description": "EX_NOUSER from the os module",
		"prefix": "EX_NOUSER",
		"body": ["EX_NOUSER"]},
	"EX_OK from the os module": {
		"description": "EX_OK from the os module",
		"prefix": "EX_OK",
		"body": ["EX_OK"]},
	"EX_OSERR from the os module": {
		"description": "EX_OSERR from the os module",
		"prefix": "EX_OSERR",
		"body": ["EX_OSERR"]},
	"EX_OSFILE from the os module": {
		"description": "EX_OSFILE from the os module",
		"prefix": "EX_OSFILE",
		"body": ["EX_OSFILE"]},
	"EX_PROTOCOL from the os module": {
		"description": "EX_PROTOCOL from the os module",
		"prefix": "EX_PROTOCOL",
		"body": ["EX_PROTOCOL"]},
	"EX_SOFTWARE from the os module": {
		"description": "EX_SOFTWARE from the os module",
		"prefix": "EX_SOFTWARE",
		"body": ["EX_SOFTWARE"]},
	"EX_TEMPFAIL from the os module": {
		"description": "EX_TEMPFAIL from the os module",
		"prefix": "EX_TEMPFAIL",
		"body": ["EX_TEMPFAIL"]},
	"EX_UNAVAILABLE from the os module": {
		"description": "EX_UNAVAILABLE from the os module",
		"prefix": "EX_UNAVAILABLE",
		"body": ["EX_UNAVAILABLE"]},
	"EX_USAGE from the os module": {
		"description": "EX_USAGE from the os module",
		"prefix": "EX_USAGE",
		"body": ["EX_USAGE"]},
	"F_LOCK from the os module": {
		"description": "F_LOCK from the os module",
		"prefix": "F_LOCK",
		"body": ["F_LOCK"]},
	"F_OK from the os module": {
		"description": "F_OK from the os module",
		"prefix": "F_OK",
		"body": ["F_OK"]},
	"F_TEST from the os module": {
		"description": "F_TEST from the os module",
		"prefix": "F_TEST",
		"body": ["F_TEST"]},
	"F_TLOCK from the os module": {
		"description": "F_TLOCK from the os module",
		"prefix": "F_TLOCK",
		"body": ["F_TLOCK"]},
	"F_ULOCK from the os module": {
		"description": "F_ULOCK from the os module",
		"prefix": "F_ULOCK",
		"body": ["F_ULOCK"]},
	"O_APPEND from the os module": {
		"description": "O_APPEND from the os module",
		"prefix": "O_APPEND",
		"body": ["O_APPEND"]},
	"O_ASYNC from the os module": {
		"description": "O_ASYNC from the os module",
		"prefix": "O_ASYNC",
		"body": ["O_ASYNC"]},
	"O_BINARY from the os module": {
		"description": "O_BINARY from the os module",
		"prefix": "O_BINARY",
		"body": ["O_BINARY"]},
	"O_CLOEXEC from the os module": {
		"description": "O_CLOEXEC from the os module",
		"prefix": "O_CLOEXEC",
		"body": ["O_CLOEXEC"]},
	"O_CREAT from the os module": {
		"description": "O_CREAT from the os module",
		"prefix": "O_CREAT",
		"body": ["O_CREAT"]},
	"O_DIRECT from the os module": {
		"description": "O_DIRECT from the os module",
		"prefix": "O_DIRECT",
		"body": ["O_DIRECT"]},
	"O_DIRECTORY from the os module": {
		"description": "O_DIRECTORY from the os module",
		"prefix": "O_DIRECTORY",
		"body": ["O_DIRECTORY"]},
	"O_DSYNC from the os module": {
		"description": "O_DSYNC from the os module",
		"prefix": "O_DSYNC",
		"body": ["O_DSYNC"]},
	"O_EXCL from the os module": {
		"description": "O_EXCL from the os module",
		"prefix": "O_EXCL",
		"body": ["O_EXCL"]},
	"O_EXLOCK from the os module": {
		"description": "O_EXLOCK from the os module",
		"prefix": "O_EXLOCK",
		"body": ["O_EXLOCK"]},
	"O_NDELAY from the os module": {
		"description": "O_NDELAY from the os module",
		"prefix": "O_NDELAY",
		"body": ["O_NDELAY"]},
	"O_NOATIME from the os module": {
		"description": "O_NOATIME from the os module",
		"prefix": "O_NOATIME",
		"body": ["O_NOATIME"]},
	"O_NOCTTY from the os module": {
		"description": "O_NOCTTY from the os module",
		"prefix": "O_NOCTTY",
		"body": ["O_NOCTTY"]},
	"O_NOFOLLOW from the os module": {
		"description": "O_NOFOLLOW from the os module",
		"prefix": "O_NOFOLLOW",
		"body": ["O_NOFOLLOW"]},
	"O_NOINHERIT from the os module": {
		"description": "O_NOINHERIT from the os module",
		"prefix": "O_NOINHERIT",
		"body": ["O_NOINHERIT"]},
	"O_NONBLOCK from the os module": {
		"description": "O_NONBLOCK from the os module",
		"prefix": "O_NONBLOCK",
		"body": ["O_NONBLOCK"]},
	"O_PATH from the os module": {
		"description": "O_PATH from the os module",
		"prefix": "O_PATH",
		"body": ["O_PATH"]},
	"O_RANDOM from the os module": {
		"description": "O_RANDOM from the os module",
		"prefix": "O_RANDOM",
		"body": ["O_RANDOM"]},
	"O_RDONLY from the os module": {
		"description": "O_RDONLY from the os module",
		"prefix": "O_RDONLY",
		"body": ["O_RDONLY"]},
	"O_RDWR from the os module": {
		"description": "O_RDWR from the os module",
		"prefix": "O_RDWR",
		"body": ["O_RDWR"]},
	"O_RSYNC from the os module": {
		"description": "O_RSYNC from the os module",
		"prefix": "O_RSYNC",
		"body": ["O_RSYNC"]},
	"O_SEQUENTIAL from the os module": {
		"description": "O_SEQUENTIAL from the os module",
		"prefix": "O_SEQUENTIAL",
		"body": ["O_SEQUENTIAL"]},
	"O_SHLOCK from the os module": {
		"description": "O_SHLOCK from the os module",
		"prefix": "O_SHLOCK",
		"body": ["O_SHLOCK"]},
	"O_SHORT_LIVED from the os module": {
		"description": "O_SHORT_LIVED from the os module",
		"prefix": "O_SHORT_LIVED",
		"body": ["O_SHORT_LIVED"]},
	"O_SYNC from the os module": {
		"description": "O_SYNC from the os module",
		"prefix": "O_SYNC",
		"body": ["O_SYNC"]},
	"O_TEMPORARY from the os module": {
		"description": "O_TEMPORARY from the os module",
		"prefix": "O_TEMPORARY",
		"body": ["O_TEMPORARY"]},
	"O_TEXT from the os module": {
		"description": "O_TEXT from the os module",
		"prefix": "O_TEXT",
		"body": ["O_TEXT"]},
	"O_TMPFILE from the os module": {
		"description": "O_TMPFILE from the os module",
		"prefix": "O_TMPFILE",
		"body": ["O_TMPFILE"]},
	"O_TRUNC from the os module": {
		"description": "O_TRUNC from the os module",
		"prefix": "O_TRUNC",
		"body": ["O_TRUNC"]},
	"O_WRONLY from the os module": {
		"description": "O_WRONLY from the os module",
		"prefix": "O_WRONLY",
		"body": ["O_WRONLY"]},
	"POSIX_FADV_DONTNEED from the os module": {
		"description": "POSIX_FADV_DONTNEED from the os module",
		"prefix": "POSIX_FADV_DONTNEED",
		"body": ["POSIX_FADV_DONTNEED"]},
	"POSIX_FADV_NOREUSE from the os module": {
		"description": "POSIX_FADV_NOREUSE from the os module",
		"prefix": "POSIX_FADV_NOREUSE",
		"body": ["POSIX_FADV_NOREUSE"]},
	"POSIX_FADV_NORMAL from the os module": {
		"description": "POSIX_FADV_NORMAL from the os module",
		"prefix": "POSIX_FADV_NORMAL",
		"body": ["POSIX_FADV_NORMAL"]},
	"POSIX_FADV_RANDOM from the os module": {
		"description": "POSIX_FADV_RANDOM from the os module",
		"prefix": "POSIX_FADV_RANDOM",
		"body": ["POSIX_FADV_RANDOM"]},
	"POSIX_FADV_SEQUENTIAL from the os module": {
		"description": "POSIX_FADV_SEQUENTIAL from the os module",
		"prefix": "POSIX_FADV_SEQUENTIAL",
		"body": ["POSIX_FADV_SEQUENTIAL"]},
	"POSIX_FADV_WILLNEED from the os module": {
		"description": "POSIX_FADV_WILLNEED from the os module",
		"prefix": "POSIX_FADV_WILLNEED",
		"body": ["POSIX_FADV_WILLNEED"]},
	"PRIO_PGRP from the os module": {
		"description": "PRIO_PGRP from the os module",
		"prefix": "PRIO_PGRP",
		"body": ["PRIO_PGRP"]},
	"PRIO_PROCESS from the os module": {
		"description": "PRIO_PROCESS from the os module",
		"prefix": "PRIO_PROCESS",
		"body": ["PRIO_PROCESS"]},
	"PRIO_USER from the os module": {
		"description": "PRIO_USER from the os module",
		"prefix": "PRIO_USER",
		"body": ["PRIO_USER"]},
	"P_ALL from the os module": {
		"description": "P_ALL from the os module",
		"prefix": "P_ALL",
		"body": ["P_ALL"]},
	"P_DETACH from the os module": {
		"description": "P_DETACH from the os module",
		"prefix": "P_DETACH",
		"body": ["P_DETACH"]},
	"P_NOWAIT from the os module": {
		"description": "P_NOWAIT from the os module",
		"prefix": "P_NOWAIT",
		"body": ["P_NOWAIT"]},
	"P_NOWAITO from the os module": {
		"description": "P_NOWAITO from the os module",
		"prefix": "P_NOWAITO",
		"body": ["P_NOWAITO"]},
	"P_OVERLAY from the os module": {
		"description": "P_OVERLAY from the os module",
		"prefix": "P_OVERLAY",
		"body": ["P_OVERLAY"]},
	"P_PGID from the os module": {
		"description": "P_PGID from the os module",
		"prefix": "P_PGID",
		"body": ["P_PGID"]},
	"P_PID from the os module": {
		"description": "P_PID from the os module",
		"prefix": "P_PID",
		"body": ["P_PID"]},
	"P_WAIT from the os module": {
		"description": "P_WAIT from the os module",
		"prefix": "P_WAIT",
		"body": ["P_WAIT"]},
	"RTLD_DEEPBIND from the os module": {
		"description": "RTLD_DEEPBIND from the os module",
		"prefix": "RTLD_DEEPBIND",
		"body": ["RTLD_DEEPBIND"]},
	"RTLD_GLOBAL from the os module": {
		"description": "RTLD_GLOBAL from the os module",
		"prefix": "RTLD_GLOBAL",
		"body": ["RTLD_GLOBAL"]},
	"RTLD_LAZY from the os module": {
		"description": "RTLD_LAZY from the os module",
		"prefix": "RTLD_LAZY",
		"body": ["RTLD_LAZY"]},
	"RTLD_LOCAL from the os module": {
		"description": "RTLD_LOCAL from the os module",
		"prefix": "RTLD_LOCAL",
		"body": ["RTLD_LOCAL"]},
	"RTLD_NODELETE from the os module": {
		"description": "RTLD_NODELETE from the os module",
		"prefix": "RTLD_NODELETE",
		"body": ["RTLD_NODELETE"]},
	"RTLD_NOLOAD from the os module": {
		"description": "RTLD_NOLOAD from the os module",
		"prefix": "RTLD_NOLOAD",
		"body": ["RTLD_NOLOAD"]},
	"RTLD_NOW from the os module": {
		"description": "RTLD_NOW from the os module",
		"prefix": "RTLD_NOW",
		"body": ["RTLD_NOW"]},
	"R_OK from the os module": {
		"description": "R_OK from the os module",
		"prefix": "R_OK",
		"body": ["R_OK"]},
	"SCHED_BATCH from the os module": {
		"description": "SCHED_BATCH from the os module",
		"prefix": "SCHED_BATCH",
		"body": ["SCHED_BATCH"]},
	"SCHED_FIFO from the os module": {
		"description": "SCHED_FIFO from the os module",
		"prefix": "SCHED_FIFO",
		"body": ["SCHED_FIFO"]},
	"SCHED_IDLE from the os module": {
		"description": "SCHED_IDLE from the os module",
		"prefix": "SCHED_IDLE",
		"body": ["SCHED_IDLE"]},
	"SCHED_OTHER from the os module": {
		"description": "SCHED_OTHER from the os module",
		"prefix": "SCHED_OTHER",
		"body": ["SCHED_OTHER"]},
	"SCHED_RESET_ON_FORK from the os module": {
		"description": "SCHED_RESET_ON_FORK from the os module",
		"prefix": "SCHED_RESET_ON_FORK",
		"body": ["SCHED_RESET_ON_FORK"]},
	"SCHED_RR from the os module": {
		"description": "SCHED_RR from the os module",
		"prefix": "SCHED_RR",
		"body": ["SCHED_RR"]},
	"SCHED_SPORADIC from the os module": {
		"description": "SCHED_SPORADIC from the os module",
		"prefix": "SCHED_SPORADIC",
		"body": ["SCHED_SPORADIC"]},
	"SEEK_CUR from the os module": {
		"description": "SEEK_CUR from the os module",
		"prefix": "SEEK_CUR",
		"body": ["SEEK_CUR"]},
	"SEEK_END from the os module": {
		"description": "SEEK_END from the os module",
		"prefix": "SEEK_END",
		"body": ["SEEK_END"]},
	"SEEK_SET from the os module": {
		"description": "SEEK_SET from the os module",
		"prefix": "SEEK_SET",
		"body": ["SEEK_SET"]},
	"SF_MNOWAIT from the os module": {
		"description": "SF_MNOWAIT from the os module",
		"prefix": "SF_MNOWAIT",
		"body": ["SF_MNOWAIT"]},
	"SF_NODISKIO from the os module": {
		"description": "SF_NODISKIO from the os module",
		"prefix": "SF_NODISKIO",
		"body": ["SF_NODISKIO"]},
	"SF_SYNC from the os module": {
		"description": "SF_SYNC from the os module",
		"prefix": "SF_SYNC",
		"body": ["SF_SYNC"]},
	"WCONTINUED from the os module": {
		"description": "WCONTINUED from the os module",
		"prefix": "WCONTINUED",
		"body": ["WCONTINUED"]},
	"WCOREDUMP from the os module": {
		"description": "WCOREDUMP from the os module",
		"prefix": "WCOREDUMP",
		"body": ["WCOREDUMP(${1:status})"]},
	"WEXITED from the os module": {
		"description": "WEXITED from the os module",
		"prefix": "WEXITED",
		"body": ["WEXITED"]},
	"WEXITSTATUS from the os module": {
		"description": "WEXITSTATUS from the os module",
		"prefix": "WEXITSTATUS",
		"body": ["WEXITSTATUS(${1:status})"]},
	"WIFCONTINUED from the os module": {
		"description": "WIFCONTINUED from the os module",
		"prefix": "WIFCONTINUED",
		"body": ["WIFCONTINUED(${1:status})"]},
	"WIFEXITED from the os module": {
		"description": "WIFEXITED from the os module",
		"prefix": "WIFEXITED",
		"body": ["WIFEXITED(${1:status})"]},
	"WIFSIGNALED from the os module": {
		"description": "WIFSIGNALED from the os module",
		"prefix": "WIFSIGNALED",
		"body": ["WIFSIGNALED(${1:status})"]},
	"WIFSTOPPED from the os module": {
		"description": "WIFSTOPPED from the os module",
		"prefix": "WIFSTOPPED",
		"body": ["WIFSTOPPED(${1:status})"]},
	"WNOHANG from the os module": {
		"description": "WNOHANG from the os module",
		"prefix": "WNOHANG",
		"body": ["WNOHANG"]},
	"WNOWAIT from the os module": {
		"description": "WNOWAIT from the os module",
		"prefix": "WNOWAIT",
		"body": ["WNOWAIT"]},
	"WSTOPPED from the os module": {
		"description": "WSTOPPED from the os module",
		"prefix": "WSTOPPED",
		"body": ["WSTOPPED"]},
	"WSTOPSIG from the os module": {
		"description": "WSTOPSIG from the os module",
		"prefix": "WSTOPSIG",
		"body": ["WSTOPSIG(${1:status})"]},
	"WTERMSIG from the os module": {
		"description": "WTERMSIG from the os module",
		"prefix": "WTERMSIG",
		"body": ["WTERMSIG(${1:status})"]},
	"WUNTRACED from the os module": {
		"description": "WUNTRACED from the os module",
		"prefix": "WUNTRACED",
		"body": ["WUNTRACED"]},
	"W_OK from the os module": {
		"description": "W_OK from the os module",
		"prefix": "W_OK",
		"body": ["W_OK"]},
	"XATTR_CREATE from the os module": {
		"description": "XATTR_CREATE from the os module",
		"prefix": "XATTR_CREATE",
		"body": ["XATTR_CREATE"]},
	"XATTR_REPLACE from the os module": {
		"description": "XATTR_REPLACE from the os module",
		"prefix": "XATTR_REPLACE",
		"body": ["XATTR_REPLACE"]},
	"XATTR_SIZE_MAX from the os module": {
		"description": "XATTR_SIZE_MAX from the os module",
		"prefix": "XATTR_SIZE_MAX",
		"body": ["XATTR_SIZE_MAX"]},
	"X_OK from the os module": {
		"description": "X_OK from the os module",
		"prefix": "X_OK",
		"body": ["X_OK"]},
	"_exit() from the os module": {
		"description": "_exit() from the os module",
		"prefix": "_exit",
		"body": ["_exit(${1:n})"]},
	"abort() from the os module": {
		"description": "abort() from the os module",
		"prefix": "abort",
		"body": ["abort(${1:})"]},
	"access() from the os module": {
		"description": "access() from the os module",
		"prefix": "access",
		"body": ["access(${1:path}, ${2:mode}, ${3:*}, ${4:dir_fd=None}, ${5:effective_ids=False}, ${6:follow_symlinks=True})"]},
	"altsep() from the os module": {
		"description": "altsep() from the os module",
		"prefix": "altsep",
		"body": ["altsep()"]},
	"chdir() from the os module": {
		"description": "chdir() from the os module",
		"prefix": "chdir",
		"body": ["chdir(${1:path})"]},
	"chdir() from the os module": {
		"description": "chdir() from the os module",
		"prefix": "chdir",
		"body": ["chdir(${1:path})"]},
	"chflags() from the os module": {
		"description": "chflags() from the os module",
		"prefix": "chflags",
		"body": ["chflags(${1:path}, ${2:flags}, ${3:*}, ${4:follow_symlinks=True})"]},
	"chmod() from the os module": {
		"description": "chmod() from the os module",
		"prefix": "chmod",
		"body": ["chmod(${1:path}, ${2:mode}, ${3:*}, ${4:dir_fd=None}, ${5:follow_symlinks=True})"]},
	"chown() from the os module": {
		"description": "chown() from the os module",
		"prefix": "chown",
		"body": ["chown(${1:path}, ${2:uid}, ${3:gid}, ${4:*}, ${5:dir_fd=None}, ${6:follow_symlinks=True})"]},
	"chroot() from the os module": {
		"description": "chroot() from the os module",
		"prefix": "chroot",
		"body": ["chroot(${1:path})"]},
	"close() from the os module": {
		"description": "close() from the os module",
		"prefix": "close",
		"body": ["close(${1:fd})"]},
	"closerange() from the os module": {
		"description": "closerange() from the os module",
		"prefix": "closerange",
		"body": ["closerange(${1:fd_low}, ${2:fd_high})"]},
	"confstr() from the os module": {
		"description": "confstr() from the os module",
		"prefix": "confstr",
		"body": ["confstr(${1:name})"]},
	"confstr_names() from the os module": {
		"description": "confstr_names() from the os module",
		"prefix": "confstr_names",
		"body": ["confstr_names()"]},
	"cpu_count() from the os module": {
		"description": "cpu_count() from the os module",
		"prefix": "cpu_count",
		"body": ["cpu_count(${1:})"]},
	"ctermid() from the os module": {
		"description": "ctermid() from the os module",
		"prefix": "ctermid",
		"body": ["ctermid(${1:})"]},
	"curdir() from the os module": {
		"description": "curdir() from the os module",
		"prefix": "curdir",
		"body": ["curdir()"]},
	"defpath() from the os module": {
		"description": "defpath() from the os module",
		"prefix": "defpath",
		"body": ["defpath()"]},
	"device_encoding() from the os module": {
		"description": "device_encoding() from the os module",
		"prefix": "device_encoding",
		"body": ["device_encoding(${1:fd})"]},
	"devnull() from the os module": {
		"description": "devnull() from the os module",
		"prefix": "devnull",
		"body": ["devnull()"]},
	"dup2() from the os module": {
		"description": "dup2() from the os module",
		"prefix": "dup2",
		"body": ["dup2(${1:fd}, ${2:fd2}, ${3:inheritable=True})"]},
	"dup() from the os module": {
		"description": "dup() from the os module",
		"prefix": "dup",
		"body": ["dup(${1:fd})"]},
	"environ() from the os module": {
		"description": "environ() from the os module",
		"prefix": "environ",
		"body": ["environ()"]},
	"environb() from the os module": {
		"description": "environb() from the os module",
		"prefix": "environb",
		"body": ["environb()"]},
	"error() from the os module": {
		"description": "error() from the os module",
		"prefix": "error",
		"body": ["error()"]},
	"execl() from the os module": {
		"description": "execl() from the os module",
		"prefix": "execl",
		"body": ["execl(${1:path}, ${2:arg0}, ${3:arg1}, ${4:...})"]},
	"execle() from the os module": {
		"description": "execle() from the os module",
		"prefix": "execle",
		"body": ["execle(${1:path}, ${2:arg0}, ${3:arg1}, ${4:...}, ${5:env})"]},
	"execlp() from the os module": {
		"description": "execlp() from the os module",
		"prefix": "execlp",
		"body": ["execlp(${1:file}, ${2:arg0}, ${3:arg1}, ${4:...})"]},
	"execlpe() from the os module": {
		"description": "execlpe() from the os module",
		"prefix": "execlpe",
		"body": ["execlpe(${1:file}, ${2:arg0}, ${3:arg1}, ${4:...}, ${5:env})"]},
	"execv() from the os module": {
		"description": "execv() from the os module",
		"prefix": "execv",
		"body": ["execv(${1:path}, ${2:args})"]},
	"execve() from the os module": {
		"description": "execve() from the os module",
		"prefix": "execve",
		"body": ["execve(${1:path}, ${2:args}, ${3:env})"]},
	"execvp() from the os module": {
		"description": "execvp() from the os module",
		"prefix": "execvp",
		"body": ["execvp(${1:file}, ${2:args})"]},
	"execvpe() from the os module": {
		"description": "execvpe() from the os module",
		"prefix": "execvpe",
		"body": ["execvpe(${1:file}, ${2:args}, ${3:env})"]},
	"extsep() from the os module": {
		"description": "extsep() from the os module",
		"prefix": "extsep",
		"body": ["extsep()"]},
	"fchdir() from the os module": {
		"description": "fchdir() from the os module",
		"prefix": "fchdir",
		"body": ["fchdir(${1:fd})"]},
	"fchmod() from the os module": {
		"description": "fchmod() from the os module",
		"prefix": "fchmod",
		"body": ["fchmod(${1:fd}, ${2:mode})"]},
	"fchown() from the os module": {
		"description": "fchown() from the os module",
		"prefix": "fchown",
		"body": ["fchown(${1:fd}, ${2:uid}, ${3:gid})"]},
	"fdatasync() from the os module": {
		"description": "fdatasync() from the os module",
		"prefix": "fdatasync",
		"body": ["fdatasync(${1:fd})"]},
	"fdopen() from the os module": {
		"description": "fdopen() from the os module",
		"prefix": "fdopen",
		"body": ["fdopen(${1:fd}, ${2:*args}, ${3:**kwargs})"]},
	"fork() from the os module": {
		"description": "fork() from the os module",
		"prefix": "fork",
		"body": ["fork(${1:})"]},
	"forkpty() from the os module": {
		"description": "forkpty() from the os module",
		"prefix": "forkpty",
		"body": ["forkpty(${1:})"]},
	"fpathconf() from the os module": {
		"description": "fpathconf() from the os module",
		"prefix": "fpathconf",
		"body": ["fpathconf(${1:fd}, ${2:name})"]},
	"fsdecode() from the os module": {
		"description": "fsdecode() from the os module",
		"prefix": "fsdecode",
		"body": ["fsdecode(${1:filename})"]},
	"fsencode() from the os module": {
		"description": "fsencode() from the os module",
		"prefix": "fsencode",
		"body": ["fsencode(${1:filename})"]},
	"fstat() from the os module": {
		"description": "fstat() from the os module",
		"prefix": "fstat",
		"body": ["fstat(${1:fd})"]},
	"fstatvfs() from the os module": {
		"description": "fstatvfs() from the os module",
		"prefix": "fstatvfs",
		"body": ["fstatvfs(${1:fd})"]},
	"fsync() from the os module": {
		"description": "fsync() from the os module",
		"prefix": "fsync",
		"body": ["fsync(${1:fd})"]},
	"ftruncate() from the os module": {
		"description": "ftruncate() from the os module",
		"prefix": "ftruncate",
		"body": ["ftruncate(${1:fd}, ${2:length})"]},
	"fwalk() from the os module": {
		"description": "fwalk() from the os module",
		"prefix": "fwalk",
		"body": ["fwalk(${1:top='.'}, ${2:topdown=True}, ${3:onerror=None}, ${4:*}, ${5:follow_symlinks=False}, ${6:dir_fd=None})"]},
	"get_blocking() from the os module": {
		"description": "get_blocking() from the os module",
		"prefix": "get_blocking",
		"body": ["get_blocking(${1:fd})"]},
	"get_exec_path() from the os module": {
		"description": "get_exec_path() from the os module",
		"prefix": "get_exec_path",
		"body": ["get_exec_path(${1:env=None})"]},
	"get_handle_inheritable() from the os module": {
		"description": "get_handle_inheritable() from the os module",
		"prefix": "get_handle_inheritable",
		"body": ["get_handle_inheritable(${1:handle})"]},
	"get_inheritable() from the os module": {
		"description": "get_inheritable() from the os module",
		"prefix": "get_inheritable",
		"body": ["get_inheritable(${1:fd})"]},
	"get_terminal_size() from the os module": {
		"description": "get_terminal_size() from the os module",
		"prefix": "get_terminal_size",
		"body": ["get_terminal_size(${1:fd=STDOUT_FILENO})"]},
	"getcwd() from the os module": {
		"description": "getcwd() from the os module",
		"prefix": "getcwd",
		"body": ["getcwd(${1:})"]},
	"getcwdb() from the os module": {
		"description": "getcwdb() from the os module",
		"prefix": "getcwdb",
		"body": ["getcwdb(${1:})"]},
	"getegid() from the os module": {
		"description": "getegid() from the os module",
		"prefix": "getegid",
		"body": ["getegid(${1:})"]},
	"getenv() from the os module": {
		"description": "getenv() from the os module",
		"prefix": "getenv",
		"body": ["getenv(${1:key}, ${2:default=None})"]},
	"getenvb() from the os module": {
		"description": "getenvb() from the os module",
		"prefix": "getenvb",
		"body": ["getenvb(${1:key}, ${2:default=None})"]},
	"geteuid() from the os module": {
		"description": "geteuid() from the os module",
		"prefix": "geteuid",
		"body": ["geteuid(${1:})"]},
	"getgid() from the os module": {
		"description": "getgid() from the os module",
		"prefix": "getgid",
		"body": ["getgid(${1:})"]},
	"getgrouplist() from the os module": {
		"description": "getgrouplist() from the os module",
		"prefix": "getgrouplist",
		"body": ["getgrouplist(${1:user}, ${2:group})"]},
	"getgroups() from the os module": {
		"description": "getgroups() from the os module",
		"prefix": "getgroups",
		"body": ["getgroups(${1:})"]},
	"getloadavg() from the os module": {
		"description": "getloadavg() from the os module",
		"prefix": "getloadavg",
		"body": ["getloadavg(${1:})"]},
	"getlogin() from the os module": {
		"description": "getlogin() from the os module",
		"prefix": "getlogin",
		"body": ["getlogin(${1:})"]},
	"getpgid() from the os module": {
		"description": "getpgid() from the os module",
		"prefix": "getpgid",
		"body": ["getpgid(${1:pid})"]},
	"getpgrp() from the os module": {
		"description": "getpgrp() from the os module",
		"prefix": "getpgrp",
		"body": ["getpgrp(${1:})"]},
	"getpid() from the os module": {
		"description": "getpid() from the os module",
		"prefix": "getpid",
		"body": ["getpid(${1:})"]},
	"getppid() from the os module": {
		"description": "getppid() from the os module",
		"prefix": "getppid",
		"body": ["getppid(${1:})"]},
	"getpriority() from the os module": {
		"description": "getpriority() from the os module",
		"prefix": "getpriority",
		"body": ["getpriority(${1:which}, ${2:who})"]},
	"getresgid() from the os module": {
		"description": "getresgid() from the os module",
		"prefix": "getresgid",
		"body": ["getresgid(${1:})"]},
	"getresuid() from the os module": {
		"description": "getresuid() from the os module",
		"prefix": "getresuid",
		"body": ["getresuid(${1:})"]},
	"getsid() from the os module": {
		"description": "getsid() from the os module",
		"prefix": "getsid",
		"body": ["getsid(${1:pid})"]},
	"getuid() from the os module": {
		"description": "getuid() from the os module",
		"prefix": "getuid",
		"body": ["getuid(${1:})"]},
	"getxattr() from the os module": {
		"description": "getxattr() from the os module",
		"prefix": "getxattr",
		"body": ["getxattr(${1:path}, ${2:attribute}, ${3:*}, ${4:follow_symlinks=True})"]},
	"initgroups() from the os module": {
		"description": "initgroups() from the os module",
		"prefix": "initgroups",
		"body": ["initgroups(${1:username}, ${2:gid})"]},
	"isatty() from the os module": {
		"description": "isatty() from the os module",
		"prefix": "isatty",
		"body": ["isatty(${1:fd})"]},
	"kill() from the os module": {
		"description": "kill() from the os module",
		"prefix": "kill",
		"body": ["kill(${1:pid}, ${2:sig})"]},
	"killpg() from the os module": {
		"description": "killpg() from the os module",
		"prefix": "killpg",
		"body": ["killpg(${1:pgid}, ${2:sig})"]},
	"lchflags() from the os module": {
		"description": "lchflags() from the os module",
		"prefix": "lchflags",
		"body": ["lchflags(${1:path}, ${2:flags})"]},
	"lchmod() from the os module": {
		"description": "lchmod() from the os module",
		"prefix": "lchmod",
		"body": ["lchmod(${1:path}, ${2:mode})"]},
	"lchown() from the os module": {
		"description": "lchown() from the os module",
		"prefix": "lchown",
		"body": ["lchown(${1:path}, ${2:uid}, ${3:gid})"]},
	"linesep() from the os module": {
		"description": "linesep() from the os module",
		"prefix": "linesep",
		"body": ["linesep()"]},
	"link() from the os module": {
		"description": "link() from the os module",
		"prefix": "link",
		"body": ["link(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None}, ${6:follow_symlinks=True})"]},
	"listdir() from the os module": {
		"description": "listdir() from the os module",
		"prefix": "listdir",
		"body": ["listdir(${1:path='.'})"]},
	"listxattr() from the os module": {
		"description": "listxattr() from the os module",
		"prefix": "listxattr",
		"body": ["listxattr(${1:path=None}, ${2:*}, ${3:follow_symlinks=True})"]},
	"lockf() from the os module": {
		"description": "lockf() from the os module",
		"prefix": "lockf",
		"body": ["lockf(${1:fd}, ${2:cmd}, ${3:len})"]},
	"lseek() from the os module": {
		"description": "lseek() from the os module",
		"prefix": "lseek",
		"body": ["lseek(${1:fd}, ${2:pos}, ${3:how})"]},
	"lstat() from the os module": {
		"description": "lstat() from the os module",
		"prefix": "lstat",
		"body": ["lstat(${1:path}, ${2:*}, ${3:dir_fd=None})"]},
	"major() from the os module": {
		"description": "major() from the os module",
		"prefix": "major",
		"body": ["major(${1:device})"]},
	"makedev() from the os module": {
		"description": "makedev() from the os module",
		"prefix": "makedev",
		"body": ["makedev(${1:major}, ${2:minor})"]},
	"makedirs() from the os module": {
		"description": "makedirs() from the os module",
		"prefix": "makedirs",
		"body": ["makedirs(${1:name}, ${2:mode=0o777}, ${3:exist_ok=False})"]},
	"minor() from the os module": {
		"description": "minor() from the os module",
		"prefix": "minor",
		"body": ["minor(${1:device})"]},
	"mkdir() from the os module": {
		"description": "mkdir() from the os module",
		"prefix": "mkdir",
		"body": ["mkdir(${1:path}, ${2:mode=0o777}, ${3:*}, ${4:dir_fd=None})"]},
	"mkfifo() from the os module": {
		"description": "mkfifo() from the os module",
		"prefix": "mkfifo",
		"body": ["mkfifo(${1:path}, ${2:mode=0o666}, ${3:*}, ${4:dir_fd=None})"]},
	"mknod() from the os module": {
		"description": "mknod() from the os module",
		"prefix": "mknod",
		"body": ["mknod(${1:path}, ${2:mode=0o600}, ${3:device=0}, ${4:*}, ${5:dir_fd=None})"]},
	"name() from the os module": {
		"description": "name() from the os module",
		"prefix": "name",
		"body": ["name()"]},
	"nice() from the os module": {
		"description": "nice() from the os module",
		"prefix": "nice",
		"body": ["nice(${1:increment})"]},
	"open() from the os module": {
		"description": "open() from the os module",
		"prefix": "open",
		"body": ["open(${1:path}, ${2:flags}, ${3:mode=0o777}, ${4:*}, ${5:dir_fd=None})"]},
	"openpty() from the os module": {
		"description": "openpty() from the os module",
		"prefix": "openpty",
		"body": ["openpty(${1:})"]},
	"pardir() from the os module": {
		"description": "pardir() from the os module",
		"prefix": "pardir",
		"body": ["pardir()"]},
	"pathconf() from the os module": {
		"description": "pathconf() from the os module",
		"prefix": "pathconf",
		"body": ["pathconf(${1:path}, ${2:name})"]},
	"pathconf_names() from the os module": {
		"description": "pathconf_names() from the os module",
		"prefix": "pathconf_names",
		"body": ["pathconf_names()"]},
	"pathsep() from the os module": {
		"description": "pathsep() from the os module",
		"prefix": "pathsep",
		"body": ["pathsep()"]},
	"pipe2() from the os module": {
		"description": "pipe2() from the os module",
		"prefix": "pipe2",
		"body": ["pipe2(${1:flags})"]},
	"pipe() from the os module": {
		"description": "pipe() from the os module",
		"prefix": "pipe",
		"body": ["pipe(${1:})"]},
	"plock() from the os module": {
		"description": "plock() from the os module",
		"prefix": "plock",
		"body": ["plock(${1:op})"]},
	"popen() from the os module": {
		"description": "popen() from the os module",
		"prefix": "popen",
		"body": ["popen(${1:cmd}, ${2:mode='r'}, ${3:buffering=-1})"]},
	"posix_fadvise() from the os module": {
		"description": "posix_fadvise() from the os module",
		"prefix": "posix_fadvise",
		"body": ["posix_fadvise(${1:fd}, ${2:offset}, ${3:len}, ${4:advice})"]},
	"posix_fallocate() from the os module": {
		"description": "posix_fallocate() from the os module",
		"prefix": "posix_fallocate",
		"body": ["posix_fallocate(${1:fd}, ${2:offset}, ${3:len})"]},
	"pread() from the os module": {
		"description": "pread() from the os module",
		"prefix": "pread",
		"body": ["pread(${1:fd}, ${2:buffersize}, ${3:offset})"]},
	"putenv() from the os module": {
		"description": "putenv() from the os module",
		"prefix": "putenv",
		"body": ["putenv(${1:key}, ${2:value})"]},
	"pwrite() from the os module": {
		"description": "pwrite() from the os module",
		"prefix": "pwrite",
		"body": ["pwrite(${1:fd}, ${2:str}, ${3:offset})"]},
	"read() from the os module": {
		"description": "read() from the os module",
		"prefix": "read",
		"body": ["read(${1:fd}, ${2:n})"]},
	"readlink() from the os module": {
		"description": "readlink() from the os module",
		"prefix": "readlink",
		"body": ["readlink(${1:path}, ${2:*}, ${3:dir_fd=None})"]},
	"readv() from the os module": {
		"description": "readv() from the os module",
		"prefix": "readv",
		"body": ["readv(${1:fd}, ${2:buffers})"]},
	"remove() from the os module": {
		"description": "remove() from the os module",
		"prefix": "remove",
		"body": ["remove(${1:path}, ${2:*}, ${3:dir_fd=None})"]},
	"removedirs() from the os module": {
		"description": "removedirs() from the os module",
		"prefix": "removedirs",
		"body": ["removedirs(${1:name})"]},
	"removexattr() from the os module": {
		"description": "removexattr() from the os module",
		"prefix": "removexattr",
		"body": ["removexattr(${1:path}, ${2:attribute}, ${3:*}, ${4:follow_symlinks=True})"]},
	"rename() from the os module": {
		"description": "rename() from the os module",
		"prefix": "rename",
		"body": ["rename(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None})"]},
	"renames() from the os module": {
		"description": "renames() from the os module",
		"prefix": "renames",
		"body": ["renames(${1:old}, ${2:new})"]},
	"replace() from the os module": {
		"description": "replace() from the os module",
		"prefix": "replace",
		"body": ["replace(${1:src}, ${2:dst}, ${3:*}, ${4:src_dir_fd=None}, ${5:dst_dir_fd=None})"]},
	"rmdir() from the os module": {
		"description": "rmdir() from the os module",
		"prefix": "rmdir",
		"body": ["rmdir(${1:path}, ${2:*}, ${3:dir_fd=None})"]},
	"scandir() from the os module": {
		"description": "scandir() from the os module",
		"prefix": "scandir",
		"body": ["scandir(${1:path='.'})"]},
	"sched_get_priority_max() from the os module": {
		"description": "sched_get_priority_max() from the os module",
		"prefix": "sched_get_priority_max",
		"body": ["sched_get_priority_max(${1:policy})"]},
	"sched_get_priority_min() from the os module": {
		"description": "sched_get_priority_min() from the os module",
		"prefix": "sched_get_priority_min",
		"body": ["sched_get_priority_min(${1:policy})"]},
	"sched_getaffinity() from the os module": {
		"description": "sched_getaffinity() from the os module",
		"prefix": "sched_getaffinity",
		"body": ["sched_getaffinity(${1:pid})"]},
	"sched_getparam() from the os module": {
		"description": "sched_getparam() from the os module",
		"prefix": "sched_getparam",
		"body": ["sched_getparam(${1:pid})"]},
	"sched_getscheduler() from the os module": {
		"description": "sched_getscheduler() from the os module",
		"prefix": "sched_getscheduler",
		"body": ["sched_getscheduler(${1:pid})"]},
	"sched_param() from the os module": {
		"description": "sched_param() from the os module",
		"prefix": "sched_param",
		"body": ["sched_param(${1:sched_priority})"]},
	"sched_rr_get_interval() from the os module": {
		"description": "sched_rr_get_interval() from the os module",
		"prefix": "sched_rr_get_interval",
		"body": ["sched_rr_get_interval(${1:pid})"]},
	"sched_setaffinity() from the os module": {
		"description": "sched_setaffinity() from the os module",
		"prefix": "sched_setaffinity",
		"body": ["sched_setaffinity(${1:pid}, ${2:mask})"]},
	"sched_setparam() from the os module": {
		"description": "sched_setparam() from the os module",
		"prefix": "sched_setparam",
		"body": ["sched_setparam(${1:pid}, ${2:param})"]},
	"sched_setscheduler() from the os module": {
		"description": "sched_setscheduler() from the os module",
		"prefix": "sched_setscheduler",
		"body": ["sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})"]},
	"sched_yield() from the os module": {
		"description": "sched_yield() from the os module",
		"prefix": "sched_yield",
		"body": ["sched_yield(${1:})"]},
	"sendfile() from the os module": {
		"description": "sendfile() from the os module",
		"prefix": "sendfile",
		"body": ["sendfile(${1:out}, ${2:in}, ${3:offset}, ${4:count}, ${5:[headers}, ${6:][trailers}, ${7:]flags=0})"]},
	"sendfile() from the os module": {
		"description": "sendfile() from the os module",
		"prefix": "sendfile",
		"body": ["sendfile(${1:out}, ${2:in}, ${3:offset}, ${4:count})"]},
	"sep() from the os module": {
		"description": "sep() from the os module",
		"prefix": "sep",
		"body": ["sep()"]},
	"set_blocking() from the os module": {
		"description": "set_blocking() from the os module",
		"prefix": "set_blocking",
		"body": ["set_blocking(${1:fd}, ${2:blocking})"]},
	"set_handle_inheritable() from the os module": {
		"description": "set_handle_inheritable() from the os module",
		"prefix": "set_handle_inheritable",
		"body": ["set_handle_inheritable(${1:handle}, ${2:inheritable})"]},
	"set_inheritable() from the os module": {
		"description": "set_inheritable() from the os module",
		"prefix": "set_inheritable",
		"body": ["set_inheritable(${1:fd}, ${2:inheritable})"]},
	"setegid() from the os module": {
		"description": "setegid() from the os module",
		"prefix": "setegid",
		"body": ["setegid(${1:egid})"]},
	"seteuid() from the os module": {
		"description": "seteuid() from the os module",
		"prefix": "seteuid",
		"body": ["seteuid(${1:euid})"]},
	"setgid() from the os module": {
		"description": "setgid() from the os module",
		"prefix": "setgid",
		"body": ["setgid(${1:gid})"]},
	"setgroups() from the os module": {
		"description": "setgroups() from the os module",
		"prefix": "setgroups",
		"body": ["setgroups(${1:groups})"]},
	"setpgid() from the os module": {
		"description": "setpgid() from the os module",
		"prefix": "setpgid",
		"body": ["setpgid(${1:pid}, ${2:pgrp})"]},
	"setpgrp() from the os module": {
		"description": "setpgrp() from the os module",
		"prefix": "setpgrp",
		"body": ["setpgrp(${1:})"]},
	"setpriority() from the os module": {
		"description": "setpriority() from the os module",
		"prefix": "setpriority",
		"body": ["setpriority(${1:which}, ${2:who}, ${3:priority})"]},
	"setregid() from the os module": {
		"description": "setregid() from the os module",
		"prefix": "setregid",
		"body": ["setregid(${1:rgid}, ${2:egid})"]},
	"setresgid() from the os module": {
		"description": "setresgid() from the os module",
		"prefix": "setresgid",
		"body": ["setresgid(${1:rgid}, ${2:egid}, ${3:sgid})"]},
	"setresuid() from the os module": {
		"description": "setresuid() from the os module",
		"prefix": "setresuid",
		"body": ["setresuid(${1:ruid}, ${2:euid}, ${3:suid})"]},
	"setreuid() from the os module": {
		"description": "setreuid() from the os module",
		"prefix": "setreuid",
		"body": ["setreuid(${1:ruid}, ${2:euid})"]},
	"setsid() from the os module": {
		"description": "setsid() from the os module",
		"prefix": "setsid",
		"body": ["setsid(${1:})"]},
	"setuid() from the os module": {
		"description": "setuid() from the os module",
		"prefix": "setuid",
		"body": ["setuid(${1:uid})"]},
	"setxattr() from the os module": {
		"description": "setxattr() from the os module",
		"prefix": "setxattr",
		"body": ["setxattr(${1:path}, ${2:attribute}, ${3:value}, ${4:flags=0}, ${5:*}, ${6:follow_symlinks=True})"]},
	"spawnl() from the os module": {
		"description": "spawnl() from the os module",
		"prefix": "spawnl",
		"body": ["spawnl(${1:mode}, ${2:path}, ${3:...})"]},
	"spawnle() from the os module": {
		"description": "spawnle() from the os module",
		"prefix": "spawnle",
		"body": ["spawnle(${1:mode}, ${2:path}, ${3:...}, ${4:env})"]},
	"spawnlp() from the os module": {
		"description": "spawnlp() from the os module",
		"prefix": "spawnlp",
		"body": ["spawnlp(${1:mode}, ${2:file}, ${3:...})"]},
	"spawnlpe() from the os module": {
		"description": "spawnlpe() from the os module",
		"prefix": "spawnlpe",
		"body": ["spawnlpe(${1:mode}, ${2:file}, ${3:...}, ${4:env})"]},
	"spawnv() from the os module": {
		"description": "spawnv() from the os module",
		"prefix": "spawnv",
		"body": ["spawnv(${1:mode}, ${2:path}, ${3:args})"]},
	"spawnve() from the os module": {
		"description": "spawnve() from the os module",
		"prefix": "spawnve",
		"body": ["spawnve(${1:mode}, ${2:path}, ${3:args}, ${4:env})"]},
	"spawnvp() from the os module": {
		"description": "spawnvp() from the os module",
		"prefix": "spawnvp",
		"body": ["spawnvp(${1:mode}, ${2:file}, ${3:args})"]},
	"spawnvpe() from the os module": {
		"description": "spawnvpe() from the os module",
		"prefix": "spawnvpe",
		"body": ["spawnvpe(${1:mode}, ${2:file}, ${3:args}, ${4:env})"]},
	"startfile() from the os module": {
		"description": "startfile() from the os module",
		"prefix": "startfile",
		"body": ["startfile(${1:path[}, ${2:operation]})"]},
	"stat() from the os module": {
		"description": "stat() from the os module",
		"prefix": "stat",
		"body": ["stat(${1:path}, ${2:*}, ${3:dir_fd=None}, ${4:follow_symlinks=True})"]},
	"stat_float_times() from the os module": {
		"description": "stat_float_times() from the os module",
		"prefix": "stat_float_times",
		"body": ["stat_float_times(${1:[newvalue]})"]},
	"stat_result() from the os module": {
		"description": "stat_result() from the os module",
		"prefix": "stat_result",
		"body": ["stat_result()"]},
	"statvfs() from the os module": {
		"description": "statvfs() from the os module",
		"prefix": "statvfs",
		"body": ["statvfs(${1:path})"]},
	"strerror() from the os module": {
		"description": "strerror() from the os module",
		"prefix": "strerror",
		"body": ["strerror(${1:code})"]},
	"supports_bytes_environ() from the os module": {
		"description": "supports_bytes_environ() from the os module",
		"prefix": "supports_bytes_environ",
		"body": ["supports_bytes_environ()"]},
	"supports_dir_fd() from the os module": {
		"description": "supports_dir_fd() from the os module",
		"prefix": "supports_dir_fd",
		"body": ["supports_dir_fd()"]},
	"supports_effective_ids() from the os module": {
		"description": "supports_effective_ids() from the os module",
		"prefix": "supports_effective_ids",
		"body": ["supports_effective_ids()"]},
	"supports_fd() from the os module": {
		"description": "supports_fd() from the os module",
		"prefix": "supports_fd",
		"body": ["supports_fd()"]},
	"supports_follow_symlinks() from the os module": {
		"description": "supports_follow_symlinks() from the os module",
		"prefix": "supports_follow_symlinks",
		"body": ["supports_follow_symlinks()"]},
	"symlink() from the os module": {
		"description": "symlink() from the os module",
		"prefix": "symlink",
		"body": ["symlink(${1:src}, ${2:dst}, ${3:target_is_directory=False}, ${4:*}, ${5:dir_fd=None})"]},
	"sync() from the os module": {
		"description": "sync() from the os module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"sysconf() from the os module": {
		"description": "sysconf() from the os module",
		"prefix": "sysconf",
		"body": ["sysconf(${1:name})"]},
	"sysconf_names() from the os module": {
		"description": "sysconf_names() from the os module",
		"prefix": "sysconf_names",
		"body": ["sysconf_names()"]},
	"system() from the os module": {
		"description": "system() from the os module",
		"prefix": "system",
		"body": ["system(${1:command})"]},
	"tcgetpgrp() from the os module": {
		"description": "tcgetpgrp() from the os module",
		"prefix": "tcgetpgrp",
		"body": ["tcgetpgrp(${1:fd})"]},
	"tcsetpgrp() from the os module": {
		"description": "tcsetpgrp() from the os module",
		"prefix": "tcsetpgrp",
		"body": ["tcsetpgrp(${1:fd}, ${2:pg})"]},
	"terminal_size() from the os module": {
		"description": "terminal_size() from the os module",
		"prefix": "terminal_size",
		"body": ["terminal_size()"]},
	"times() from the os module": {
		"description": "times() from the os module",
		"prefix": "times",
		"body": ["times(${1:})"]},
	"truncate() from the os module": {
		"description": "truncate() from the os module",
		"prefix": "truncate",
		"body": ["truncate(${1:path}, ${2:length})"]},
	"ttyname() from the os module": {
		"description": "ttyname() from the os module",
		"prefix": "ttyname",
		"body": ["ttyname(${1:fd})"]},
	"umask() from the os module": {
		"description": "umask() from the os module",
		"prefix": "umask",
		"body": ["umask(${1:mask})"]},
	"uname() from the os module": {
		"description": "uname() from the os module",
		"prefix": "uname",
		"body": ["uname(${1:})"]},
	"unlink() from the os module": {
		"description": "unlink() from the os module",
		"prefix": "unlink",
		"body": ["unlink(${1:path}, ${2:*}, ${3:dir_fd=None})"]},
	"unsetenv() from the os module": {
		"description": "unsetenv() from the os module",
		"prefix": "unsetenv",
		"body": ["unsetenv(${1:key})"]},
	"urandom() from the os module": {
		"description": "urandom() from the os module",
		"prefix": "urandom",
		"body": ["urandom(${1:n})"]},
	"utime() from the os module": {
		"description": "utime() from the os module",
		"prefix": "utime",
		"body": ["utime(${1:path}, ${2:times=None}, ${3:*}, ${4:[ns}, ${5:]dir_fd=None}, ${6:follow_symlinks=True})"]},
	"wait3() from the os module": {
		"description": "wait3() from the os module",
		"prefix": "wait3",
		"body": ["wait3(${1:options})"]},
	"wait4() from the os module": {
		"description": "wait4() from the os module",
		"prefix": "wait4",
		"body": ["wait4(${1:pid}, ${2:options})"]},
	"wait() from the os module": {
		"description": "wait() from the os module",
		"prefix": "wait",
		"body": ["wait(${1:})"]},
	"waitid() from the os module": {
		"description": "waitid() from the os module",
		"prefix": "waitid",
		"body": ["waitid(${1:idtype}, ${2:id}, ${3:options})"]},
	"waitpid() from the os module": {
		"description": "waitpid() from the os module",
		"prefix": "waitpid",
		"body": ["waitpid(${1:pid}, ${2:options})"]},
	"walk() from the os module": {
		"description": "walk() from the os module",
		"prefix": "walk",
		"body": ["walk(${1:top}, ${2:topdown=True}, ${3:onerror=None}, ${4:followlinks=False})"]},
	"write() from the os module": {
		"description": "write() from the os module",
		"prefix": "write",
		"body": ["write(${1:fd}, ${2:str})"]},
	"writev() from the os module": {
		"description": "writev() from the os module",
		"prefix": "writev",
		"body": ["writev(${1:fd,})"]},
// os.path completion
	"abspath() from the os.path module": {
		"description": "abspath() from the os.path module",
		"prefix": "abspath",
		"body": ["abspath(${1:path})"]},
	"basename() from the os.path module": {
		"description": "basename() from the os.path module",
		"prefix": "basename",
		"body": ["basename(${1:path})"]},
	"commonpath() from the os.path module": {
		"description": "commonpath() from the os.path module",
		"prefix": "commonpath",
		"body": ["commonpath(${1:paths})"]},
	"commonprefix() from the os.path module": {
		"description": "commonprefix() from the os.path module",
		"prefix": "commonprefix",
		"body": ["commonprefix(${1:list})"]},
	"dirname() from the os.path module": {
		"description": "dirname() from the os.path module",
		"prefix": "dirname",
		"body": ["dirname(${1:path})"]},
	"exists() from the os.path module": {
		"description": "exists() from the os.path module",
		"prefix": "exists",
		"body": ["exists(${1:path})"]},
	"expanduser() from the os.path module": {
		"description": "expanduser() from the os.path module",
		"prefix": "expanduser",
		"body": ["expanduser(${1:path})"]},
	"expandvars() from the os.path module": {
		"description": "expandvars() from the os.path module",
		"prefix": "expandvars",
		"body": ["expandvars(${1:path})"]},
	"getatime() from the os.path module": {
		"description": "getatime() from the os.path module",
		"prefix": "getatime",
		"body": ["getatime(${1:path})"]},
	"getctime() from the os.path module": {
		"description": "getctime() from the os.path module",
		"prefix": "getctime",
		"body": ["getctime(${1:path})"]},
	"getmtime() from the os.path module": {
		"description": "getmtime() from the os.path module",
		"prefix": "getmtime",
		"body": ["getmtime(${1:path})"]},
	"getsize() from the os.path module": {
		"description": "getsize() from the os.path module",
		"prefix": "getsize",
		"body": ["getsize(${1:path})"]},
	"isabs() from the os.path module": {
		"description": "isabs() from the os.path module",
		"prefix": "isabs",
		"body": ["isabs(${1:path})"]},
	"isdir() from the os.path module": {
		"description": "isdir() from the os.path module",
		"prefix": "isdir",
		"body": ["isdir(${1:path})"]},
	"isfile() from the os.path module": {
		"description": "isfile() from the os.path module",
		"prefix": "isfile",
		"body": ["isfile(${1:path})"]},
	"islink() from the os.path module": {
		"description": "islink() from the os.path module",
		"prefix": "islink",
		"body": ["islink(${1:path})"]},
	"ismount() from the os.path module": {
		"description": "ismount() from the os.path module",
		"prefix": "ismount",
		"body": ["ismount(${1:path})"]},
	"join() from the os.path module": {
		"description": "join() from the os.path module",
		"prefix": "join",
		"body": ["join(${1:path}, ${2:*paths})"]},
	"lexists() from the os.path module": {
		"description": "lexists() from the os.path module",
		"prefix": "lexists",
		"body": ["lexists(${1:path})"]},
	"normcase() from the os.path module": {
		"description": "normcase() from the os.path module",
		"prefix": "normcase",
		"body": ["normcase(${1:path})"]},
	"normpath() from the os.path module": {
		"description": "normpath() from the os.path module",
		"prefix": "normpath",
		"body": ["normpath(${1:path})"]},
	"realpath() from the os.path module": {
		"description": "realpath() from the os.path module",
		"prefix": "realpath",
		"body": ["realpath(${1:path})"]},
	"relpath() from the os.path module": {
		"description": "relpath() from the os.path module",
		"prefix": "relpath",
		"body": ["relpath(${1:path}, ${2:start=os.curdir})"]},
	"samefile() from the os.path module": {
		"description": "samefile() from the os.path module",
		"prefix": "samefile",
		"body": ["samefile(${1:path1}, ${2:path2})"]},
	"sameopenfile() from the os.path module": {
		"description": "sameopenfile() from the os.path module",
		"prefix": "sameopenfile",
		"body": ["sameopenfile(${1:fp1}, ${2:fp2})"]},
	"samestat() from the os.path module": {
		"description": "samestat() from the os.path module",
		"prefix": "samestat",
		"body": ["samestat(${1:stat1}, ${2:stat2})"]},
	"split() from the os.path module": {
		"description": "split() from the os.path module",
		"prefix": "split",
		"body": ["split(${1:path})"]},
	"splitdrive() from the os.path module": {
		"description": "splitdrive() from the os.path module",
		"prefix": "splitdrive",
		"body": ["splitdrive(${1:path})"]},
	"splitext() from the os.path module": {
		"description": "splitext() from the os.path module",
		"prefix": "splitext",
		"body": ["splitext(${1:path})"]},
	"splitunc() from the os.path module": {
		"description": "splitunc() from the os.path module",
		"prefix": "splitunc",
		"body": ["splitunc(${1:path})"]},
	"supports_unicode_filenames() from the os.path module": {
		"description": "supports_unicode_filenames() from the os.path module",
		"prefix": "supports_unicode_filenames",
		"body": ["supports_unicode_filenames()"]},
// ossaudiodev completion
	"OSSAudioError from the ossaudiodev module": {
		"description": "OSSAudioError from the ossaudiodev module",
		"prefix": "OSSAudioError",
		"body": ["OSSAudioError"]},
	"bufsize() from the ossaudiodev module": {
		"description": "bufsize() from the ossaudiodev module",
		"prefix": "bufsize",
		"body": ["bufsize(${1:})"]},
	"channels() from the ossaudiodev module": {
		"description": "channels() from the ossaudiodev module",
		"prefix": "channels",
		"body": ["channels(${1:nchannels})"]},
	"close() from the ossaudiodev module": {
		"description": "close() from the ossaudiodev module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"closed() from the ossaudiodev module": {
		"description": "closed() from the ossaudiodev module",
		"prefix": "closed",
		"body": ["closed()"]},
	"controls() from the ossaudiodev module": {
		"description": "controls() from the ossaudiodev module",
		"prefix": "controls",
		"body": ["controls(${1:})"]},
	"fileno() from the ossaudiodev module": {
		"description": "fileno() from the ossaudiodev module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"get() from the ossaudiodev module": {
		"description": "get() from the ossaudiodev module",
		"prefix": "get",
		"body": ["get(${1:control})"]},
	"get_recsrc() from the ossaudiodev module": {
		"description": "get_recsrc() from the ossaudiodev module",
		"prefix": "get_recsrc",
		"body": ["get_recsrc(${1:})"]},
	"getfmts() from the ossaudiodev module": {
		"description": "getfmts() from the ossaudiodev module",
		"prefix": "getfmts",
		"body": ["getfmts(${1:})"]},
	"mode() from the ossaudiodev module": {
		"description": "mode() from the ossaudiodev module",
		"prefix": "mode",
		"body": ["mode()"]},
	"name() from the ossaudiodev module": {
		"description": "name() from the ossaudiodev module",
		"prefix": "name",
		"body": ["name()"]},
	"nonblock() from the ossaudiodev module": {
		"description": "nonblock() from the ossaudiodev module",
		"prefix": "nonblock",
		"body": ["nonblock(${1:})"]},
	"obufcount() from the ossaudiodev module": {
		"description": "obufcount() from the ossaudiodev module",
		"prefix": "obufcount",
		"body": ["obufcount(${1:})"]},
	"obuffree() from the ossaudiodev module": {
		"description": "obuffree() from the ossaudiodev module",
		"prefix": "obuffree",
		"body": ["obuffree(${1:})"]},
	"open() from the ossaudiodev module": {
		"description": "open() from the ossaudiodev module",
		"prefix": "open",
		"body": ["open(${1:device}, ${2:mode})"]},
	"open() from the ossaudiodev module": {
		"description": "open() from the ossaudiodev module",
		"prefix": "open",
		"body": ["open(${1:mode})"]},
	"openmixer() from the ossaudiodev module": {
		"description": "openmixer() from the ossaudiodev module",
		"prefix": "openmixer",
		"body": ["openmixer(${1:[device]})"]},
	"post() from the ossaudiodev module": {
		"description": "post() from the ossaudiodev module",
		"prefix": "post",
		"body": ["post(${1:})"]},
	"read() from the ossaudiodev module": {
		"description": "read() from the ossaudiodev module",
		"prefix": "read",
		"body": ["read(${1:size})"]},
	"reccontrols() from the ossaudiodev module": {
		"description": "reccontrols() from the ossaudiodev module",
		"prefix": "reccontrols",
		"body": ["reccontrols(${1:})"]},
	"reset() from the ossaudiodev module": {
		"description": "reset() from the ossaudiodev module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"set() from the ossaudiodev module": {
		"description": "set() from the ossaudiodev module",
		"prefix": "set",
		"body": ["set(${1:control}, ${2:}, ${3:left}, ${4:right})"]},
	"set_recsrc() from the ossaudiodev module": {
		"description": "set_recsrc() from the ossaudiodev module",
		"prefix": "set_recsrc",
		"body": ["set_recsrc(${1:bitmask})"]},
	"setfmt() from the ossaudiodev module": {
		"description": "setfmt() from the ossaudiodev module",
		"prefix": "setfmt",
		"body": ["setfmt(${1:format})"]},
	"setparameters() from the ossaudiodev module": {
		"description": "setparameters() from the ossaudiodev module",
		"prefix": "setparameters",
		"body": ["setparameters(${1:format}, ${2:nchannels}, ${3:samplerate[}, ${4:strict=False]})"]},
	"speed() from the ossaudiodev module": {
		"description": "speed() from the ossaudiodev module",
		"prefix": "speed",
		"body": ["speed(${1:samplerate})"]},
	"stereocontrols() from the ossaudiodev module": {
		"description": "stereocontrols() from the ossaudiodev module",
		"prefix": "stereocontrols",
		"body": ["stereocontrols(${1:})"]},
	"sync() from the ossaudiodev module": {
		"description": "sync() from the ossaudiodev module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
	"write() from the ossaudiodev module": {
		"description": "write() from the ossaudiodev module",
		"prefix": "write",
		"body": ["write(${1:data})"]},
	"writeall() from the ossaudiodev module": {
		"description": "writeall() from the ossaudiodev module",
		"prefix": "writeall",
		"body": ["writeall(${1:data})"]},
// parser completion
	"ParserError from the parser module": {
		"description": "ParserError from the parser module",
		"prefix": "ParserError",
		"body": ["ParserError"]},
	"STType from the parser module": {
		"description": "STType from the parser module",
		"prefix": "STType",
		"body": ["STType"]},
	"compile() from the parser module": {
		"description": "compile() from the parser module",
		"prefix": "compile",
		"body": ["compile(${1:filename=''})"]},
	"compilest() from the parser module": {
		"description": "compilest() from the parser module",
		"prefix": "compilest",
		"body": ["compilest(${1:st}, ${2:filename=''})"]},
	"expr() from the parser module": {
		"description": "expr() from the parser module",
		"prefix": "expr",
		"body": ["expr(${1:source})"]},
	"isexpr() from the parser module": {
		"description": "isexpr() from the parser module",
		"prefix": "isexpr",
		"body": ["isexpr(${1:st})"]},
	"isexpr() from the parser module": {
		"description": "isexpr() from the parser module",
		"prefix": "isexpr",
		"body": ["isexpr(${1:})"]},
	"issuite() from the parser module": {
		"description": "issuite() from the parser module",
		"prefix": "issuite",
		"body": ["issuite(${1:st})"]},
	"issuite() from the parser module": {
		"description": "issuite() from the parser module",
		"prefix": "issuite",
		"body": ["issuite(${1:})"]},
	"sequence2st() from the parser module": {
		"description": "sequence2st() from the parser module",
		"prefix": "sequence2st",
		"body": ["sequence2st(${1:sequence})"]},
	"st2list() from the parser module": {
		"description": "st2list() from the parser module",
		"prefix": "st2list",
		"body": ["st2list(${1:st}, ${2:line_info=False}, ${3:col_info=False})"]},
	"st2tuple() from the parser module": {
		"description": "st2tuple() from the parser module",
		"prefix": "st2tuple",
		"body": ["st2tuple(${1:st}, ${2:line_info=False}, ${3:col_info=False})"]},
	"suite() from the parser module": {
		"description": "suite() from the parser module",
		"prefix": "suite",
		"body": ["suite(${1:source})"]},
	"tolist() from the parser module": {
		"description": "tolist() from the parser module",
		"prefix": "tolist",
		"body": ["tolist(${1:line_info=False}, ${2:col_info=False})"]},
	"totuple() from the parser module": {
		"description": "totuple() from the parser module",
		"prefix": "totuple",
		"body": ["totuple(${1:line_info=False}, ${2:col_info=False})"]},
	"tuple2st() from the parser module": {
		"description": "tuple2st() from the parser module",
		"prefix": "tuple2st",
		"body": ["tuple2st(${1:sequence})"]},
// pathlib completion
	"Path from the pathlib module": {
		"description": "Path from the pathlib module",
		"prefix": "Path",
		"body": ["Path(${1:*pathsegments})"]},
	"PosixPath from the pathlib module": {
		"description": "PosixPath from the pathlib module",
		"prefix": "PosixPath",
		"body": ["PosixPath(${1:*pathsegments})"]},
	"PurePath from the pathlib module": {
		"description": "PurePath from the pathlib module",
		"prefix": "PurePath",
		"body": ["PurePath(${1:*pathsegments})"]},
	"PurePosixPath from the pathlib module": {
		"description": "PurePosixPath from the pathlib module",
		"prefix": "PurePosixPath",
		"body": ["PurePosixPath(${1:*pathsegments})"]},
	"PureWindowsPath from the pathlib module": {
		"description": "PureWindowsPath from the pathlib module",
		"prefix": "PureWindowsPath",
		"body": ["PureWindowsPath(${1:*pathsegments})"]},
	"WindowsPath from the pathlib module": {
		"description": "WindowsPath from the pathlib module",
		"prefix": "WindowsPath",
		"body": ["WindowsPath(${1:*pathsegments})"]},
	"anchor() from the pathlib module": {
		"description": "anchor() from the pathlib module",
		"prefix": "anchor",
		"body": ["anchor()"]},
	"as_posix() from the pathlib module": {
		"description": "as_posix() from the pathlib module",
		"prefix": "as_posix",
		"body": ["as_posix(${1:})"]},
	"as_uri() from the pathlib module": {
		"description": "as_uri() from the pathlib module",
		"prefix": "as_uri",
		"body": ["as_uri(${1:})"]},
	"chmod() from the pathlib module": {
		"description": "chmod() from the pathlib module",
		"prefix": "chmod",
		"body": ["chmod(${1:mode})"]},
	"cwd() from the pathlib module": {
		"description": "cwd() from the pathlib module",
		"prefix": "cwd",
		"body": ["cwd(${1:})"]},
	"drive() from the pathlib module": {
		"description": "drive() from the pathlib module",
		"prefix": "drive",
		"body": ["drive()"]},
	"exists() from the pathlib module": {
		"description": "exists() from the pathlib module",
		"prefix": "exists",
		"body": ["exists(${1:})"]},
	"expanduser() from the pathlib module": {
		"description": "expanduser() from the pathlib module",
		"prefix": "expanduser",
		"body": ["expanduser(${1:})"]},
	"glob() from the pathlib module": {
		"description": "glob() from the pathlib module",
		"prefix": "glob",
		"body": ["glob(${1:pattern})"]},
	"group() from the pathlib module": {
		"description": "group() from the pathlib module",
		"prefix": "group",
		"body": ["group(${1:})"]},
	"home() from the pathlib module": {
		"description": "home() from the pathlib module",
		"prefix": "home",
		"body": ["home(${1:})"]},
	"is_absolute() from the pathlib module": {
		"description": "is_absolute() from the pathlib module",
		"prefix": "is_absolute",
		"body": ["is_absolute(${1:})"]},
	"is_block_device() from the pathlib module": {
		"description": "is_block_device() from the pathlib module",
		"prefix": "is_block_device",
		"body": ["is_block_device(${1:})"]},
	"is_char_device() from the pathlib module": {
		"description": "is_char_device() from the pathlib module",
		"prefix": "is_char_device",
		"body": ["is_char_device(${1:})"]},
	"is_dir() from the pathlib module": {
		"description": "is_dir() from the pathlib module",
		"prefix": "is_dir",
		"body": ["is_dir(${1:})"]},
	"is_fifo() from the pathlib module": {
		"description": "is_fifo() from the pathlib module",
		"prefix": "is_fifo",
		"body": ["is_fifo(${1:})"]},
	"is_file() from the pathlib module": {
		"description": "is_file() from the pathlib module",
		"prefix": "is_file",
		"body": ["is_file(${1:})"]},
	"is_reserved() from the pathlib module": {
		"description": "is_reserved() from the pathlib module",
		"prefix": "is_reserved",
		"body": ["is_reserved(${1:})"]},
	"is_socket() from the pathlib module": {
		"description": "is_socket() from the pathlib module",
		"prefix": "is_socket",
		"body": ["is_socket(${1:})"]},
	"is_symlink() from the pathlib module": {
		"description": "is_symlink() from the pathlib module",
		"prefix": "is_symlink",
		"body": ["is_symlink(${1:})"]},
	"iterdir() from the pathlib module": {
		"description": "iterdir() from the pathlib module",
		"prefix": "iterdir",
		"body": ["iterdir(${1:})"]},
	"joinpath() from the pathlib module": {
		"description": "joinpath() from the pathlib module",
		"prefix": "joinpath",
		"body": ["joinpath(${1:*other})"]},
	"lchmod() from the pathlib module": {
		"description": "lchmod() from the pathlib module",
		"prefix": "lchmod",
		"body": ["lchmod(${1:mode})"]},
	"lstat() from the pathlib module": {
		"description": "lstat() from the pathlib module",
		"prefix": "lstat",
		"body": ["lstat(${1:})"]},
	"match() from the pathlib module": {
		"description": "match() from the pathlib module",
		"prefix": "match",
		"body": ["match(${1:pattern})"]},
	"mkdir() from the pathlib module": {
		"description": "mkdir() from the pathlib module",
		"prefix": "mkdir",
		"body": ["mkdir(${1:mode=0o777}, ${2:parents=False}, ${3:exist_ok=False})"]},
	"name() from the pathlib module": {
		"description": "name() from the pathlib module",
		"prefix": "name",
		"body": ["name()"]},
	"open() from the pathlib module": {
		"description": "open() from the pathlib module",
		"prefix": "open",
		"body": ["open(${1:mode='r'}, ${2:buffering=-1}, ${3:encoding=None}, ${4:errors=None}, ${5:newline=None})"]},
	"owner() from the pathlib module": {
		"description": "owner() from the pathlib module",
		"prefix": "owner",
		"body": ["owner(${1:})"]},
	"parent() from the pathlib module": {
		"description": "parent() from the pathlib module",
		"prefix": "parent",
		"body": ["parent()"]},
	"parents() from the pathlib module": {
		"description": "parents() from the pathlib module",
		"prefix": "parents",
		"body": ["parents()"]},
	"parts() from the pathlib module": {
		"description": "parts() from the pathlib module",
		"prefix": "parts",
		"body": ["parts()"]},
	"path() from the pathlib module": {
		"description": "path() from the pathlib module",
		"prefix": "path",
		"body": ["path()"]},
	"read_bytes() from the pathlib module": {
		"description": "read_bytes() from the pathlib module",
		"prefix": "read_bytes",
		"body": ["read_bytes(${1:})"]},
	"read_text() from the pathlib module": {
		"description": "read_text() from the pathlib module",
		"prefix": "read_text",
		"body": ["read_text(${1:encoding=None}, ${2:errors=None})"]},
	"relative_to() from the pathlib module": {
		"description": "relative_to() from the pathlib module",
		"prefix": "relative_to",
		"body": ["relative_to(${1:*other})"]},
	"rename() from the pathlib module": {
		"description": "rename() from the pathlib module",
		"prefix": "rename",
		"body": ["rename(${1:target})"]},
	"replace() from the pathlib module": {
		"description": "replace() from the pathlib module",
		"prefix": "replace",
		"body": ["replace(${1:target})"]},
	"resolve() from the pathlib module": {
		"description": "resolve() from the pathlib module",
		"prefix": "resolve",
		"body": ["resolve(${1:})"]},
	"rglob() from the pathlib module": {
		"description": "rglob() from the pathlib module",
		"prefix": "rglob",
		"body": ["rglob(${1:pattern})"]},
	"rmdir() from the pathlib module": {
		"description": "rmdir() from the pathlib module",
		"prefix": "rmdir",
		"body": ["rmdir(${1:})"]},
	"root() from the pathlib module": {
		"description": "root() from the pathlib module",
		"prefix": "root",
		"body": ["root()"]},
	"samefile() from the pathlib module": {
		"description": "samefile() from the pathlib module",
		"prefix": "samefile",
		"body": ["samefile(${1:other_path})"]},
	"stat() from the pathlib module": {
		"description": "stat() from the pathlib module",
		"prefix": "stat",
		"body": ["stat(${1:})"]},
	"stem() from the pathlib module": {
		"description": "stem() from the pathlib module",
		"prefix": "stem",
		"body": ["stem()"]},
	"suffix() from the pathlib module": {
		"description": "suffix() from the pathlib module",
		"prefix": "suffix",
		"body": ["suffix()"]},
	"suffixes() from the pathlib module": {
		"description": "suffixes() from the pathlib module",
		"prefix": "suffixes",
		"body": ["suffixes()"]},
	"symlink_to() from the pathlib module": {
		"description": "symlink_to() from the pathlib module",
		"prefix": "symlink_to",
		"body": ["symlink_to(${1:target}, ${2:target_is_directory=False})"]},
	"touch() from the pathlib module": {
		"description": "touch() from the pathlib module",
		"prefix": "touch",
		"body": ["touch(${1:mode=0o777}, ${2:exist_ok=True})"]},
	"unlink() from the pathlib module": {
		"description": "unlink() from the pathlib module",
		"prefix": "unlink",
		"body": ["unlink(${1:})"]},
	"with_name() from the pathlib module": {
		"description": "with_name() from the pathlib module",
		"prefix": "with_name",
		"body": ["with_name(${1:name})"]},
	"with_suffix() from the pathlib module": {
		"description": "with_suffix() from the pathlib module",
		"prefix": "with_suffix",
		"body": ["with_suffix(${1:suffix})"]},
	"write_bytes() from the pathlib module": {
		"description": "write_bytes() from the pathlib module",
		"prefix": "write_bytes",
		"body": ["write_bytes(${1:data})"]},
	"write_text() from the pathlib module": {
		"description": "write_text() from the pathlib module",
		"prefix": "write_text",
		"body": ["write_text(${1:data,})"]},
// pdb completion
	"Pdb from the pdb module": {
		"description": "Pdb from the pdb module",
		"prefix": "Pdb",
		"body": ["Pdb(${1:completekey='tab'}, ${2:stdin=None}, ${3:stdout=None}, ${4:skip=None}, ${5:nosigint=False})"]},
	"pm() from the pdb module": {
		"description": "pm() from the pdb module",
		"prefix": "pm",
		"body": ["pm(${1:})"]},
	"post_mortem() from the pdb module": {
		"description": "post_mortem() from the pdb module",
		"prefix": "post_mortem",
		"body": ["post_mortem(${1:traceback=None})"]},
	"run() from the pdb module": {
		"description": "run() from the pdb module",
		"prefix": "run",
		"body": ["run(${1:statement}, ${2:globals=None}, ${3:locals=None})"]},
	"runcall() from the pdb module": {
		"description": "runcall() from the pdb module",
		"prefix": "runcall",
		"body": ["runcall(${1:function}, ${2:*args}, ${3:**kwds})"]},
	"runeval() from the pdb module": {
		"description": "runeval() from the pdb module",
		"prefix": "runeval",
		"body": ["runeval(${1:expression}, ${2:globals=None}, ${3:locals=None})"]},
	"set_trace() from the pdb module": {
		"description": "set_trace() from the pdb module",
		"prefix": "set_trace",
		"body": ["set_trace(${1:})"]},
// pickle completion
	"DEFAULT_PROTOCOL from the pickle module": {
		"description": "DEFAULT_PROTOCOL from the pickle module",
		"prefix": "DEFAULT_PROTOCOL",
		"body": ["DEFAULT_PROTOCOL"]},
	"HIGHEST_PROTOCOL from the pickle module": {
		"description": "HIGHEST_PROTOCOL from the pickle module",
		"prefix": "HIGHEST_PROTOCOL",
		"body": ["HIGHEST_PROTOCOL"]},
	"PickleError from the pickle module": {
		"description": "PickleError from the pickle module",
		"prefix": "PickleError",
		"body": ["PickleError"]},
	"Pickler from the pickle module": {
		"description": "Pickler from the pickle module",
		"prefix": "Pickler",
		"body": ["Pickler(${1:file}, ${2:protocol=None}, ${3:*}, ${4:fix_imports=True})"]},
	"PicklingError from the pickle module": {
		"description": "PicklingError from the pickle module",
		"prefix": "PicklingError",
		"body": ["PicklingError"]},
	"Unpickler from the pickle module": {
		"description": "Unpickler from the pickle module",
		"prefix": "Unpickler",
		"body": ["Unpickler(${1:file}, ${2:*}, ${3:fix_imports=True}, ${4:encoding=\"ASCII\"}, ${5:errors=\"strict\"})"]},
	"UnpicklingError from the pickle module": {
		"description": "UnpicklingError from the pickle module",
		"prefix": "UnpicklingError",
		"body": ["UnpicklingError"]},
	"__getnewargs__() from the pickle module": {
		"description": "__getnewargs__() from the pickle module",
		"prefix": "__getnewargs__",
		"body": ["__getnewargs__(${1:})"]},
	"__getnewargs_ex__() from the pickle module": {
		"description": "__getnewargs_ex__() from the pickle module",
		"prefix": "__getnewargs_ex__",
		"body": ["__getnewargs_ex__(${1:})"]},
	"__getstate__() from the pickle module": {
		"description": "__getstate__() from the pickle module",
		"prefix": "__getstate__",
		"body": ["__getstate__(${1:})"]},
	"__reduce__() from the pickle module": {
		"description": "__reduce__() from the pickle module",
		"prefix": "__reduce__",
		"body": ["__reduce__(${1:})"]},
	"__reduce_ex__() from the pickle module": {
		"description": "__reduce_ex__() from the pickle module",
		"prefix": "__reduce_ex__",
		"body": ["__reduce_ex__(${1:protocol})"]},
	"__setstate__() from the pickle module": {
		"description": "__setstate__() from the pickle module",
		"prefix": "__setstate__",
		"body": ["__setstate__(${1:state})"]},
	"dump() from the pickle module": {
		"description": "dump() from the pickle module",
		"prefix": "dump",
		"body": ["dump(${1:obj}, ${2:file}, ${3:protocol=None}, ${4:*}, ${5:fix_imports=True})"]},
	"dumps() from the pickle module": {
		"description": "dumps() from the pickle module",
		"prefix": "dumps",
		"body": ["dumps(${1:obj}, ${2:protocol=None}, ${3:*}, ${4:fix_imports=True})"]},
	"load() from the pickle module": {
		"description": "load() from the pickle module",
		"prefix": "load",
		"body": ["load(${1:file}, ${2:*}, ${3:fix_imports=True}, ${4:encoding=\"ASCII\"}, ${5:errors=\"strict\"})"]},
	"loads() from the pickle module": {
		"description": "loads() from the pickle module",
		"prefix": "loads",
		"body": ["loads(${1:bytes_object,})"]},
// pickletools completion
	"dis() from the pickletools module": {
		"description": "dis() from the pickletools module",
		"prefix": "dis",
		"body": ["dis(${1:pickle}, ${2:out=None}, ${3:memo=None}, ${4:indentlevel=4}, ${5:annotate=0})"]},
	"genops() from the pickletools module": {
		"description": "genops() from the pickletools module",
		"prefix": "genops",
		"body": ["genops(${1:pickle})"]},
	"optimize() from the pickletools module": {
		"description": "optimize() from the pickletools module",
		"prefix": "optimize",
		"body": ["optimize(${1:picklestring})"]},
// pipes completion
	"Template from the pipes module": {
		"description": "Template from the pipes module",
		"prefix": "Template",
		"body": ["Template"]},
	"append() from the pipes module": {
		"description": "append() from the pipes module",
		"prefix": "append",
		"body": ["append(${1:cmd}, ${2:kind})"]},
	"clone() from the pipes module": {
		"description": "clone() from the pipes module",
		"prefix": "clone",
		"body": ["clone(${1:})"]},
	"copy() from the pipes module": {
		"description": "copy() from the pipes module",
		"prefix": "copy",
		"body": ["copy(${1:infile}, ${2:outfile})"]},
	"debug() from the pipes module": {
		"description": "debug() from the pipes module",
		"prefix": "debug",
		"body": ["debug(${1:flag})"]},
	"open() from the pipes module": {
		"description": "open() from the pipes module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:mode})"]},
	"prepend() from the pipes module": {
		"description": "prepend() from the pipes module",
		"prefix": "prepend",
		"body": ["prepend(${1:cmd}, ${2:kind})"]},
	"reset() from the pipes module": {
		"description": "reset() from the pipes module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
// pkgutil completion
	"ImpImporter from the pkgutil module": {
		"description": "ImpImporter from the pkgutil module",
		"prefix": "ImpImporter",
		"body": ["ImpImporter(${1:dirname=None})"]},
	"ImpLoader from the pkgutil module": {
		"description": "ImpLoader from the pkgutil module",
		"prefix": "ImpLoader",
		"body": ["ImpLoader(${1:fullname}, ${2:file}, ${3:filename}, ${4:etc})"]},
	"extend_path() from the pkgutil module": {
		"description": "extend_path() from the pkgutil module",
		"prefix": "extend_path",
		"body": ["extend_path(${1:path}, ${2:name})"]},
	"find_loader() from the pkgutil module": {
		"description": "find_loader() from the pkgutil module",
		"prefix": "find_loader",
		"body": ["find_loader(${1:fullname})"]},
	"get_data() from the pkgutil module": {
		"description": "get_data() from the pkgutil module",
		"prefix": "get_data",
		"body": ["get_data(${1:package}, ${2:resource})"]},
	"get_importer() from the pkgutil module": {
		"description": "get_importer() from the pkgutil module",
		"prefix": "get_importer",
		"body": ["get_importer(${1:path_item})"]},
	"get_loader() from the pkgutil module": {
		"description": "get_loader() from the pkgutil module",
		"prefix": "get_loader",
		"body": ["get_loader(${1:module_or_name})"]},
	"iter_importers() from the pkgutil module": {
		"description": "iter_importers() from the pkgutil module",
		"prefix": "iter_importers",
		"body": ["iter_importers(${1:fullname=''})"]},
	"iter_modules() from the pkgutil module": {
		"description": "iter_modules() from the pkgutil module",
		"prefix": "iter_modules",
		"body": ["iter_modules(${1:path=None}, ${2:prefix=''})"]},
	"walk_packages() from the pkgutil module": {
		"description": "walk_packages() from the pkgutil module",
		"prefix": "walk_packages",
		"body": ["walk_packages(${1:path=None,})"]},
// platform completion
	"architecture() from the platform module": {
		"description": "architecture() from the platform module",
		"prefix": "architecture",
		"body": ["architecture(${1:executable=sys.executable}, ${2:bits=''}, ${3:linkage=''})"]},
	"dist() from the platform module": {
		"description": "dist() from the platform module",
		"prefix": "dist",
		"body": ["dist(${1:distname=''}, ${2:version=''}, ${3:id=''}, ${4:supported_dists=}, ${5:'SuSE'}, ${6:'debian'}, ${7:'redhat'}, ${8:'mandrake'}, ${9:...})"]},
	"java_ver() from the platform module": {
		"description": "java_ver() from the platform module",
		"prefix": "java_ver",
		"body": ["java_ver(${1:release=''}, ${2:vendor=''}, ${3:vminfo=}, ${4:''}, ${4:''}, ${6:''})"]},
	"libc_ver() from the platform module": {
		"description": "libc_ver() from the platform module",
		"prefix": "libc_ver",
		"body": ["libc_ver(${1:executable=sys.executable}, ${2:lib=''}, ${3:version=''}, ${4:chunksize=2048})"]},
	"linux_distribution() from the platform module": {
		"description": "linux_distribution() from the platform module",
		"prefix": "linux_distribution",
		"body": ["linux_distribution(${1:distname=''}, ${2:version=''}, ${3:id=''}, ${4:supported_dists=}, ${5:'SuSE'}, ${6:'debian'}, ${7:'redhat'}, ${8:'mandrake'}, ${9:...})"]},
	"mac_ver() from the platform module": {
		"description": "mac_ver() from the platform module",
		"prefix": "mac_ver",
		"body": ["mac_ver(${1:release=''}, ${2:versioninfo=}, ${3:''}, ${3:''}, ${5:''})"]},
	"machine() from the platform module": {
		"description": "machine() from the platform module",
		"prefix": "machine",
		"body": ["machine(${1:})"]},
	"node() from the platform module": {
		"description": "node() from the platform module",
		"prefix": "node",
		"body": ["node(${1:})"]},
	"platform() from the platform module": {
		"description": "platform() from the platform module",
		"prefix": "platform",
		"body": ["platform(${1:aliased=0}, ${2:terse=0})"]},
	"popen() from the platform module": {
		"description": "popen() from the platform module",
		"prefix": "popen",
		"body": ["popen(${1:cmd}, ${2:mode='r'}, ${3:bufsize=-1})"]},
	"processor() from the platform module": {
		"description": "processor() from the platform module",
		"prefix": "processor",
		"body": ["processor(${1:})"]},
	"python_branch() from the platform module": {
		"description": "python_branch() from the platform module",
		"prefix": "python_branch",
		"body": ["python_branch(${1:})"]},
	"python_build() from the platform module": {
		"description": "python_build() from the platform module",
		"prefix": "python_build",
		"body": ["python_build(${1:})"]},
	"python_compiler() from the platform module": {
		"description": "python_compiler() from the platform module",
		"prefix": "python_compiler",
		"body": ["python_compiler(${1:})"]},
	"python_implementation() from the platform module": {
		"description": "python_implementation() from the platform module",
		"prefix": "python_implementation",
		"body": ["python_implementation(${1:})"]},
	"python_revision() from the platform module": {
		"description": "python_revision() from the platform module",
		"prefix": "python_revision",
		"body": ["python_revision(${1:})"]},
	"python_version() from the platform module": {
		"description": "python_version() from the platform module",
		"prefix": "python_version",
		"body": ["python_version(${1:})"]},
	"python_version_tuple() from the platform module": {
		"description": "python_version_tuple() from the platform module",
		"prefix": "python_version_tuple",
		"body": ["python_version_tuple(${1:})"]},
	"release() from the platform module": {
		"description": "release() from the platform module",
		"prefix": "release",
		"body": ["release(${1:})"]},
	"system() from the platform module": {
		"description": "system() from the platform module",
		"prefix": "system",
		"body": ["system(${1:})"]},
	"system_alias() from the platform module": {
		"description": "system_alias() from the platform module",
		"prefix": "system_alias",
		"body": ["system_alias(${1:system}, ${2:release}, ${3:version})"]},
	"uname() from the platform module": {
		"description": "uname() from the platform module",
		"prefix": "uname",
		"body": ["uname(${1:})"]},
	"version() from the platform module": {
		"description": "version() from the platform module",
		"prefix": "version",
		"body": ["version(${1:})"]},
	"win32_ver() from the platform module": {
		"description": "win32_ver() from the platform module",
		"prefix": "win32_ver",
		"body": ["win32_ver(${1:release='',})"]},
// plistlib completion
	"Data from the plistlib module": {
		"description": "Data from the plistlib module",
		"prefix": "Data",
		"body": ["Data(${1:data})"]},
	"FMT_BINARY from the plistlib module": {
		"description": "FMT_BINARY from the plistlib module",
		"prefix": "FMT_BINARY",
		"body": ["FMT_BINARY"]},
	"FMT_XML from the plistlib module": {
		"description": "FMT_XML from the plistlib module",
		"prefix": "FMT_XML",
		"body": ["FMT_XML"]},
	"dump() from the plistlib module": {
		"description": "dump() from the plistlib module",
		"prefix": "dump",
		"body": ["dump(${1:value}, ${2:fp}, ${3:*}, ${4:fmt=FMT_XML}, ${5:sort_keys=True}, ${6:skipkeys=False})"]},
	"dumps() from the plistlib module": {
		"description": "dumps() from the plistlib module",
		"prefix": "dumps",
		"body": ["dumps(${1:value}, ${2:*}, ${3:fmt=FMT_XML}, ${4:sort_keys=True}, ${5:skipkeys=False})"]},
	"load() from the plistlib module": {
		"description": "load() from the plistlib module",
		"prefix": "load",
		"body": ["load(${1:fp}, ${2:*}, ${3:fmt=None}, ${4:use_builtin_types=True}, ${5:dict_type=dict})"]},
	"loads() from the plistlib module": {
		"description": "loads() from the plistlib module",
		"prefix": "loads",
		"body": ["loads(${1:data}, ${2:*}, ${3:fmt=None}, ${4:use_builtin_types=True}, ${5:dict_type=dict})"]},
	"readPlist() from the plistlib module": {
		"description": "readPlist() from the plistlib module",
		"prefix": "readPlist",
		"body": ["readPlist(${1:pathOrFile})"]},
	"readPlistFromBytes() from the plistlib module": {
		"description": "readPlistFromBytes() from the plistlib module",
		"prefix": "readPlistFromBytes",
		"body": ["readPlistFromBytes(${1:data})"]},
	"writePlist() from the plistlib module": {
		"description": "writePlist() from the plistlib module",
		"prefix": "writePlist",
		"body": ["writePlist(${1:rootObject}, ${2:pathOrFile})"]},
	"writePlistToBytes() from the plistlib module": {
		"description": "writePlistToBytes() from the plistlib module",
		"prefix": "writePlistToBytes",
		"body": ["writePlistToBytes(${1:rootObject})"]},
// poplib completion
	"POP3 from the poplib module": {
		"description": "POP3 from the poplib module",
		"prefix": "POP3",
		"body": ["POP3(${1:host}, ${2:port=POP3_PORT[}, ${3:timeout]})"]},
	"POP3_SSL from the poplib module": {
		"description": "POP3_SSL from the poplib module",
		"prefix": "POP3_SSL",
		"body": ["POP3_SSL(${1:host}, ${2:port=POP3_SSL_PORT}, ${3:keyfile=None}, ${4:certfile=None}, ${5:timeout=None}, ${6:context=None})"]},
	"apop() from the poplib module": {
		"description": "apop() from the poplib module",
		"prefix": "apop",
		"body": ["apop(${1:user}, ${2:secret})"]},
	"capa() from the poplib module": {
		"description": "capa() from the poplib module",
		"prefix": "capa",
		"body": ["capa(${1:})"]},
	"dele() from the poplib module": {
		"description": "dele() from the poplib module",
		"prefix": "dele",
		"body": ["dele(${1:which})"]},
	"error_proto() from the poplib module": {
		"description": "error_proto() from the poplib module",
		"prefix": "error_proto",
		"body": ["error_proto()"]},
	"getwelcome() from the poplib module": {
		"description": "getwelcome() from the poplib module",
		"prefix": "getwelcome",
		"body": ["getwelcome(${1:})"]},
	"list() from the poplib module": {
		"description": "list() from the poplib module",
		"prefix": "list",
		"body": ["list(${1:[which]})"]},
	"noop() from the poplib module": {
		"description": "noop() from the poplib module",
		"prefix": "noop",
		"body": ["noop(${1:})"]},
	"pass_() from the poplib module": {
		"description": "pass_() from the poplib module",
		"prefix": "pass_",
		"body": ["pass_(${1:password})"]},
	"quit() from the poplib module": {
		"description": "quit() from the poplib module",
		"prefix": "quit",
		"body": ["quit(${1:})"]},
	"retr() from the poplib module": {
		"description": "retr() from the poplib module",
		"prefix": "retr",
		"body": ["retr(${1:which})"]},
	"rpop() from the poplib module": {
		"description": "rpop() from the poplib module",
		"prefix": "rpop",
		"body": ["rpop(${1:user})"]},
	"rset() from the poplib module": {
		"description": "rset() from the poplib module",
		"prefix": "rset",
		"body": ["rset(${1:})"]},
	"set_debuglevel() from the poplib module": {
		"description": "set_debuglevel() from the poplib module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:level})"]},
	"stat() from the poplib module": {
		"description": "stat() from the poplib module",
		"prefix": "stat",
		"body": ["stat(${1:})"]},
	"stls() from the poplib module": {
		"description": "stls() from the poplib module",
		"prefix": "stls",
		"body": ["stls(${1:context=None})"]},
	"top() from the poplib module": {
		"description": "top() from the poplib module",
		"prefix": "top",
		"body": ["top(${1:which}, ${2:howmuch})"]},
	"uidl() from the poplib module": {
		"description": "uidl() from the poplib module",
		"prefix": "uidl",
		"body": ["uidl(${1:which=None})"]},
	"user() from the poplib module": {
		"description": "user() from the poplib module",
		"prefix": "user",
		"body": ["user(${1:username})"]},
	"utf8() from the poplib module": {
		"description": "utf8() from the poplib module",
		"prefix": "utf8",
		"body": ["utf8(${1:})"]},
// posix completion
	"environ() from the posix module": {
		"description": "environ() from the posix module",
		"prefix": "environ",
		"body": ["environ()"]},
// pprint completion
	"PrettyPrinter from the pprint module": {
		"description": "PrettyPrinter from the pprint module",
		"prefix": "PrettyPrinter",
		"body": ["PrettyPrinter(${1:indent=1}, ${2:width=80}, ${3:depth=None}, ${4:stream=None}, ${5:*}, ${6:compact=False})"]},
	"format() from the pprint module": {
		"description": "format() from the pprint module",
		"prefix": "format",
		"body": ["format(${1:object}, ${2:context}, ${3:maxlevels}, ${4:level})"]},
	"isreadable() from the pprint module": {
		"description": "isreadable() from the pprint module",
		"prefix": "isreadable",
		"body": ["isreadable(${1:object})"]},
	"isrecursive() from the pprint module": {
		"description": "isrecursive() from the pprint module",
		"prefix": "isrecursive",
		"body": ["isrecursive(${1:object})"]},
	"pformat() from the pprint module": {
		"description": "pformat() from the pprint module",
		"prefix": "pformat",
		"body": ["pformat(${1:object}, ${2:indent=1}, ${3:width=80}, ${4:depth=None}, ${5:*}, ${6:compact=False})"]},
	"pformat() from the pprint module": {
		"description": "pformat() from the pprint module",
		"prefix": "pformat",
		"body": ["pformat(${1:object})"]},
	"pprint() from the pprint module": {
		"description": "pprint() from the pprint module",
		"prefix": "pprint",
		"body": ["pprint(${1:object}, ${2:stream=None}, ${3:indent=1}, ${4:width=80}, ${5:depth=None}, ${6:*}, ${7:compact=False})"]},
	"pprint() from the pprint module": {
		"description": "pprint() from the pprint module",
		"prefix": "pprint",
		"body": ["pprint(${1:object})"]},
	"saferepr() from the pprint module": {
		"description": "saferepr() from the pprint module",
		"prefix": "saferepr",
		"body": ["saferepr(${1:object})"]},
// profile completion
	"Profile from the profile module": {
		"description": "Profile from the profile module",
		"prefix": "Profile",
		"body": ["Profile(${1:timer=None}, ${2:timeunit=0.0}, ${3:subcalls=True}, ${4:builtins=True})"]},
	"Stats from the profile module": {
		"description": "Stats from the profile module",
		"prefix": "Stats",
		"body": ["Stats(${1:*filenames or profile}, ${2:stream=sys.stdout})"]},
	"run() from the profile module": {
		"description": "run() from the profile module",
		"prefix": "run",
		"body": ["run(${1:command}, ${2:filename=None}, ${3:sort=-1})"]},
	"runctx() from the profile module": {
		"description": "runctx() from the profile module",
		"prefix": "runctx",
		"body": ["runctx(${1:command,})"]},
// pstats completion
	"Profile from the pstats module": {
		"description": "Profile from the pstats module",
		"prefix": "Profile",
		"body": ["Profile(${1:timer=None}, ${2:timeunit=0.0}, ${3:subcalls=True}, ${4:builtins=True})"]},
	"Stats from the pstats module": {
		"description": "Stats from the pstats module",
		"prefix": "Stats",
		"body": ["Stats(${1:*filenames or profile}, ${2:stream=sys.stdout})"]},
	"run() from the pstats module": {
		"description": "run() from the pstats module",
		"prefix": "run",
		"body": ["run(${1:command}, ${2:filename=None}, ${3:sort=-1})"]},
	"runctx() from the pstats module": {
		"description": "runctx() from the pstats module",
		"prefix": "runctx",
		"body": ["runctx(${1:command,})"]},
// pty completion
	"fork() from the pty module": {
		"description": "fork() from the pty module",
		"prefix": "fork",
		"body": ["fork(${1:})"]},
	"openpty() from the pty module": {
		"description": "openpty() from the pty module",
		"prefix": "openpty",
		"body": ["openpty(${1:})"]},
	"spawn() from the pty module": {
		"description": "spawn() from the pty module",
		"prefix": "spawn",
		"body": ["spawn(${1:argv[,})"]},
// pwd completion
	"getpwall() from the pwd module": {
		"description": "getpwall() from the pwd module",
		"prefix": "getpwall",
		"body": ["getpwall(${1:})"]},
	"getpwnam() from the pwd module": {
		"description": "getpwnam() from the pwd module",
		"prefix": "getpwnam",
		"body": ["getpwnam(${1:name})"]},
	"getpwuid() from the pwd module": {
		"description": "getpwuid() from the pwd module",
		"prefix": "getpwuid",
		"body": ["getpwuid(${1:uid})"]},
// py_compile completion
	"PyCompileError from the py_compile module": {
		"description": "PyCompileError from the py_compile module",
		"prefix": "PyCompileError",
		"body": ["PyCompileError"]},
	"compile() from the py_compile module": {
		"description": "compile() from the py_compile module",
		"prefix": "compile",
		"body": ["compile(${1:file}, ${2:cfile=None}, ${3:dfile=None}, ${4:doraise=False}, ${5:optimize=-1})"]},
	"main() from the py_compile module": {
		"description": "main() from the py_compile module",
		"prefix": "main",
		"body": ["main(${1:args=None})"]},
// pyclbr completion
	"file() from the pyclbr module": {
		"description": "file() from the pyclbr module",
		"prefix": "file",
		"body": ["file()"]},
	"lineno() from the pyclbr module": {
		"description": "lineno() from the pyclbr module",
		"prefix": "lineno",
		"body": ["lineno()"]},
	"methods() from the pyclbr module": {
		"description": "methods() from the pyclbr module",
		"prefix": "methods",
		"body": ["methods()"]},
	"module() from the pyclbr module": {
		"description": "module() from the pyclbr module",
		"prefix": "module",
		"body": ["module()"]},
	"name() from the pyclbr module": {
		"description": "name() from the pyclbr module",
		"prefix": "name",
		"body": ["name()"]},
	"readmodule() from the pyclbr module": {
		"description": "readmodule() from the pyclbr module",
		"prefix": "readmodule",
		"body": ["readmodule(${1:module}, ${2:path=None})"]},
	"readmodule_ex() from the pyclbr module": {
		"description": "readmodule_ex() from the pyclbr module",
		"prefix": "readmodule_ex",
		"body": ["readmodule_ex(${1:module}, ${2:path=None})"]},
	"super() from the pyclbr module": {
		"description": "super() from the pyclbr module",
		"prefix": "super",
		"body": ["super()"]},
// queue completion
	"Empty from the queue module": {
		"description": "Empty from the queue module",
		"prefix": "Empty",
		"body": ["Empty"]},
	"Full from the queue module": {
		"description": "Full from the queue module",
		"prefix": "Full",
		"body": ["Full"]},
	"LifoQueue from the queue module": {
		"description": "LifoQueue from the queue module",
		"prefix": "LifoQueue",
		"body": ["LifoQueue(${1:maxsize=0})"]},
	"PriorityQueue from the queue module": {
		"description": "PriorityQueue from the queue module",
		"prefix": "PriorityQueue",
		"body": ["PriorityQueue(${1:maxsize=0})"]},
	"Queue from the queue module": {
		"description": "Queue from the queue module",
		"prefix": "Queue",
		"body": ["Queue(${1:maxsize=0})"]},
	"empty() from the queue module": {
		"description": "empty() from the queue module",
		"prefix": "empty",
		"body": ["empty(${1:})"]},
	"full() from the queue module": {
		"description": "full() from the queue module",
		"prefix": "full",
		"body": ["full(${1:})"]},
	"get() from the queue module": {
		"description": "get() from the queue module",
		"prefix": "get",
		"body": ["get(${1:block=True}, ${2:timeout=None})"]},
	"get_nowait() from the queue module": {
		"description": "get_nowait() from the queue module",
		"prefix": "get_nowait",
		"body": ["get_nowait(${1:})"]},
	"join() from the queue module": {
		"description": "join() from the queue module",
		"prefix": "join",
		"body": ["join(${1:})"]},
	"put() from the queue module": {
		"description": "put() from the queue module",
		"prefix": "put",
		"body": ["put(${1:item}, ${2:block=True}, ${3:timeout=None})"]},
	"put_nowait() from the queue module": {
		"description": "put_nowait() from the queue module",
		"prefix": "put_nowait",
		"body": ["put_nowait(${1:item})"]},
	"qsize() from the queue module": {
		"description": "qsize() from the queue module",
		"prefix": "qsize",
		"body": ["qsize(${1:})"]},
	"task_done() from the queue module": {
		"description": "task_done() from the queue module",
		"prefix": "task_done",
		"body": ["task_done(${1:})"]},
// quopri completion
	"decode() from the quopri module": {
		"description": "decode() from the quopri module",
		"prefix": "decode",
		"body": ["decode(${1:input}, ${2:output}, ${3:header=False})"]},
	"decodestring() from the quopri module": {
		"description": "decodestring() from the quopri module",
		"prefix": "decodestring",
		"body": ["decodestring(${1:s}, ${2:header=False})"]},
	"encode() from the quopri module": {
		"description": "encode() from the quopri module",
		"prefix": "encode",
		"body": ["encode(${1:input}, ${2:output}, ${3:quotetabs}, ${4:header=False})"]},
	"encodestring() from the quopri module": {
		"description": "encodestring() from the quopri module",
		"prefix": "encodestring",
		"body": ["encodestring(${1:s,})"]},
// random completion
	"SystemRandom from the random module": {
		"description": "SystemRandom from the random module",
		"prefix": "SystemRandom",
		"body": ["SystemRandom(${1:[seed]})"]},
	"betavariate() from the random module": {
		"description": "betavariate() from the random module",
		"prefix": "betavariate",
		"body": ["betavariate(${1:alpha}, ${2:beta})"]},
	"choice() from the random module": {
		"description": "choice() from the random module",
		"prefix": "choice",
		"body": ["choice(${1:seq})"]},
	"expovariate() from the random module": {
		"description": "expovariate() from the random module",
		"prefix": "expovariate",
		"body": ["expovariate(${1:lambd})"]},
	"gammavariate() from the random module": {
		"description": "gammavariate() from the random module",
		"prefix": "gammavariate",
		"body": ["gammavariate(${1:alpha}, ${2:beta})"]},
	"gauss() from the random module": {
		"description": "gauss() from the random module",
		"prefix": "gauss",
		"body": ["gauss(${1:mu}, ${2:sigma})"]},
	"getrandbits() from the random module": {
		"description": "getrandbits() from the random module",
		"prefix": "getrandbits",
		"body": ["getrandbits(${1:k})"]},
	"getstate() from the random module": {
		"description": "getstate() from the random module",
		"prefix": "getstate",
		"body": ["getstate(${1:})"]},
	"lognormvariate() from the random module": {
		"description": "lognormvariate() from the random module",
		"prefix": "lognormvariate",
		"body": ["lognormvariate(${1:mu}, ${2:sigma})"]},
	"normalvariate() from the random module": {
		"description": "normalvariate() from the random module",
		"prefix": "normalvariate",
		"body": ["normalvariate(${1:mu}, ${2:sigma})"]},
	"paretovariate() from the random module": {
		"description": "paretovariate() from the random module",
		"prefix": "paretovariate",
		"body": ["paretovariate(${1:alpha})"]},
	"randint() from the random module": {
		"description": "randint() from the random module",
		"prefix": "randint",
		"body": ["randint(${1:a}, ${2:b})"]},
	"random() from the random module": {
		"description": "random() from the random module",
		"prefix": "random",
		"body": ["random(${1:})"]},
	"randrange() *** from the random module": {
		"description": "randrange() from the random module",
		"prefix": "randrange",
		"body": ["randrange(${1:start}, ${2:stop[}, ${3:step]})"]},
	"randrange() from the random module": {
		"description": "randrange() from the random module",
		"prefix": "randrange",
		"body": ["randrange(${1:stop})"]},
	"sample() from the random module": {
		"description": "sample() from the random module",
		"prefix": "sample",
		"body": ["sample(${1:population}, ${2:k})"]},
	"seed() from the random module": {
		"description": "seed() from the random module",
		"prefix": "seed",
		"body": ["seed(${1:a=None}, ${2:version=2})"]},
	"setstate() from the random module": {
		"description": "setstate() from the random module",
		"prefix": "setstate",
		"body": ["setstate(${1:state})"]},
	"shuffle() from the random module": {
		"description": "shuffle() from the random module",
		"prefix": "shuffle",
		"body": ["shuffle(${1:x[}, ${2:random]})"]},
	"triangular() from the random module": {
		"description": "triangular() from the random module",
		"prefix": "triangular",
		"body": ["triangular(${1:low}, ${2:high}, ${3:mode})"]},
	"uniform() from the random module": {
		"description": "uniform() from the random module",
		"prefix": "uniform",
		"body": ["uniform(${1:a}, ${2:b})"]},
	"vonmisesvariate() from the random module": {
		"description": "vonmisesvariate() from the random module",
		"prefix": "vonmisesvariate",
		"body": ["vonmisesvariate(${1:mu}, ${2:kappa})"]},
	"weibullvariate() from the random module": {
		"description": "weibullvariate() from the random module",
		"prefix": "weibullvariate",
		"body": ["weibullvariate(${1:alpha,})"]},
// re completion
	"A from the re module": {
		"description": "A from the re module",
		"prefix": "A",
		"body": ["A"]},
	"ASCII from the re module": {
		"description": "ASCII from the re module",
		"prefix": "ASCII",
		"body": ["ASCII"]},
	"DEBUG from the re module": {
		"description": "DEBUG from the re module",
		"prefix": "DEBUG",
		"body": ["DEBUG"]},
	"DOTALL from the re module": {
		"description": "DOTALL from the re module",
		"prefix": "DOTALL",
		"body": ["DOTALL"]},
	"I from the re module": {
		"description": "I from the re module",
		"prefix": "I",
		"body": ["I"]},
	"IGNORECASE from the re module": {
		"description": "IGNORECASE from the re module",
		"prefix": "IGNORECASE",
		"body": ["IGNORECASE"]},
	"L from the re module": {
		"description": "L from the re module",
		"prefix": "L",
		"body": ["L"]},
	"LOCALE from the re module": {
		"description": "LOCALE from the re module",
		"prefix": "LOCALE",
		"body": ["LOCALE"]},
	"M from the re module": {
		"description": "M from the re module",
		"prefix": "M",
		"body": ["M"]},
	"MULTILINE from the re module": {
		"description": "MULTILINE from the re module",
		"prefix": "MULTILINE",
		"body": ["MULTILINE"]},
	"S from the re module": {
		"description": "S from the re module",
		"prefix": "S",
		"body": ["S"]},
	"VERBOSE from the re module": {
		"description": "VERBOSE from the re module",
		"prefix": "VERBOSE",
		"body": ["VERBOSE"]},
	"X from the re module": {
		"description": "X from the re module",
		"prefix": "X",
		"body": ["X"]},
	"compile() from the re module": {
		"description": "compile() from the re module",
		"prefix": "compile",
		"body": ["compile(${1:pattern}, ${2:flags=0})"]},
	"end() from the re module": {
		"description": "end() from the re module",
		"prefix": "end",
		"body": ["end(${1:[group]})"]},
	"endpos() from the re module": {
		"description": "endpos() from the re module",
		"prefix": "endpos",
		"body": ["endpos()"]},
	"error() from the re module": {
		"description": "error() from the re module",
		"prefix": "error",
		"body": ["error(${1:msg}, ${2:pattern=None}, ${3:pos=None})"]},
	"escape() from the re module": {
		"description": "escape() from the re module",
		"prefix": "escape",
		"body": ["escape(${1:string})"]},
	"expand() from the re module": {
		"description": "expand() from the re module",
		"prefix": "expand",
		"body": ["expand(${1:template})"]},
	"findall() from the re module": {
		"description": "findall() from the re module",
		"prefix": "findall",
		"body": ["findall(${1:pattern}, ${2:string}, ${3:flags=0})"]},
	"findall() from the re module": {
		"description": "findall() from the re module",
		"prefix": "findall",
		"body": ["findall(${1:string[}, ${2:pos[}, ${3:endpos]]})"]},
	"finditer() from the re module": {
		"description": "finditer() from the re module",
		"prefix": "finditer",
		"body": ["finditer(${1:pattern}, ${2:string}, ${3:flags=0})"]},
	"finditer() from the re module": {
		"description": "finditer() from the re module",
		"prefix": "finditer",
		"body": ["finditer(${1:string[}, ${2:pos[}, ${3:endpos]]})"]},
	"flags() from the re module": {
		"description": "flags() from the re module",
		"prefix": "flags",
		"body": ["flags()"]},
	"fullmatch() from the re module": {
		"description": "fullmatch() from the re module",
		"prefix": "fullmatch",
		"body": ["fullmatch(${1:pattern}, ${2:string}, ${3:flags=0})"]},
	"fullmatch() from the re module": {
		"description": "fullmatch() from the re module",
		"prefix": "fullmatch",
		"body": ["fullmatch(${1:string[}, ${2:pos[}, ${3:endpos]]})"]},
	"group() from the re module": {
		"description": "group() from the re module",
		"prefix": "group",
		"body": ["group(${1:[group1}, ${2:...]})"]},
	"groupdict() from the re module": {
		"description": "groupdict() from the re module",
		"prefix": "groupdict",
		"body": ["groupdict(${1:default=None})"]},
	"groupindex() from the re module": {
		"description": "groupindex() from the re module",
		"prefix": "groupindex",
		"body": ["groupindex()"]},
	"groups() from the re module": {
		"description": "groups() from the re module",
		"prefix": "groups",
		"body": ["groups()"]},
	"groups() from the re module": {
		"description": "groups() from the re module",
		"prefix": "groups",
		"body": ["groups(${1:default=None})"]},
	"lastgroup() from the re module": {
		"description": "lastgroup() from the re module",
		"prefix": "lastgroup",
		"body": ["lastgroup()"]},
	"lastindex() from the re module": {
		"description": "lastindex() from the re module",
		"prefix": "lastindex",
		"body": ["lastindex()"]},
	"match() from the re module": {
		"description": "match() from the re module",
		"prefix": "match",
		"body": ["match(${1:pattern}, ${2:string}, ${3:flags=0})"]},
	"match() from the re module": {
		"description": "match() from the re module",
		"prefix": "match",
		"body": ["match(${1:string[}, ${2:pos[}, ${3:endpos]]})"]},
	"pattern() from the re module": {
		"description": "pattern() from the re module",
		"prefix": "pattern",
		"body": ["pattern()"]},
	"pos() from the re module": {
		"description": "pos() from the re module",
		"prefix": "pos",
		"body": ["pos()"]},
	"purge() from the re module": {
		"description": "purge() from the re module",
		"prefix": "purge",
		"body": ["purge(${1:})"]},
	"re() from the re module": {
		"description": "re() from the re module",
		"prefix": "re",
		"body": ["re()"]},
	"search() from the re module": {
		"description": "search() from the re module",
		"prefix": "search",
		"body": ["search(${1:pattern}, ${2:string}, ${3:flags=0})"]},
	"search() from the re module": {
		"description": "search() from the re module",
		"prefix": "search",
		"body": ["search(${1:string[}, ${2:pos[}, ${3:endpos]]})"]},
	"span() from the re module": {
		"description": "span() from the re module",
		"prefix": "span",
		"body": ["span(${1:[group]})"]},
	"split() from the re module": {
		"description": "split() from the re module",
		"prefix": "split",
		"body": ["split(${1:pattern}, ${2:string}, ${3:maxsplit=0}, ${4:flags=0})"]},
	"split() from the re module": {
		"description": "split() from the re module",
		"prefix": "split",
		"body": ["split(${1:string}, ${2:maxsplit=0})"]},
	"start() from the re module": {
		"description": "start() from the re module",
		"prefix": "start",
		"body": ["start(${1:[group]})"]},
	"string() from the re module": {
		"description": "string() from the re module",
		"prefix": "string",
		"body": ["string()"]},
	"sub() from the re module": {
		"description": "sub() from the re module",
		"prefix": "sub",
		"body": ["sub(${1:pattern}, ${2:repl}, ${3:string}, ${4:count=0}, ${5:flags=0})"]},
	"sub() from the re module": {
		"description": "sub() from the re module",
		"prefix": "sub",
		"body": ["sub(${1:repl}, ${2:string}, ${3:count=0})"]},
	"subn() from the re module": {
		"description": "subn() from the re module",
		"prefix": "subn",
		"body": ["subn(${1:pattern}, ${2:repl}, ${3:string}, ${4:count=0}, ${5:flags=0})"]},
	"subn() from the re module": {
		"description": "subn() from the re module",
		"prefix": "subn",
		"body": ["subn(${1:repl,})"]},
// readline completion
	"add_history() from the readline module": {
		"description": "add_history() from the readline module",
		"prefix": "add_history",
		"body": ["add_history(${1:line})"]},
	"append_history_file() from the readline module": {
		"description": "append_history_file() from the readline module",
		"prefix": "append_history_file",
		"body": ["append_history_file(${1:nelements[}, ${2:filename]})"]},
	"clear_history() from the readline module": {
		"description": "clear_history() from the readline module",
		"prefix": "clear_history",
		"body": ["clear_history(${1:})"]},
	"get_begidx() from the readline module": {
		"description": "get_begidx() from the readline module",
		"prefix": "get_begidx",
		"body": ["get_begidx(${1:})"]},
	"get_completer() from the readline module": {
		"description": "get_completer() from the readline module",
		"prefix": "get_completer",
		"body": ["get_completer(${1:})"]},
	"get_completer_delims() from the readline module": {
		"description": "get_completer_delims() from the readline module",
		"prefix": "get_completer_delims",
		"body": ["get_completer_delims(${1:})"]},
	"get_completion_type() from the readline module": {
		"description": "get_completion_type() from the readline module",
		"prefix": "get_completion_type",
		"body": ["get_completion_type(${1:})"]},
	"get_current_history_length() from the readline module": {
		"description": "get_current_history_length() from the readline module",
		"prefix": "get_current_history_length",
		"body": ["get_current_history_length(${1:})"]},
	"get_endidx() from the readline module": {
		"description": "get_endidx() from the readline module",
		"prefix": "get_endidx",
		"body": ["get_endidx(${1:})"]},
	"get_history_item() from the readline module": {
		"description": "get_history_item() from the readline module",
		"prefix": "get_history_item",
		"body": ["get_history_item(${1:index})"]},
	"get_history_length() from the readline module": {
		"description": "get_history_length() from the readline module",
		"prefix": "get_history_length",
		"body": ["get_history_length(${1:})"]},
	"get_line_buffer() from the readline module": {
		"description": "get_line_buffer() from the readline module",
		"prefix": "get_line_buffer",
		"body": ["get_line_buffer(${1:})"]},
	"insert_text() from the readline module": {
		"description": "insert_text() from the readline module",
		"prefix": "insert_text",
		"body": ["insert_text(${1:string})"]},
	"parse_and_bind() from the readline module": {
		"description": "parse_and_bind() from the readline module",
		"prefix": "parse_and_bind",
		"body": ["parse_and_bind(${1:string})"]},
	"read_history_file() from the readline module": {
		"description": "read_history_file() from the readline module",
		"prefix": "read_history_file",
		"body": ["read_history_file(${1:[filename]})"]},
	"read_init_file() from the readline module": {
		"description": "read_init_file() from the readline module",
		"prefix": "read_init_file",
		"body": ["read_init_file(${1:[filename]})"]},
	"redisplay() from the readline module": {
		"description": "redisplay() from the readline module",
		"prefix": "redisplay",
		"body": ["redisplay(${1:})"]},
	"remove_history_item() from the readline module": {
		"description": "remove_history_item() from the readline module",
		"prefix": "remove_history_item",
		"body": ["remove_history_item(${1:pos})"]},
	"replace_history_item() from the readline module": {
		"description": "replace_history_item() from the readline module",
		"prefix": "replace_history_item",
		"body": ["replace_history_item(${1:pos}, ${2:line})"]},
	"set_completer() from the readline module": {
		"description": "set_completer() from the readline module",
		"prefix": "set_completer",
		"body": ["set_completer(${1:[function]})"]},
	"set_completer_delims() from the readline module": {
		"description": "set_completer_delims() from the readline module",
		"prefix": "set_completer_delims",
		"body": ["set_completer_delims(${1:string})"]},
	"set_completion_display_matches_hook() from the readline module": {
		"description": "set_completion_display_matches_hook() from the readline module",
		"prefix": "set_completion_display_matches_hook",
		"body": ["set_completion_display_matches_hook(${1:[function]})"]},
	"set_history_length() from the readline module": {
		"description": "set_history_length() from the readline module",
		"prefix": "set_history_length",
		"body": ["set_history_length(${1:length})"]},
	"set_pre_input_hook() from the readline module": {
		"description": "set_pre_input_hook() from the readline module",
		"prefix": "set_pre_input_hook",
		"body": ["set_pre_input_hook(${1:[function]})"]},
	"set_startup_hook() from the readline module": {
		"description": "set_startup_hook() from the readline module",
		"prefix": "set_startup_hook",
		"body": ["set_startup_hook(${1:[function]})"]},
	"write_history_file() from the readline module": {
		"description": "write_history_file() from the readline module",
		"prefix": "write_history_file",
		"body": ["write_history_file(${1:[filename]})"]},
// reprlib completion
	"Repr from the reprlib module": {
		"description": "Repr from the reprlib module",
		"prefix": "Repr",
		"body": ["Repr"]},
	"aRepr() from the reprlib module": {
		"description": "aRepr() from the reprlib module",
		"prefix": "aRepr",
		"body": ["aRepr()"]},
	"maxarray() from the reprlib module": {
		"description": "maxarray() from the reprlib module",
		"prefix": "maxarray",
		"body": ["maxarray()"]},
	"maxdeque() from the reprlib module": {
		"description": "maxdeque() from the reprlib module",
		"prefix": "maxdeque",
		"body": ["maxdeque()"]},
	"maxdict() from the reprlib module": {
		"description": "maxdict() from the reprlib module",
		"prefix": "maxdict",
		"body": ["maxdict()"]},
	"maxfrozenset() from the reprlib module": {
		"description": "maxfrozenset() from the reprlib module",
		"prefix": "maxfrozenset",
		"body": ["maxfrozenset()"]},
	"maxlevel() from the reprlib module": {
		"description": "maxlevel() from the reprlib module",
		"prefix": "maxlevel",
		"body": ["maxlevel()"]},
	"maxlist() from the reprlib module": {
		"description": "maxlist() from the reprlib module",
		"prefix": "maxlist",
		"body": ["maxlist()"]},
	"maxlong() from the reprlib module": {
		"description": "maxlong() from the reprlib module",
		"prefix": "maxlong",
		"body": ["maxlong()"]},
	"maxother() from the reprlib module": {
		"description": "maxother() from the reprlib module",
		"prefix": "maxother",
		"body": ["maxother()"]},
	"maxset() from the reprlib module": {
		"description": "maxset() from the reprlib module",
		"prefix": "maxset",
		"body": ["maxset()"]},
	"maxstring() from the reprlib module": {
		"description": "maxstring() from the reprlib module",
		"prefix": "maxstring",
		"body": ["maxstring()"]},
	"maxtuple() from the reprlib module": {
		"description": "maxtuple() from the reprlib module",
		"prefix": "maxtuple",
		"body": ["maxtuple()"]},
	"recursive_repr() from the reprlib module": {
		"description": "recursive_repr() from the reprlib module",
		"prefix": "recursive_repr",
		"body": ["recursive_repr(${1:fillvalue=\"...\"})"]},
	"repr1() from the reprlib module": {
		"description": "repr1() from the reprlib module",
		"prefix": "repr1",
		"body": ["repr1(${1:obj}, ${2:level})"]},
	"repr() from the reprlib module": {
		"description": "repr() from the reprlib module",
		"prefix": "repr",
		"body": ["repr(${1:obj})"]},
	"repr_TYPE() from the reprlib module": {
		"description": "repr_TYPE() from the reprlib module",
		"prefix": "repr_TYPE",
		"body": ["repr_TYPE(${1:obj,})"]},
// resource completion
	"RLIMIT_AS from the resource module": {
		"description": "RLIMIT_AS from the resource module",
		"prefix": "RLIMIT_AS",
		"body": ["RLIMIT_AS"]},
	"RLIMIT_CORE from the resource module": {
		"description": "RLIMIT_CORE from the resource module",
		"prefix": "RLIMIT_CORE",
		"body": ["RLIMIT_CORE"]},
	"RLIMIT_CPU from the resource module": {
		"description": "RLIMIT_CPU from the resource module",
		"prefix": "RLIMIT_CPU",
		"body": ["RLIMIT_CPU"]},
	"RLIMIT_DATA from the resource module": {
		"description": "RLIMIT_DATA from the resource module",
		"prefix": "RLIMIT_DATA",
		"body": ["RLIMIT_DATA"]},
	"RLIMIT_FSIZE from the resource module": {
		"description": "RLIMIT_FSIZE from the resource module",
		"prefix": "RLIMIT_FSIZE",
		"body": ["RLIMIT_FSIZE"]},
	"RLIMIT_MEMLOCK from the resource module": {
		"description": "RLIMIT_MEMLOCK from the resource module",
		"prefix": "RLIMIT_MEMLOCK",
		"body": ["RLIMIT_MEMLOCK"]},
	"RLIMIT_MSGQUEUE from the resource module": {
		"description": "RLIMIT_MSGQUEUE from the resource module",
		"prefix": "RLIMIT_MSGQUEUE",
		"body": ["RLIMIT_MSGQUEUE"]},
	"RLIMIT_NICE from the resource module": {
		"description": "RLIMIT_NICE from the resource module",
		"prefix": "RLIMIT_NICE",
		"body": ["RLIMIT_NICE"]},
	"RLIMIT_NOFILE from the resource module": {
		"description": "RLIMIT_NOFILE from the resource module",
		"prefix": "RLIMIT_NOFILE",
		"body": ["RLIMIT_NOFILE"]},
	"RLIMIT_NPROC from the resource module": {
		"description": "RLIMIT_NPROC from the resource module",
		"prefix": "RLIMIT_NPROC",
		"body": ["RLIMIT_NPROC"]},
	"RLIMIT_NPTS from the resource module": {
		"description": "RLIMIT_NPTS from the resource module",
		"prefix": "RLIMIT_NPTS",
		"body": ["RLIMIT_NPTS"]},
	"RLIMIT_OFILE from the resource module": {
		"description": "RLIMIT_OFILE from the resource module",
		"prefix": "RLIMIT_OFILE",
		"body": ["RLIMIT_OFILE"]},
	"RLIMIT_RSS from the resource module": {
		"description": "RLIMIT_RSS from the resource module",
		"prefix": "RLIMIT_RSS",
		"body": ["RLIMIT_RSS"]},
	"RLIMIT_RTPRIO from the resource module": {
		"description": "RLIMIT_RTPRIO from the resource module",
		"prefix": "RLIMIT_RTPRIO",
		"body": ["RLIMIT_RTPRIO"]},
	"RLIMIT_RTTIME from the resource module": {
		"description": "RLIMIT_RTTIME from the resource module",
		"prefix": "RLIMIT_RTTIME",
		"body": ["RLIMIT_RTTIME"]},
	"RLIMIT_SBSIZE from the resource module": {
		"description": "RLIMIT_SBSIZE from the resource module",
		"prefix": "RLIMIT_SBSIZE",
		"body": ["RLIMIT_SBSIZE"]},
	"RLIMIT_SIGPENDING from the resource module": {
		"description": "RLIMIT_SIGPENDING from the resource module",
		"prefix": "RLIMIT_SIGPENDING",
		"body": ["RLIMIT_SIGPENDING"]},
	"RLIMIT_STACK from the resource module": {
		"description": "RLIMIT_STACK from the resource module",
		"prefix": "RLIMIT_STACK",
		"body": ["RLIMIT_STACK"]},
	"RLIMIT_SWAP from the resource module": {
		"description": "RLIMIT_SWAP from the resource module",
		"prefix": "RLIMIT_SWAP",
		"body": ["RLIMIT_SWAP"]},
	"RLIMIT_VMEM from the resource module": {
		"description": "RLIMIT_VMEM from the resource module",
		"prefix": "RLIMIT_VMEM",
		"body": ["RLIMIT_VMEM"]},
	"RLIM_INFINITY from the resource module": {
		"description": "RLIM_INFINITY from the resource module",
		"prefix": "RLIM_INFINITY",
		"body": ["RLIM_INFINITY"]},
	"RUSAGE_BOTH from the resource module": {
		"description": "RUSAGE_BOTH from the resource module",
		"prefix": "RUSAGE_BOTH",
		"body": ["RUSAGE_BOTH"]},
	"RUSAGE_CHILDREN from the resource module": {
		"description": "RUSAGE_CHILDREN from the resource module",
		"prefix": "RUSAGE_CHILDREN",
		"body": ["RUSAGE_CHILDREN"]},
	"RUSAGE_SELF from the resource module": {
		"description": "RUSAGE_SELF from the resource module",
		"prefix": "RUSAGE_SELF",
		"body": ["RUSAGE_SELF"]},
	"RUSAGE_THREAD from the resource module": {
		"description": "RUSAGE_THREAD from the resource module",
		"prefix": "RUSAGE_THREAD",
		"body": ["RUSAGE_THREAD"]},
	"error() from the resource module": {
		"description": "error() from the resource module",
		"prefix": "error",
		"body": ["error()"]},
	"getpagesize() from the resource module": {
		"description": "getpagesize() from the resource module",
		"prefix": "getpagesize",
		"body": ["getpagesize(${1:})"]},
	"getrlimit() from the resource module": {
		"description": "getrlimit() from the resource module",
		"prefix": "getrlimit",
		"body": ["getrlimit(${1:resource})"]},
	"getrusage() from the resource module": {
		"description": "getrusage() from the resource module",
		"prefix": "getrusage",
		"body": ["getrusage(${1:who})"]},
	"prlimit() from the resource module": {
		"description": "prlimit() from the resource module",
		"prefix": "prlimit",
		"body": ["prlimit(${1:pid}, ${2:resource[}, ${3:limits]})"]},
	"setrlimit() from the resource module": {
		"description": "setrlimit() from the resource module",
		"prefix": "setrlimit",
		"body": ["setrlimit(${1:resource,})"]},
// rlcompleter completion
	"complete() from the rlcompleter module": {
		"description": "complete() from the rlcompleter module",
		"prefix": "complete",
		"body": ["complete(${1:text,})"]},
// runpy completion
	"run_module() from the runpy module": {
		"description": "run_module() from the runpy module",
		"prefix": "run_module",
		"body": ["run_module(${1:mod_name}, ${2:init_globals=None}, ${3:run_name=None}, ${4:alter_sys=False})"]},
	"run_path() from the runpy module": {
		"description": "run_path() from the runpy module",
		"prefix": "run_path",
		"body": ["run_path(${1:file_path,})"]},
// sched completion
	"cancel() from the sched module": {
		"description": "cancel() from the sched module",
		"prefix": "cancel",
		"body": ["cancel(${1:event})"]},
	"empty() from the sched module": {
		"description": "empty() from the sched module",
		"prefix": "empty",
		"body": ["empty(${1:})"]},
	"enter() from the sched module": {
		"description": "enter() from the sched module",
		"prefix": "enter",
		"body": ["enter(${1:delay}, ${2:priority}, ${3:action}, ${4:argument=}, ${5:})"]},
	"enterabs() from the sched module": {
		"description": "enterabs() from the sched module",
		"prefix": "enterabs",
		"body": ["enterabs(${1:time}, ${2:priority}, ${3:action}, ${4:argument=}, ${5:})"]},
	"queue() from the sched module": {
		"description": "queue() from the sched module",
		"prefix": "queue",
		"body": ["queue()"]},
	"run() from the sched module": {
		"description": "run() from the sched module",
		"prefix": "run",
		"body": ["run(${1:blocking=True})"]},
	"scheduler() from the sched module": {
		"description": "scheduler() from the sched module",
		"prefix": "scheduler",
		"body": ["scheduler(${1:timefunc=time.monotonic,})"]},
// select completion
	"PIPE_BUF from the select module": {
		"description": "PIPE_BUF from the select module",
		"prefix": "PIPE_BUF",
		"body": ["PIPE_BUF"]},
	"close() from the select module": {
		"description": "close() from the select module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"closed() from the select module": {
		"description": "closed() from the select module",
		"prefix": "closed",
		"body": ["closed()"]},
	"control() from the select module": {
		"description": "control() from the select module",
		"prefix": "control",
		"body": ["control(${1:changelist}, ${2:max_events[}, ${3:timeout=None]})"]},
	"data() from the select module": {
		"description": "data() from the select module",
		"prefix": "data",
		"body": ["data()"]},
	"devpoll() from the select module": {
		"description": "devpoll() from the select module",
		"prefix": "devpoll",
		"body": ["devpoll(${1:})"]},
	"epoll() from the select module": {
		"description": "epoll() from the select module",
		"prefix": "epoll",
		"body": ["epoll(${1:sizehint=-1}, ${2:flags=0})"]},
	"error() from the select module": {
		"description": "error() from the select module",
		"prefix": "error",
		"body": ["error()"]},
	"fflags() from the select module": {
		"description": "fflags() from the select module",
		"prefix": "fflags",
		"body": ["fflags()"]},
	"fileno() from the select module": {
		"description": "fileno() from the select module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"filter() from the select module": {
		"description": "filter() from the select module",
		"prefix": "filter",
		"body": ["filter()"]},
	"flags() from the select module": {
		"description": "flags() from the select module",
		"prefix": "flags",
		"body": ["flags()"]},
	"fromfd() from the select module": {
		"description": "fromfd() from the select module",
		"prefix": "fromfd",
		"body": ["fromfd(${1:fd})"]},
	"ident() from the select module": {
		"description": "ident() from the select module",
		"prefix": "ident",
		"body": ["ident()"]},
	"kevent() from the select module": {
		"description": "kevent() from the select module",
		"prefix": "kevent",
		"body": ["kevent(${1:ident}, ${2:filter=KQ_FILTER_READ}, ${3:flags=KQ_EV_ADD}, ${4:fflags=0}, ${5:data=0}, ${6:udata=0})"]},
	"kqueue() from the select module": {
		"description": "kqueue() from the select module",
		"prefix": "kqueue",
		"body": ["kqueue(${1:})"]},
	"modify() from the select module": {
		"description": "modify() from the select module",
		"prefix": "modify",
		"body": ["modify(${1:fd}, ${2:eventmask})"]},
	"modify() from the select module": {
		"description": "modify() from the select module",
		"prefix": "modify",
		"body": ["modify(${1:fd[}, ${2:eventmask]})"]},
	"poll() from the select module": {
		"description": "poll() from the select module",
		"prefix": "poll",
		"body": ["poll(${1:timeout=-1}, ${2:maxevents=-1})"]},
	"poll() from the select module": {
		"description": "poll() from the select module",
		"prefix": "poll",
		"body": ["poll(${1:[timeout]})"]},
	"poll() from the select module": {
		"description": "poll() from the select module",
		"prefix": "poll",
		"body": ["poll(${1:})"]},
	"register() from the select module": {
		"description": "register() from the select module",
		"prefix": "register",
		"body": ["register(${1:fd[}, ${2:eventmask]})"]},
	"select() from the select module": {
		"description": "select() from the select module",
		"prefix": "select",
		"body": ["select(${1:rlist}, ${2:wlist}, ${3:xlist[}, ${4:timeout]})"]},
	"udata() from the select module": {
		"description": "udata() from the select module",
		"prefix": "udata",
		"body": ["udata()"]},
	"unregister() from the select module": {
		"description": "unregister() from the select module",
		"prefix": "unregister",
		"body": ["unregister(${1:fd})"]},
// selectors completion
	"BaseSelector from the selectors module": {
		"description": "BaseSelector from the selectors module",
		"prefix": "BaseSelector",
		"body": ["BaseSelector"]},
	"DefaultSelector from the selectors module": {
		"description": "DefaultSelector from the selectors module",
		"prefix": "DefaultSelector",
		"body": ["DefaultSelector"]},
	"DevpollSelector from the selectors module": {
		"description": "DevpollSelector from the selectors module",
		"prefix": "DevpollSelector",
		"body": ["DevpollSelector"]},
	"EpollSelector from the selectors module": {
		"description": "EpollSelector from the selectors module",
		"prefix": "EpollSelector",
		"body": ["EpollSelector"]},
	"KqueueSelector from the selectors module": {
		"description": "KqueueSelector from the selectors module",
		"prefix": "KqueueSelector",
		"body": ["KqueueSelector"]},
	"PollSelector from the selectors module": {
		"description": "PollSelector from the selectors module",
		"prefix": "PollSelector",
		"body": ["PollSelector"]},
	"SelectSelector from the selectors module": {
		"description": "SelectSelector from the selectors module",
		"prefix": "SelectSelector",
		"body": ["SelectSelector"]},
	"SelectorKey from the selectors module": {
		"description": "SelectorKey from the selectors module",
		"prefix": "SelectorKey",
		"body": ["SelectorKey"]},
// shelve completion
	"BsdDbShelf from the shelve module": {
		"description": "BsdDbShelf from the shelve module",
		"prefix": "BsdDbShelf",
		"body": ["BsdDbShelf(${1:dict}, ${2:protocol=None}, ${3:writeback=False}, ${4:keyencoding='utf-8'})"]},
	"DbfilenameShelf from the shelve module": {
		"description": "DbfilenameShelf from the shelve module",
		"prefix": "DbfilenameShelf",
		"body": ["DbfilenameShelf(${1:filename}, ${2:flag='c'}, ${3:protocol=None}, ${4:writeback=False})"]},
	"Shelf from the shelve module": {
		"description": "Shelf from the shelve module",
		"prefix": "Shelf",
		"body": ["Shelf(${1:dict}, ${2:protocol=None}, ${3:writeback=False}, ${4:keyencoding='utf-8'})"]},
	"close() from the shelve module": {
		"description": "close() from the shelve module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"open() from the shelve module": {
		"description": "open() from the shelve module",
		"prefix": "open",
		"body": ["open(${1:filename}, ${2:flag='c'}, ${3:protocol=None}, ${4:writeback=False})"]},
	"sync() from the shelve module": {
		"description": "sync() from the shelve module",
		"prefix": "sync",
		"body": ["sync(${1:})"]},
// shlex completion
	"commenters() from the shlex module": {
		"description": "commenters() from the shlex module",
		"prefix": "commenters",
		"body": ["commenters()"]},
	"debug() from the shlex module": {
		"description": "debug() from the shlex module",
		"prefix": "debug",
		"body": ["debug()"]},
	"eof() from the shlex module": {
		"description": "eof() from the shlex module",
		"prefix": "eof",
		"body": ["eof()"]},
	"error_leader() from the shlex module": {
		"description": "error_leader() from the shlex module",
		"prefix": "error_leader",
		"body": ["error_leader(${1:infile=None}, ${2:lineno=None})"]},
	"escape() from the shlex module": {
		"description": "escape() from the shlex module",
		"prefix": "escape",
		"body": ["escape()"]},
	"escapedquotes() from the shlex module": {
		"description": "escapedquotes() from the shlex module",
		"prefix": "escapedquotes",
		"body": ["escapedquotes()"]},
	"get_token() from the shlex module": {
		"description": "get_token() from the shlex module",
		"prefix": "get_token",
		"body": ["get_token(${1:})"]},
	"infile() from the shlex module": {
		"description": "infile() from the shlex module",
		"prefix": "infile",
		"body": ["infile()"]},
	"instream() from the shlex module": {
		"description": "instream() from the shlex module",
		"prefix": "instream",
		"body": ["instream()"]},
	"lineno() from the shlex module": {
		"description": "lineno() from the shlex module",
		"prefix": "lineno",
		"body": ["lineno()"]},
	"pop_source() from the shlex module": {
		"description": "pop_source() from the shlex module",
		"prefix": "pop_source",
		"body": ["pop_source(${1:})"]},
	"push_source() from the shlex module": {
		"description": "push_source() from the shlex module",
		"prefix": "push_source",
		"body": ["push_source(${1:newstream}, ${2:newfile=None})"]},
	"push_token() from the shlex module": {
		"description": "push_token() from the shlex module",
		"prefix": "push_token",
		"body": ["push_token(${1:str})"]},
	"quote() from the shlex module": {
		"description": "quote() from the shlex module",
		"prefix": "quote",
		"body": ["quote(${1:s})"]},
	"quotes() from the shlex module": {
		"description": "quotes() from the shlex module",
		"prefix": "quotes",
		"body": ["quotes()"]},
	"read_token() from the shlex module": {
		"description": "read_token() from the shlex module",
		"prefix": "read_token",
		"body": ["read_token(${1:})"]},
	"shlex() from the shlex module": {
		"description": "shlex() from the shlex module",
		"prefix": "shlex",
		"body": ["shlex(${1:instream=None}, ${2:infile=None}, ${3:posix=False})"]},
	"source() from the shlex module": {
		"description": "source() from the shlex module",
		"prefix": "source",
		"body": ["source()"]},
	"sourcehook() from the shlex module": {
		"description": "sourcehook() from the shlex module",
		"prefix": "sourcehook",
		"body": ["sourcehook(${1:filename})"]},
	"split() from the shlex module": {
		"description": "split() from the shlex module",
		"prefix": "split",
		"body": ["split(${1:s}, ${2:comments=False}, ${3:posix=True})"]},
	"token() from the shlex module": {
		"description": "token() from the shlex module",
		"prefix": "token",
		"body": ["token()"]},
	"whitespace() from the shlex module": {
		"description": "whitespace() from the shlex module",
		"prefix": "whitespace",
		"body": ["whitespace()"]},
	"whitespace_split() from the shlex module": {
		"description": "whitespace_split() from the shlex module",
		"prefix": "whitespace_split",
		"body": ["whitespace_split()"]},
	"wordchars() from the shlex module": {
		"description": "wordchars() from the shlex module",
		"prefix": "wordchars",
		"body": ["wordchars()"]},
// shutil completion
	"Error from the shutil module": {
		"description": "Error from the shutil module",
		"prefix": "Error",
		"body": ["Error"]},
	"SameFileError from the shutil module": {
		"description": "SameFileError from the shutil module",
		"prefix": "SameFileError",
		"body": ["SameFileError"]},
	"avoids_symlink_attacks() from the shutil module": {
		"description": "avoids_symlink_attacks() from the shutil module",
		"prefix": "avoids_symlink_attacks",
		"body": ["avoids_symlink_attacks()"]},
	"chown() from the shutil module": {
		"description": "chown() from the shutil module",
		"prefix": "chown",
		"body": ["chown(${1:path}, ${2:user=None}, ${3:group=None})"]},
	"copy2() from the shutil module": {
		"description": "copy2() from the shutil module",
		"prefix": "copy2",
		"body": ["copy2(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})"]},
	"copy() from the shutil module": {
		"description": "copy() from the shutil module",
		"prefix": "copy",
		"body": ["copy(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})"]},
	"copyfile() from the shutil module": {
		"description": "copyfile() from the shutil module",
		"prefix": "copyfile",
		"body": ["copyfile(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})"]},
	"copyfileobj() from the shutil module": {
		"description": "copyfileobj() from the shutil module",
		"prefix": "copyfileobj",
		"body": ["copyfileobj(${1:fsrc}, ${2:fdst[}, ${3:length]})"]},
	"copymode() from the shutil module": {
		"description": "copymode() from the shutil module",
		"prefix": "copymode",
		"body": ["copymode(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})"]},
	"copystat() from the shutil module": {
		"description": "copystat() from the shutil module",
		"prefix": "copystat",
		"body": ["copystat(${1:src}, ${2:dst}, ${3:*}, ${4:follow_symlinks=True})"]},
	"copytree() from the shutil module": {
		"description": "copytree() from the shutil module",
		"prefix": "copytree",
		"body": ["copytree(${1:src}, ${2:dst}, ${3:symlinks=False}, ${4:ignore=None}, ${5:copy_function=copy2}, ${6:ignore_dangling_symlinks=False})"]},
	"disk_usage() from the shutil module": {
		"description": "disk_usage() from the shutil module",
		"prefix": "disk_usage",
		"body": ["disk_usage(${1:path})"]},
	"get_archive_formats() from the shutil module": {
		"description": "get_archive_formats() from the shutil module",
		"prefix": "get_archive_formats",
		"body": ["get_archive_formats(${1:})"]},
	"get_terminal_size() from the shutil module": {
		"description": "get_terminal_size() from the shutil module",
		"prefix": "get_terminal_size",
		"body": ["get_terminal_size(${1:fallback=}, ${2:columns}, ${3:lines})"]},
	"get_unpack_formats() from the shutil module": {
		"description": "get_unpack_formats() from the shutil module",
		"prefix": "get_unpack_formats",
		"body": ["get_unpack_formats(${1:})"]},
	"ignore_patterns() from the shutil module": {
		"description": "ignore_patterns() from the shutil module",
		"prefix": "ignore_patterns",
		"body": ["ignore_patterns(${1:*patterns})"]},
	"make_archive() from the shutil module": {
		"description": "make_archive() from the shutil module",
		"prefix": "make_archive",
		"body": ["make_archive(${1:base_name}, ${2:format[}, ${3:root_dir[}, ${4:base_dir[}, ${5:verbose[}, ${6:dry_run[}, ${7:owner[}, ${8:group[}, ${9:logger]]]]]]]})"]},
	"move() from the shutil module": {
		"description": "move() from the shutil module",
		"prefix": "move",
		"body": ["move(${1:src}, ${2:dst}, ${3:copy_function=copy2})"]},
	"register_archive_format() from the shutil module": {
		"description": "register_archive_format() from the shutil module",
		"prefix": "register_archive_format",
		"body": ["register_archive_format(${1:name}, ${2:function[}, ${3:extra_args[}, ${4:description]]})"]},
	"register_unpack_format() from the shutil module": {
		"description": "register_unpack_format() from the shutil module",
		"prefix": "register_unpack_format",
		"body": ["register_unpack_format(${1:name}, ${2:extensions}, ${3:function[}, ${4:extra_args[}, ${5:description]]})"]},
	"rmtree() from the shutil module": {
		"description": "rmtree() from the shutil module",
		"prefix": "rmtree",
		"body": ["rmtree(${1:path}, ${2:ignore_errors=False}, ${3:onerror=None})"]},
	"unpack_archive() from the shutil module": {
		"description": "unpack_archive() from the shutil module",
		"prefix": "unpack_archive",
		"body": ["unpack_archive(${1:filename[}, ${2:extract_dir[}, ${3:format]]})"]},
	"unregister_archive_format() from the shutil module": {
		"description": "unregister_archive_format() from the shutil module",
		"prefix": "unregister_archive_format",
		"body": ["unregister_archive_format(${1:name})"]},
	"unregister_unpack_format() from the shutil module": {
		"description": "unregister_unpack_format() from the shutil module",
		"prefix": "unregister_unpack_format",
		"body": ["unregister_unpack_format(${1:name})"]},
	"which() from the shutil module": {
		"description": "which() from the shutil module",
		"prefix": "which",
		"body": ["which(${1:cmd,})"]},
// signal completion
	"CTRL_BREAK_EVENT from the signal module": {
		"description": "CTRL_BREAK_EVENT from the signal module",
		"prefix": "CTRL_BREAK_EVENT",
		"body": ["CTRL_BREAK_EVENT"]},
	"CTRL_C_EVENT from the signal module": {
		"description": "CTRL_C_EVENT from the signal module",
		"prefix": "CTRL_C_EVENT",
		"body": ["CTRL_C_EVENT"]},
	"ITIMER_PROF from the signal module": {
		"description": "ITIMER_PROF from the signal module",
		"prefix": "ITIMER_PROF",
		"body": ["ITIMER_PROF"]},
	"ITIMER_REAL from the signal module": {
		"description": "ITIMER_REAL from the signal module",
		"prefix": "ITIMER_REAL",
		"body": ["ITIMER_REAL"]},
	"ITIMER_VIRTUAL from the signal module": {
		"description": "ITIMER_VIRTUAL from the signal module",
		"prefix": "ITIMER_VIRTUAL",
		"body": ["ITIMER_VIRTUAL"]},
	"ItimerError from the signal module": {
		"description": "ItimerError from the signal module",
		"prefix": "ItimerError",
		"body": ["ItimerError"]},
	"NSIG from the signal module": {
		"description": "NSIG from the signal module",
		"prefix": "NSIG",
		"body": ["NSIG"]},
	"SIG_BLOCK from the signal module": {
		"description": "SIG_BLOCK from the signal module",
		"prefix": "SIG_BLOCK",
		"body": ["SIG_BLOCK"]},
	"SIG_DFL from the signal module": {
		"description": "SIG_DFL from the signal module",
		"prefix": "SIG_DFL",
		"body": ["SIG_DFL"]},
	"SIG_IGN from the signal module": {
		"description": "SIG_IGN from the signal module",
		"prefix": "SIG_IGN",
		"body": ["SIG_IGN"]},
	"SIG_SETMASK from the signal module": {
		"description": "SIG_SETMASK from the signal module",
		"prefix": "SIG_SETMASK",
		"body": ["SIG_SETMASK"]},
	"SIG_UNBLOCK from the signal module": {
		"description": "SIG_UNBLOCK from the signal module",
		"prefix": "SIG_UNBLOCK",
		"body": ["SIG_UNBLOCK"]},
	"alarm() from the signal module": {
		"description": "alarm() from the signal module",
		"prefix": "alarm",
		"body": ["alarm(${1:time})"]},
	"getitimer() from the signal module": {
		"description": "getitimer() from the signal module",
		"prefix": "getitimer",
		"body": ["getitimer(${1:which})"]},
	"getsignal() from the signal module": {
		"description": "getsignal() from the signal module",
		"prefix": "getsignal",
		"body": ["getsignal(${1:signalnum})"]},
	"pause() from the signal module": {
		"description": "pause() from the signal module",
		"prefix": "pause",
		"body": ["pause(${1:})"]},
	"pthread_kill() from the signal module": {
		"description": "pthread_kill() from the signal module",
		"prefix": "pthread_kill",
		"body": ["pthread_kill(${1:thread_id}, ${2:signalnum})"]},
	"pthread_sigmask() from the signal module": {
		"description": "pthread_sigmask() from the signal module",
		"prefix": "pthread_sigmask",
		"body": ["pthread_sigmask(${1:how}, ${2:mask})"]},
	"set_wakeup_fd() from the signal module": {
		"description": "set_wakeup_fd() from the signal module",
		"prefix": "set_wakeup_fd",
		"body": ["set_wakeup_fd(${1:fd})"]},
	"setitimer() from the signal module": {
		"description": "setitimer() from the signal module",
		"prefix": "setitimer",
		"body": ["setitimer(${1:which}, ${2:seconds[}, ${3:interval]})"]},
	"siginterrupt() from the signal module": {
		"description": "siginterrupt() from the signal module",
		"prefix": "siginterrupt",
		"body": ["siginterrupt(${1:signalnum}, ${2:flag})"]},
	"signal() from the signal module": {
		"description": "signal() from the signal module",
		"prefix": "signal",
		"body": ["signal(${1:signalnum}, ${2:handler})"]},
	"sigpending() from the signal module": {
		"description": "sigpending() from the signal module",
		"prefix": "sigpending",
		"body": ["sigpending(${1:})"]},
	"sigtimedwait() from the signal module": {
		"description": "sigtimedwait() from the signal module",
		"prefix": "sigtimedwait",
		"body": ["sigtimedwait(${1:sigset}, ${2:timeout})"]},
	"sigwait() from the signal module": {
		"description": "sigwait() from the signal module",
		"prefix": "sigwait",
		"body": ["sigwait(${1:sigset})"]},
	"sigwaitinfo() from the signal module": {
		"description": "sigwaitinfo() from the signal module",
		"prefix": "sigwaitinfo",
		"body": ["sigwaitinfo(${1:sigset})"]},
// site completion
	"ENABLE_USER_SITE from the site module": {
		"description": "ENABLE_USER_SITE from the site module",
		"prefix": "ENABLE_USER_SITE",
		"body": ["ENABLE_USER_SITE"]},
	"PREFIXES from the site module": {
		"description": "PREFIXES from the site module",
		"prefix": "PREFIXES",
		"body": ["PREFIXES"]},
	"USER_BASE from the site module": {
		"description": "USER_BASE from the site module",
		"prefix": "USER_BASE",
		"body": ["USER_BASE"]},
	"USER_SITE from the site module": {
		"description": "USER_SITE from the site module",
		"prefix": "USER_SITE",
		"body": ["USER_SITE"]},
	"addsitedir() from the site module": {
		"description": "addsitedir() from the site module",
		"prefix": "addsitedir",
		"body": ["addsitedir(${1:sitedir}, ${2:known_paths=None})"]},
	"getsitepackages() from the site module": {
		"description": "getsitepackages() from the site module",
		"prefix": "getsitepackages",
		"body": ["getsitepackages(${1:})"]},
	"getuserbase() from the site module": {
		"description": "getuserbase() from the site module",
		"prefix": "getuserbase",
		"body": ["getuserbase(${1:})"]},
	"getusersitepackages() from the site module": {
		"description": "getusersitepackages() from the site module",
		"prefix": "getusersitepackages",
		"body": ["getusersitepackages(${1:})"]},
	"main() from the site module": {
		"description": "main() from the site module",
		"prefix": "main",
		"body": ["main(${1:})"]},
// smtpd completion
	"DebuggingServer from the smtpd module": {
		"description": "DebuggingServer from the smtpd module",
		"prefix": "DebuggingServer",
		"body": ["DebuggingServer(${1:localaddr}, ${2:remoteaddr})"]},
	"MailmanProxy from the smtpd module": {
		"description": "MailmanProxy from the smtpd module",
		"prefix": "MailmanProxy",
		"body": ["MailmanProxy(${1:localaddr}, ${2:remoteaddr})"]},
	"PureProxy from the smtpd module": {
		"description": "PureProxy from the smtpd module",
		"prefix": "PureProxy",
		"body": ["PureProxy(${1:localaddr}, ${2:remoteaddr})"]},
	"SMTPChannel from the smtpd module": {
		"description": "SMTPChannel from the smtpd module",
		"prefix": "SMTPChannel",
		"body": ["SMTPChannel(${1:server}, ${2:conn}, ${3:addr}, ${4:data_size_limit=33554432}, ${5:map=None}, ${6:enable_SMTPUTF8=False}, ${7:decode_data=True})"]},
	"SMTPServer from the smtpd module": {
		"description": "SMTPServer from the smtpd module",
		"prefix": "SMTPServer",
		"body": ["SMTPServer(${1:localaddr,})"]},
// smtplib completion
	"LMTP from the smtplib module": {
		"description": "LMTP from the smtplib module",
		"prefix": "LMTP",
		"body": ["LMTP(${1:host=''}, ${2:port=LMTP_PORT}, ${3:local_hostname=None}, ${4:source_address=None})"]},
	"SMTP from the smtplib module": {
		"description": "SMTP from the smtplib module",
		"prefix": "SMTP",
		"body": ["SMTP(${1:host=''}, ${2:port=0}, ${3:local_hostname=None}, ${4:[timeout}, ${5:]source_address=None})"]},
	"SMTPAuthenticationError from the smtplib module": {
		"description": "SMTPAuthenticationError from the smtplib module",
		"prefix": "SMTPAuthenticationError",
		"body": ["SMTPAuthenticationError"]},
	"SMTPConnectError from the smtplib module": {
		"description": "SMTPConnectError from the smtplib module",
		"prefix": "SMTPConnectError",
		"body": ["SMTPConnectError"]},
	"SMTPDataError from the smtplib module": {
		"description": "SMTPDataError from the smtplib module",
		"prefix": "SMTPDataError",
		"body": ["SMTPDataError"]},
	"SMTPException from the smtplib module": {
		"description": "SMTPException from the smtplib module",
		"prefix": "SMTPException",
		"body": ["SMTPException"]},
	"SMTPHeloError from the smtplib module": {
		"description": "SMTPHeloError from the smtplib module",
		"prefix": "SMTPHeloError",
		"body": ["SMTPHeloError"]},
	"SMTPNotSupportedError from the smtplib module": {
		"description": "SMTPNotSupportedError from the smtplib module",
		"prefix": "SMTPNotSupportedError",
		"body": ["SMTPNotSupportedError"]},
	"SMTPRecipientsRefused from the smtplib module": {
		"description": "SMTPRecipientsRefused from the smtplib module",
		"prefix": "SMTPRecipientsRefused",
		"body": ["SMTPRecipientsRefused"]},
	"SMTPResponseException from the smtplib module": {
		"description": "SMTPResponseException from the smtplib module",
		"prefix": "SMTPResponseException",
		"body": ["SMTPResponseException"]},
	"SMTPSenderRefused from the smtplib module": {
		"description": "SMTPSenderRefused from the smtplib module",
		"prefix": "SMTPSenderRefused",
		"body": ["SMTPSenderRefused"]},
	"SMTPServerDisconnected from the smtplib module": {
		"description": "SMTPServerDisconnected from the smtplib module",
		"prefix": "SMTPServerDisconnected",
		"body": ["SMTPServerDisconnected"]},
	"SMTP_SSL from the smtplib module": {
		"description": "SMTP_SSL from the smtplib module",
		"prefix": "SMTP_SSL",
		"body": ["SMTP_SSL(${1:host=''}, ${2:port=0}, ${3:local_hostname=None}, ${4:keyfile=None}, ${5:certfile=None}, ${6:[timeout}, ${7:]context=None}, ${8:source_address=None})"]},
	"auth() from the smtplib module": {
		"description": "auth() from the smtplib module",
		"prefix": "auth",
		"body": ["auth(${1:mechanism}, ${2:authobject}, ${3:*}, ${4:initial_response_ok=True})"]},
	"connect() from the smtplib module": {
		"description": "connect() from the smtplib module",
		"prefix": "connect",
		"body": ["connect(${1:host='localhost'}, ${2:port=0})"]},
	"docmd() from the smtplib module": {
		"description": "docmd() from the smtplib module",
		"prefix": "docmd",
		"body": ["docmd(${1:cmd}, ${2:args=''})"]},
	"ehlo() from the smtplib module": {
		"description": "ehlo() from the smtplib module",
		"prefix": "ehlo",
		"body": ["ehlo(${1:name=''})"]},
	"ehlo_or_helo_if_needed() from the smtplib module": {
		"description": "ehlo_or_helo_if_needed() from the smtplib module",
		"prefix": "ehlo_or_helo_if_needed",
		"body": ["ehlo_or_helo_if_needed(${1:})"]},
	"has_extn() from the smtplib module": {
		"description": "has_extn() from the smtplib module",
		"prefix": "has_extn",
		"body": ["has_extn(${1:name})"]},
	"helo() from the smtplib module": {
		"description": "helo() from the smtplib module",
		"prefix": "helo",
		"body": ["helo(${1:name=''})"]},
	"login() from the smtplib module": {
		"description": "login() from the smtplib module",
		"prefix": "login",
		"body": ["login(${1:user}, ${2:password}, ${3:*}, ${4:initial_response_ok=True})"]},
	"quit() from the smtplib module": {
		"description": "quit() from the smtplib module",
		"prefix": "quit",
		"body": ["quit(${1:})"]},
	"send_message() from the smtplib module": {
		"description": "send_message() from the smtplib module",
		"prefix": "send_message",
		"body": ["send_message(${1:msg}, ${2:from_addr=None}, ${3:to_addrs=None}, ${4:mail_options=[]}, ${5:rcpt_options=[]})"]},
	"sendmail() from the smtplib module": {
		"description": "sendmail() from the smtplib module",
		"prefix": "sendmail",
		"body": ["sendmail(${1:from_addr}, ${2:to_addrs}, ${3:msg}, ${4:mail_options=[]}, ${5:rcpt_options=[]})"]},
	"set_debuglevel() from the smtplib module": {
		"description": "set_debuglevel() from the smtplib module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:level})"]},
	"starttls() from the smtplib module": {
		"description": "starttls() from the smtplib module",
		"prefix": "starttls",
		"body": ["starttls(${1:keyfile=None}, ${2:certfile=None}, ${3:context=None})"]},
	"verify() from the smtplib module": {
		"description": "verify() from the smtplib module",
		"prefix": "verify",
		"body": ["verify(${1:address})"]},
// sndhdr completion
	"what() from the sndhdr module": {
		"description": "what() from the sndhdr module",
		"prefix": "what",
		"body": ["what(${1:filename})"]},
	"whathdr() from the sndhdr module": {
		"description": "whathdr() from the sndhdr module",
		"prefix": "whathdr",
		"body": ["whathdr(${1:filename})"]},
// socket completion
	"AF_CAN from the socket module": {
		"description": "AF_CAN from the socket module",
		"prefix": "AF_CAN",
		"body": ["AF_CAN"]},
	"AF_INET6 from the socket module": {
		"description": "AF_INET6 from the socket module",
		"prefix": "AF_INET6",
		"body": ["AF_INET6"]},
	"AF_INET from the socket module": {
		"description": "AF_INET from the socket module",
		"prefix": "AF_INET",
		"body": ["AF_INET"]},
	"AF_LINK from the socket module": {
		"description": "AF_LINK from the socket module",
		"prefix": "AF_LINK",
		"body": ["AF_LINK"]},
	"AF_RDS from the socket module": {
		"description": "AF_RDS from the socket module",
		"prefix": "AF_RDS",
		"body": ["AF_RDS"]},
	"AF_UNIX from the socket module": {
		"description": "AF_UNIX from the socket module",
		"prefix": "AF_UNIX",
		"body": ["AF_UNIX"]},
	"BDADDR_ANY from the socket module": {
		"description": "BDADDR_ANY from the socket module",
		"prefix": "BDADDR_ANY",
		"body": ["BDADDR_ANY"]},
	"BDADDR_LOCAL from the socket module": {
		"description": "BDADDR_LOCAL from the socket module",
		"prefix": "BDADDR_LOCAL",
		"body": ["BDADDR_LOCAL"]},
	"CAN_BCM from the socket module": {
		"description": "CAN_BCM from the socket module",
		"prefix": "CAN_BCM",
		"body": ["CAN_BCM"]},
	"CAN_RAW_FD_FRAMES from the socket module": {
		"description": "CAN_RAW_FD_FRAMES from the socket module",
		"prefix": "CAN_RAW_FD_FRAMES",
		"body": ["CAN_RAW_FD_FRAMES"]},
	"CMSG_LEN from the socket module": {
		"description": "CMSG_LEN from the socket module",
		"prefix": "CMSG_LEN",
		"body": ["CMSG_LEN(${1:length})"]},
	"CMSG_SPACE from the socket module": {
		"description": "CMSG_SPACE from the socket module",
		"prefix": "CMSG_SPACE",
		"body": ["CMSG_SPACE(${1:length})"]},
	"HCI_DATA_DIR from the socket module": {
		"description": "HCI_DATA_DIR from the socket module",
		"prefix": "HCI_DATA_DIR",
		"body": ["HCI_DATA_DIR"]},
	"HCI_FILTER from the socket module": {
		"description": "HCI_FILTER from the socket module",
		"prefix": "HCI_FILTER",
		"body": ["HCI_FILTER"]},
	"HCI_TIME_STAMP from the socket module": {
		"description": "HCI_TIME_STAMP from the socket module",
		"prefix": "HCI_TIME_STAMP",
		"body": ["HCI_TIME_STAMP"]},
	"PF_CAN from the socket module": {
		"description": "PF_CAN from the socket module",
		"prefix": "PF_CAN",
		"body": ["PF_CAN"]},
	"PF_RDS from the socket module": {
		"description": "PF_RDS from the socket module",
		"prefix": "PF_RDS",
		"body": ["PF_RDS"]},
	"SOCK_CLOEXEC from the socket module": {
		"description": "SOCK_CLOEXEC from the socket module",
		"prefix": "SOCK_CLOEXEC",
		"body": ["SOCK_CLOEXEC"]},
	"SOCK_DGRAM from the socket module": {
		"description": "SOCK_DGRAM from the socket module",
		"prefix": "SOCK_DGRAM",
		"body": ["SOCK_DGRAM"]},
	"SOCK_NONBLOCK from the socket module": {
		"description": "SOCK_NONBLOCK from the socket module",
		"prefix": "SOCK_NONBLOCK",
		"body": ["SOCK_NONBLOCK"]},
	"SOCK_RAW from the socket module": {
		"description": "SOCK_RAW from the socket module",
		"prefix": "SOCK_RAW",
		"body": ["SOCK_RAW"]},
	"SOCK_RDM from the socket module": {
		"description": "SOCK_RDM from the socket module",
		"prefix": "SOCK_RDM",
		"body": ["SOCK_RDM"]},
	"SOCK_SEQPACKET from the socket module": {
		"description": "SOCK_SEQPACKET from the socket module",
		"prefix": "SOCK_SEQPACKET",
		"body": ["SOCK_SEQPACKET"]},
	"SOCK_STREAM from the socket module": {
		"description": "SOCK_STREAM from the socket module",
		"prefix": "SOCK_STREAM",
		"body": ["SOCK_STREAM"]},
	"SOL_RDS from the socket module": {
		"description": "SOL_RDS from the socket module",
		"prefix": "SOL_RDS",
		"body": ["SOL_RDS"]},
	"SOMAXCONN from the socket module": {
		"description": "SOMAXCONN from the socket module",
		"prefix": "SOMAXCONN",
		"body": ["SOMAXCONN"]},
	"SocketType from the socket module": {
		"description": "SocketType from the socket module",
		"prefix": "SocketType",
		"body": ["SocketType"]},
	"accept() from the socket module": {
		"description": "accept() from the socket module",
		"prefix": "accept",
		"body": ["accept(${1:})"]},
	"bind() from the socket module": {
		"description": "bind() from the socket module",
		"prefix": "bind",
		"body": ["bind(${1:address})"]},
	"close() from the socket module": {
		"description": "close() from the socket module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"connect() from the socket module": {
		"description": "connect() from the socket module",
		"prefix": "connect",
		"body": ["connect(${1:address})"]},
	"connect_ex() from the socket module": {
		"description": "connect_ex() from the socket module",
		"prefix": "connect_ex",
		"body": ["connect_ex(${1:address})"]},
	"create_connection() from the socket module": {
		"description": "create_connection() from the socket module",
		"prefix": "create_connection",
		"body": ["create_connection(${1:address[}, ${2:timeout[}, ${3:source_address]]})"]},
	"detach() from the socket module": {
		"description": "detach() from the socket module",
		"prefix": "detach",
		"body": ["detach(${1:})"]},
	"dup() from the socket module": {
		"description": "dup() from the socket module",
		"prefix": "dup",
		"body": ["dup(${1:})"]},
	"error() from the socket module": {
		"description": "error() from the socket module",
		"prefix": "error",
		"body": ["error()"]},
	"family() from the socket module": {
		"description": "family() from the socket module",
		"prefix": "family",
		"body": ["family()"]},
	"fileno() from the socket module": {
		"description": "fileno() from the socket module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"fromfd() from the socket module": {
		"description": "fromfd() from the socket module",
		"prefix": "fromfd",
		"body": ["fromfd(${1:fd}, ${2:family}, ${3:type}, ${4:proto=0})"]},
	"fromshare() from the socket module": {
		"description": "fromshare() from the socket module",
		"prefix": "fromshare",
		"body": ["fromshare(${1:data})"]},
	"gaierror() from the socket module": {
		"description": "gaierror() from the socket module",
		"prefix": "gaierror",
		"body": ["gaierror()"]},
	"get_inheritable() from the socket module": {
		"description": "get_inheritable() from the socket module",
		"prefix": "get_inheritable",
		"body": ["get_inheritable(${1:})"]},
	"getaddrinfo() from the socket module": {
		"description": "getaddrinfo() from the socket module",
		"prefix": "getaddrinfo",
		"body": ["getaddrinfo(${1:host}, ${2:port}, ${3:family=0}, ${4:type=0}, ${5:proto=0}, ${6:flags=0})"]},
	"getdefaulttimeout() from the socket module": {
		"description": "getdefaulttimeout() from the socket module",
		"prefix": "getdefaulttimeout",
		"body": ["getdefaulttimeout(${1:})"]},
	"getfqdn() from the socket module": {
		"description": "getfqdn() from the socket module",
		"prefix": "getfqdn",
		"body": ["getfqdn(${1:[name]})"]},
	"gethostbyaddr() from the socket module": {
		"description": "gethostbyaddr() from the socket module",
		"prefix": "gethostbyaddr",
		"body": ["gethostbyaddr(${1:ip_address})"]},
	"gethostbyname() from the socket module": {
		"description": "gethostbyname() from the socket module",
		"prefix": "gethostbyname",
		"body": ["gethostbyname(${1:hostname})"]},
	"gethostbyname_ex() from the socket module": {
		"description": "gethostbyname_ex() from the socket module",
		"prefix": "gethostbyname_ex",
		"body": ["gethostbyname_ex(${1:hostname})"]},
	"gethostname() from the socket module": {
		"description": "gethostname() from the socket module",
		"prefix": "gethostname",
		"body": ["gethostname(${1:})"]},
	"getnameinfo() from the socket module": {
		"description": "getnameinfo() from the socket module",
		"prefix": "getnameinfo",
		"body": ["getnameinfo(${1:sockaddr}, ${2:flags})"]},
	"getpeername() from the socket module": {
		"description": "getpeername() from the socket module",
		"prefix": "getpeername",
		"body": ["getpeername(${1:})"]},
	"getprotobyname() from the socket module": {
		"description": "getprotobyname() from the socket module",
		"prefix": "getprotobyname",
		"body": ["getprotobyname(${1:protocolname})"]},
	"getservbyname() from the socket module": {
		"description": "getservbyname() from the socket module",
		"prefix": "getservbyname",
		"body": ["getservbyname(${1:servicename[}, ${2:protocolname]})"]},
	"getservbyport() from the socket module": {
		"description": "getservbyport() from the socket module",
		"prefix": "getservbyport",
		"body": ["getservbyport(${1:port[}, ${2:protocolname]})"]},
	"getsockname() from the socket module": {
		"description": "getsockname() from the socket module",
		"prefix": "getsockname",
		"body": ["getsockname(${1:})"]},
	"getsockopt() from the socket module": {
		"description": "getsockopt() from the socket module",
		"prefix": "getsockopt",
		"body": ["getsockopt(${1:level}, ${2:optname[}, ${3:buflen]})"]},
	"gettimeout() from the socket module": {
		"description": "gettimeout() from the socket module",
		"prefix": "gettimeout",
		"body": ["gettimeout(${1:})"]},
	"has_ipv6() from the socket module": {
		"description": "has_ipv6() from the socket module",
		"prefix": "has_ipv6",
		"body": ["has_ipv6()"]},
	"herror() from the socket module": {
		"description": "herror() from the socket module",
		"prefix": "herror",
		"body": ["herror()"]},
	"htonl() from the socket module": {
		"description": "htonl() from the socket module",
		"prefix": "htonl",
		"body": ["htonl(${1:x})"]},
	"htons() from the socket module": {
		"description": "htons() from the socket module",
		"prefix": "htons",
		"body": ["htons(${1:x})"]},
	"if_indextoname() from the socket module": {
		"description": "if_indextoname() from the socket module",
		"prefix": "if_indextoname",
		"body": ["if_indextoname(${1:if_index})"]},
	"if_nameindex() from the socket module": {
		"description": "if_nameindex() from the socket module",
		"prefix": "if_nameindex",
		"body": ["if_nameindex(${1:})"]},
	"if_nametoindex() from the socket module": {
		"description": "if_nametoindex() from the socket module",
		"prefix": "if_nametoindex",
		"body": ["if_nametoindex(${1:if_name})"]},
	"inet_aton() from the socket module": {
		"description": "inet_aton() from the socket module",
		"prefix": "inet_aton",
		"body": ["inet_aton(${1:ip_string})"]},
	"inet_ntoa() from the socket module": {
		"description": "inet_ntoa() from the socket module",
		"prefix": "inet_ntoa",
		"body": ["inet_ntoa(${1:packed_ip})"]},
	"inet_ntop() from the socket module": {
		"description": "inet_ntop() from the socket module",
		"prefix": "inet_ntop",
		"body": ["inet_ntop(${1:address_family}, ${2:packed_ip})"]},
	"inet_pton() from the socket module": {
		"description": "inet_pton() from the socket module",
		"prefix": "inet_pton",
		"body": ["inet_pton(${1:address_family}, ${2:ip_string})"]},
	"ioctl() from the socket module": {
		"description": "ioctl() from the socket module",
		"prefix": "ioctl",
		"body": ["ioctl(${1:control}, ${2:option})"]},
	"listen() from the socket module": {
		"description": "listen() from the socket module",
		"prefix": "listen",
		"body": ["listen(${1:[backlog]})"]},
	"makefile() from the socket module": {
		"description": "makefile() from the socket module",
		"prefix": "makefile",
		"body": ["makefile(${1:mode='r'}, ${2:buffering=None}, ${3:*}, ${4:encoding=None}, ${5:errors=None}, ${6:newline=None})"]},
	"ntohl() from the socket module": {
		"description": "ntohl() from the socket module",
		"prefix": "ntohl",
		"body": ["ntohl(${1:x})"]},
	"ntohs() from the socket module": {
		"description": "ntohs() from the socket module",
		"prefix": "ntohs",
		"body": ["ntohs(${1:x})"]},
	"proto() from the socket module": {
		"description": "proto() from the socket module",
		"prefix": "proto",
		"body": ["proto()"]},
	"recv() from the socket module": {
		"description": "recv() from the socket module",
		"prefix": "recv",
		"body": ["recv(${1:bufsize[}, ${2:flags]})"]},
	"recv_into() from the socket module": {
		"description": "recv_into() from the socket module",
		"prefix": "recv_into",
		"body": ["recv_into(${1:buffer[}, ${2:nbytes[}, ${3:flags]]})"]},
	"recvfrom() from the socket module": {
		"description": "recvfrom() from the socket module",
		"prefix": "recvfrom",
		"body": ["recvfrom(${1:bufsize[}, ${2:flags]})"]},
	"recvfrom_into() from the socket module": {
		"description": "recvfrom_into() from the socket module",
		"prefix": "recvfrom_into",
		"body": ["recvfrom_into(${1:buffer[}, ${2:nbytes[}, ${3:flags]]})"]},
	"recvmsg() from the socket module": {
		"description": "recvmsg() from the socket module",
		"prefix": "recvmsg",
		"body": ["recvmsg(${1:bufsize[}, ${2:ancbufsize[}, ${3:flags]]})"]},
	"recvmsg_into() from the socket module": {
		"description": "recvmsg_into() from the socket module",
		"prefix": "recvmsg_into",
		"body": ["recvmsg_into(${1:buffers[}, ${2:ancbufsize[}, ${3:flags]]})"]},
	"send() from the socket module": {
		"description": "send() from the socket module",
		"prefix": "send",
		"body": ["send(${1:bytes[}, ${2:flags]})"]},
	"sendall() from the socket module": {
		"description": "sendall() from the socket module",
		"prefix": "sendall",
		"body": ["sendall(${1:bytes[}, ${2:flags]})"]},
	"sendfile() from the socket module": {
		"description": "sendfile() from the socket module",
		"prefix": "sendfile",
		"body": ["sendfile(${1:file}, ${2:offset=0}, ${3:count=None})"]},
	"sendmsg() from the socket module": {
		"description": "sendmsg() from the socket module",
		"prefix": "sendmsg",
		"body": ["sendmsg(${1:buffers[}, ${2:ancdata[}, ${3:flags[}, ${4:address]]]})"]},
	"sendto() from the socket module": {
		"description": "sendto() from the socket module",
		"prefix": "sendto",
		"body": ["sendto(${1:bytes}, ${2:address})"]},
	"sendto() from the socket module": {
		"description": "sendto() from the socket module",
		"prefix": "sendto",
		"body": ["sendto(${1:bytes}, ${2:flags}, ${3:address})"]},
	"set_inheritable() from the socket module": {
		"description": "set_inheritable() from the socket module",
		"prefix": "set_inheritable",
		"body": ["set_inheritable(${1:inheritable})"]},
	"setblocking() from the socket module": {
		"description": "setblocking() from the socket module",
		"prefix": "setblocking",
		"body": ["setblocking(${1:flag})"]},
	"setdefaulttimeout() from the socket module": {
		"description": "setdefaulttimeout() from the socket module",
		"prefix": "setdefaulttimeout",
		"body": ["setdefaulttimeout(${1:timeout})"]},
	"sethostname() from the socket module": {
		"description": "sethostname() from the socket module",
		"prefix": "sethostname",
		"body": ["sethostname(${1:name})"]},
	"setsockopt() from the socket module": {
		"description": "setsockopt() from the socket module",
		"prefix": "setsockopt",
		"body": ["setsockopt(${1:level}, ${2:optname}, ${3:value})"]},
	"settimeout() from the socket module": {
		"description": "settimeout() from the socket module",
		"prefix": "settimeout",
		"body": ["settimeout(${1:value})"]},
	"share() from the socket module": {
		"description": "share() from the socket module",
		"prefix": "share",
		"body": ["share(${1:process_id})"]},
	"shutdown() from the socket module": {
		"description": "shutdown() from the socket module",
		"prefix": "shutdown",
		"body": ["shutdown(${1:how})"]},
	"socket() from the socket module": {
		"description": "socket() from the socket module",
		"prefix": "socket",
		"body": ["socket(${1:family=AF_INET}, ${2:type=SOCK_STREAM}, ${3:proto=0}, ${4:fileno=None})"]},
	"socketpair() from the socket module": {
		"description": "socketpair() from the socket module",
		"prefix": "socketpair",
		"body": ["socketpair(${1:[family[}, ${2:type[}, ${3:proto]]]})"]},
	"timeout() from the socket module": {
		"description": "timeout() from the socket module",
		"prefix": "timeout",
		"body": ["timeout()"]},
	"type() from the socket module": {
		"description": "type() from the socket module",
		"prefix": "type",
		"body": ["type()"]},
// socketserver completion
	"BaseRequestHandler from the socketserver module": {
		"description": "BaseRequestHandler from the socketserver module",
		"prefix": "BaseRequestHandler",
		"body": ["BaseRequestHandler"]},
	"BaseServer from the socketserver module": {
		"description": "BaseServer from the socketserver module",
		"prefix": "BaseServer",
		"body": ["BaseServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"DatagramRequestHandler from the socketserver module": {
		"description": "DatagramRequestHandler from the socketserver module",
		"prefix": "DatagramRequestHandler",
		"body": ["DatagramRequestHandler"]},
	"ForkingMixIn from the socketserver module": {
		"description": "ForkingMixIn from the socketserver module",
		"prefix": "ForkingMixIn",
		"body": ["ForkingMixIn"]},
	"ForkingTCPServer from the socketserver module": {
		"description": "ForkingTCPServer from the socketserver module",
		"prefix": "ForkingTCPServer",
		"body": ["ForkingTCPServer"]},
	"ForkingUDPServer from the socketserver module": {
		"description": "ForkingUDPServer from the socketserver module",
		"prefix": "ForkingUDPServer",
		"body": ["ForkingUDPServer"]},
	"StreamRequestHandler from the socketserver module": {
		"description": "StreamRequestHandler from the socketserver module",
		"prefix": "StreamRequestHandler",
		"body": ["StreamRequestHandler"]},
	"TCPServer from the socketserver module": {
		"description": "TCPServer from the socketserver module",
		"prefix": "TCPServer",
		"body": ["TCPServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})"]},
	"ThreadingMixIn from the socketserver module": {
		"description": "ThreadingMixIn from the socketserver module",
		"prefix": "ThreadingMixIn",
		"body": ["ThreadingMixIn"]},
	"ThreadingTCPServer from the socketserver module": {
		"description": "ThreadingTCPServer from the socketserver module",
		"prefix": "ThreadingTCPServer",
		"body": ["ThreadingTCPServer"]},
	"ThreadingUDPServer from the socketserver module": {
		"description": "ThreadingUDPServer from the socketserver module",
		"prefix": "ThreadingUDPServer",
		"body": ["ThreadingUDPServer"]},
	"UDPServer from the socketserver module": {
		"description": "UDPServer from the socketserver module",
		"prefix": "UDPServer",
		"body": ["UDPServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})"]},
	"UnixDatagramServer from the socketserver module": {
		"description": "UnixDatagramServer from the socketserver module",
		"prefix": "UnixDatagramServer",
		"body": ["UnixDatagramServer(${1:server_address}, ${2:RequestHandlerClass}, ${3:bind_and_activate=True})"]},
	"UnixStreamServer from the socketserver module": {
		"description": "UnixStreamServer from the socketserver module",
		"prefix": "UnixStreamServer",
		"body": ["UnixStreamServer(${1:server_address,})"]},
// spwd completion
	"getspall() from the spwd module": {
		"description": "getspall() from the spwd module",
		"prefix": "getspall",
		"body": ["getspall(${1:})"]},
	"getspnam() from the spwd module": {
		"description": "getspnam() from the spwd module",
		"prefix": "getspnam",
		"body": ["getspnam(${1:name})"]},
// sqlite3 completion
	"Connection from the sqlite3 module": {
		"description": "Connection from the sqlite3 module",
		"prefix": "Connection",
		"body": ["Connection"]},
	"Cursor from the sqlite3 module": {
		"description": "Cursor from the sqlite3 module",
		"prefix": "Cursor",
		"body": ["Cursor"]},
	"PARSE_COLNAMES from the sqlite3 module": {
		"description": "PARSE_COLNAMES from the sqlite3 module",
		"prefix": "PARSE_COLNAMES",
		"body": ["PARSE_COLNAMES"]},
	"PARSE_DECLTYPES from the sqlite3 module": {
		"description": "PARSE_DECLTYPES from the sqlite3 module",
		"prefix": "PARSE_DECLTYPES",
		"body": ["PARSE_DECLTYPES"]},
	"Row from the sqlite3 module": {
		"description": "Row from the sqlite3 module",
		"prefix": "Row",
		"body": ["Row"]},
	"complete_statement() from the sqlite3 module": {
		"description": "complete_statement() from the sqlite3 module",
		"prefix": "complete_statement",
		"body": ["complete_statement(${1:sql})"]},
	"connect() from the sqlite3 module": {
		"description": "connect() from the sqlite3 module",
		"prefix": "connect",
		"body": ["connect(${1:database[}, ${2:timeout}, ${3:detect_types}, ${4:isolation_level}, ${5:check_same_thread}, ${6:factory}, ${7:cached_statements}, ${8:uri]})"]},
	"enable_callback_tracebacks() from the sqlite3 module": {
		"description": "enable_callback_tracebacks() from the sqlite3 module",
		"prefix": "enable_callback_tracebacks",
		"body": ["enable_callback_tracebacks(${1:flag})"]},
	"register_adapter() from the sqlite3 module": {
		"description": "register_adapter() from the sqlite3 module",
		"prefix": "register_adapter",
		"body": ["register_adapter(${1:type}, ${2:callable})"]},
	"register_converter() from the sqlite3 module": {
		"description": "register_converter() from the sqlite3 module",
		"prefix": "register_converter",
		"body": ["register_converter(${1:typename}, ${2:callable})"]},
	"sqlite_version() from the sqlite3 module": {
		"description": "sqlite_version() from the sqlite3 module",
		"prefix": "sqlite_version",
		"body": ["sqlite_version()"]},
	"sqlite_version_info() from the sqlite3 module": {
		"description": "sqlite_version_info() from the sqlite3 module",
		"prefix": "sqlite_version_info",
		"body": ["sqlite_version_info()"]},
	"version() from the sqlite3 module": {
		"description": "version() from the sqlite3 module",
		"prefix": "version",
		"body": ["version()"]},
	"version_info() from the sqlite3 module": {
		"description": "version_info() from the sqlite3 module",
		"prefix": "version_info",
		"body": ["version_info()"]},
// ssl completion
	"ALERT_DESCRIPTION_HANDSHAKE_FAILURE from the ssl module": {
		"description": "ALERT_DESCRIPTION_HANDSHAKE_FAILURE from the ssl module",
		"prefix": "ALERT_DESCRIPTION_HANDSHAKE_FAILURE",
		"body": ["ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]},
	"ALERT_DESCRIPTION_INTERNAL_ERROR from the ssl module": {
		"description": "ALERT_DESCRIPTION_INTERNAL_ERROR from the ssl module",
		"prefix": "ALERT_DESCRIPTION_INTERNAL_ERROR",
		"body": ["ALERT_DESCRIPTION_INTERNAL_ERROR"]},
	"CERT_NONE from the ssl module": {
		"description": "CERT_NONE from the ssl module",
		"prefix": "CERT_NONE",
		"body": ["CERT_NONE"]},
	"CERT_OPTIONAL from the ssl module": {
		"description": "CERT_OPTIONAL from the ssl module",
		"prefix": "CERT_OPTIONAL",
		"body": ["CERT_OPTIONAL"]},
	"CERT_REQUIRED from the ssl module": {
		"description": "CERT_REQUIRED from the ssl module",
		"prefix": "CERT_REQUIRED",
		"body": ["CERT_REQUIRED"]},
	"CHANNEL_BINDING_TYPES from the ssl module": {
		"description": "CHANNEL_BINDING_TYPES from the ssl module",
		"prefix": "CHANNEL_BINDING_TYPES",
		"body": ["CHANNEL_BINDING_TYPES"]},
	"CLIENT_AUTH from the ssl module": {
		"description": "CLIENT_AUTH from the ssl module",
		"prefix": "CLIENT_AUTH",
		"body": ["CLIENT_AUTH"]},
	"CertificateError from the ssl module": {
		"description": "CertificateError from the ssl module",
		"prefix": "CertificateError",
		"body": ["CertificateError"]},
	"DER_cert_to_PEM_cert from the ssl module": {
		"description": "DER_cert_to_PEM_cert from the ssl module",
		"prefix": "DER_cert_to_PEM_cert",
		"body": ["DER_cert_to_PEM_cert(${1:DER_cert_bytes})"]},
	"HAS_ALPN from the ssl module": {
		"description": "HAS_ALPN from the ssl module",
		"prefix": "HAS_ALPN",
		"body": ["HAS_ALPN"]},
	"HAS_ECDH from the ssl module": {
		"description": "HAS_ECDH from the ssl module",
		"prefix": "HAS_ECDH",
		"body": ["HAS_ECDH"]},
	"HAS_NPN from the ssl module": {
		"description": "HAS_NPN from the ssl module",
		"prefix": "HAS_NPN",
		"body": ["HAS_NPN"]},
	"HAS_SNI from the ssl module": {
		"description": "HAS_SNI from the ssl module",
		"prefix": "HAS_SNI",
		"body": ["HAS_SNI"]},
	"MemoryBIO from the ssl module": {
		"description": "MemoryBIO from the ssl module",
		"prefix": "MemoryBIO",
		"body": ["MemoryBIO"]},
	"OPENSSL_VERSION from the ssl module": {
		"description": "OPENSSL_VERSION from the ssl module",
		"prefix": "OPENSSL_VERSION",
		"body": ["OPENSSL_VERSION"]},
	"OPENSSL_VERSION_INFO from the ssl module": {
		"description": "OPENSSL_VERSION_INFO from the ssl module",
		"prefix": "OPENSSL_VERSION_INFO",
		"body": ["OPENSSL_VERSION_INFO"]},
	"OPENSSL_VERSION_NUMBER from the ssl module": {
		"description": "OPENSSL_VERSION_NUMBER from the ssl module",
		"prefix": "OPENSSL_VERSION_NUMBER",
		"body": ["OPENSSL_VERSION_NUMBER"]},
	"OP_ALL from the ssl module": {
		"description": "OP_ALL from the ssl module",
		"prefix": "OP_ALL",
		"body": ["OP_ALL"]},
	"OP_CIPHER_SERVER_PREFERENCE from the ssl module": {
		"description": "OP_CIPHER_SERVER_PREFERENCE from the ssl module",
		"prefix": "OP_CIPHER_SERVER_PREFERENCE",
		"body": ["OP_CIPHER_SERVER_PREFERENCE"]},
	"OP_NO_COMPRESSION from the ssl module": {
		"description": "OP_NO_COMPRESSION from the ssl module",
		"prefix": "OP_NO_COMPRESSION",
		"body": ["OP_NO_COMPRESSION"]},
	"OP_NO_SSLv2 from the ssl module": {
		"description": "OP_NO_SSLv2 from the ssl module",
		"prefix": "OP_NO_SSLv2",
		"body": ["OP_NO_SSLv2"]},
	"OP_NO_SSLv3 from the ssl module": {
		"description": "OP_NO_SSLv3 from the ssl module",
		"prefix": "OP_NO_SSLv3",
		"body": ["OP_NO_SSLv3"]},
	"OP_NO_TLSv1 from the ssl module": {
		"description": "OP_NO_TLSv1 from the ssl module",
		"prefix": "OP_NO_TLSv1",
		"body": ["OP_NO_TLSv1"]},
	"OP_NO_TLSv1_1 from the ssl module": {
		"description": "OP_NO_TLSv1_1 from the ssl module",
		"prefix": "OP_NO_TLSv1_1",
		"body": ["OP_NO_TLSv1_1"]},
	"OP_NO_TLSv1_2 from the ssl module": {
		"description": "OP_NO_TLSv1_2 from the ssl module",
		"prefix": "OP_NO_TLSv1_2",
		"body": ["OP_NO_TLSv1_2"]},
	"OP_SINGLE_DH_USE from the ssl module": {
		"description": "OP_SINGLE_DH_USE from the ssl module",
		"prefix": "OP_SINGLE_DH_USE",
		"body": ["OP_SINGLE_DH_USE"]},
	"OP_SINGLE_ECDH_USE from the ssl module": {
		"description": "OP_SINGLE_ECDH_USE from the ssl module",
		"prefix": "OP_SINGLE_ECDH_USE",
		"body": ["OP_SINGLE_ECDH_USE"]},
	"PEM_cert_to_DER_cert from the ssl module": {
		"description": "PEM_cert_to_DER_cert from the ssl module",
		"prefix": "PEM_cert_to_DER_cert",
		"body": ["PEM_cert_to_DER_cert(${1:PEM_cert_string})"]},
	"PROTOCOL_SSLv23 from the ssl module": {
		"description": "PROTOCOL_SSLv23 from the ssl module",
		"prefix": "PROTOCOL_SSLv23",
		"body": ["PROTOCOL_SSLv23"]},
	"PROTOCOL_SSLv2 from the ssl module": {
		"description": "PROTOCOL_SSLv2 from the ssl module",
		"prefix": "PROTOCOL_SSLv2",
		"body": ["PROTOCOL_SSLv2"]},
	"PROTOCOL_SSLv3 from the ssl module": {
		"description": "PROTOCOL_SSLv3 from the ssl module",
		"prefix": "PROTOCOL_SSLv3",
		"body": ["PROTOCOL_SSLv3"]},
	"PROTOCOL_TLSv1 from the ssl module": {
		"description": "PROTOCOL_TLSv1 from the ssl module",
		"prefix": "PROTOCOL_TLSv1",
		"body": ["PROTOCOL_TLSv1"]},
	"PROTOCOL_TLSv1_1 from the ssl module": {
		"description": "PROTOCOL_TLSv1_1 from the ssl module",
		"prefix": "PROTOCOL_TLSv1_1",
		"body": ["PROTOCOL_TLSv1_1"]},
	"PROTOCOL_TLSv1_2 from the ssl module": {
		"description": "PROTOCOL_TLSv1_2 from the ssl module",
		"prefix": "PROTOCOL_TLSv1_2",
		"body": ["PROTOCOL_TLSv1_2"]},
	"RAND_add from the ssl module": {
		"description": "RAND_add from the ssl module",
		"prefix": "RAND_add",
		"body": ["RAND_add(${1:bytes}, ${2:entropy})"]},
	"RAND_bytes from the ssl module": {
		"description": "RAND_bytes from the ssl module",
		"prefix": "RAND_bytes",
		"body": ["RAND_bytes(${1:num})"]},
	"RAND_egd from the ssl module": {
		"description": "RAND_egd from the ssl module",
		"prefix": "RAND_egd",
		"body": ["RAND_egd(${1:path})"]},
	"RAND_pseudo_bytes from the ssl module": {
		"description": "RAND_pseudo_bytes from the ssl module",
		"prefix": "RAND_pseudo_bytes",
		"body": ["RAND_pseudo_bytes(${1:num})"]},
	"RAND_status from the ssl module": {
		"description": "RAND_status from the ssl module",
		"prefix": "RAND_status",
		"body": ["RAND_status(${1:})"]},
	"SERVER_AUTH from the ssl module": {
		"description": "SERVER_AUTH from the ssl module",
		"prefix": "SERVER_AUTH",
		"body": ["SERVER_AUTH"]},
	"SSLContext from the ssl module": {
		"description": "SSLContext from the ssl module",
		"prefix": "SSLContext",
		"body": ["SSLContext(${1:protocol})"]},
	"SSLEOFError from the ssl module": {
		"description": "SSLEOFError from the ssl module",
		"prefix": "SSLEOFError",
		"body": ["SSLEOFError"]},
	"SSLError from the ssl module": {
		"description": "SSLError from the ssl module",
		"prefix": "SSLError",
		"body": ["SSLError"]},
	"SSLObject from the ssl module": {
		"description": "SSLObject from the ssl module",
		"prefix": "SSLObject",
		"body": ["SSLObject"]},
	"SSLSocket from the ssl module": {
		"description": "SSLSocket from the ssl module",
		"prefix": "SSLSocket",
		"body": ["SSLSocket(${1:socket.socket})"]},
	"SSLSyscallError from the ssl module": {
		"description": "SSLSyscallError from the ssl module",
		"prefix": "SSLSyscallError",
		"body": ["SSLSyscallError"]},
	"SSLWantReadError from the ssl module": {
		"description": "SSLWantReadError from the ssl module",
		"prefix": "SSLWantReadError",
		"body": ["SSLWantReadError"]},
	"SSLWantWriteError from the ssl module": {
		"description": "SSLWantWriteError from the ssl module",
		"prefix": "SSLWantWriteError",
		"body": ["SSLWantWriteError"]},
	"SSLZeroReturnError from the ssl module": {
		"description": "SSLZeroReturnError from the ssl module",
		"prefix": "SSLZeroReturnError",
		"body": ["SSLZeroReturnError"]},
	"VERIFY_CRL_CHECK_CHAIN from the ssl module": {
		"description": "VERIFY_CRL_CHECK_CHAIN from the ssl module",
		"prefix": "VERIFY_CRL_CHECK_CHAIN",
		"body": ["VERIFY_CRL_CHECK_CHAIN"]},
	"VERIFY_CRL_CHECK_LEAF from the ssl module": {
		"description": "VERIFY_CRL_CHECK_LEAF from the ssl module",
		"prefix": "VERIFY_CRL_CHECK_LEAF",
		"body": ["VERIFY_CRL_CHECK_LEAF"]},
	"VERIFY_DEFAULT from the ssl module": {
		"description": "VERIFY_DEFAULT from the ssl module",
		"prefix": "VERIFY_DEFAULT",
		"body": ["VERIFY_DEFAULT"]},
	"VERIFY_X509_STRICT from the ssl module": {
		"description": "VERIFY_X509_STRICT from the ssl module",
		"prefix": "VERIFY_X509_STRICT",
		"body": ["VERIFY_X509_STRICT"]},
	"VERIFY_X509_TRUSTED_FIRST from the ssl module": {
		"description": "VERIFY_X509_TRUSTED_FIRST from the ssl module",
		"prefix": "VERIFY_X509_TRUSTED_FIRST",
		"body": ["VERIFY_X509_TRUSTED_FIRST"]},
	"cert_store_stats() from the ssl module": {
		"description": "cert_store_stats() from the ssl module",
		"prefix": "cert_store_stats",
		"body": ["cert_store_stats(${1:})"]},
	"cert_time_to_seconds() from the ssl module": {
		"description": "cert_time_to_seconds() from the ssl module",
		"prefix": "cert_time_to_seconds",
		"body": ["cert_time_to_seconds(${1:cert_time})"]},
	"check_hostname() from the ssl module": {
		"description": "check_hostname() from the ssl module",
		"prefix": "check_hostname",
		"body": ["check_hostname()"]},
	"cipher() from the ssl module": {
		"description": "cipher() from the ssl module",
		"prefix": "cipher",
		"body": ["cipher(${1:})"]},
	"compression() from the ssl module": {
		"description": "compression() from the ssl module",
		"prefix": "compression",
		"body": ["compression(${1:})"]},
	"context() from the ssl module": {
		"description": "context() from the ssl module",
		"prefix": "context",
		"body": ["context()"]},
	"create_default_context() from the ssl module": {
		"description": "create_default_context() from the ssl module",
		"prefix": "create_default_context",
		"body": ["create_default_context(${1:purpose=Purpose.SERVER_AUTH}, ${2:cafile=None}, ${3:capath=None}, ${4:cadata=None})"]},
	"do_handshake() from the ssl module": {
		"description": "do_handshake() from the ssl module",
		"prefix": "do_handshake",
		"body": ["do_handshake(${1:})"]},
	"enum_certificates() from the ssl module": {
		"description": "enum_certificates() from the ssl module",
		"prefix": "enum_certificates",
		"body": ["enum_certificates(${1:store_name})"]},
	"enum_crls() from the ssl module": {
		"description": "enum_crls() from the ssl module",
		"prefix": "enum_crls",
		"body": ["enum_crls(${1:store_name})"]},
	"get_ca_certs() from the ssl module": {
		"description": "get_ca_certs() from the ssl module",
		"prefix": "get_ca_certs",
		"body": ["get_ca_certs(${1:binary_form=False})"]},
	"get_channel_binding() from the ssl module": {
		"description": "get_channel_binding() from the ssl module",
		"prefix": "get_channel_binding",
		"body": ["get_channel_binding(${1:cb_type=\"tls-unique\"})"]},
	"get_default_verify_paths() from the ssl module": {
		"description": "get_default_verify_paths() from the ssl module",
		"prefix": "get_default_verify_paths",
		"body": ["get_default_verify_paths(${1:})"]},
	"get_server_certificate() from the ssl module": {
		"description": "get_server_certificate() from the ssl module",
		"prefix": "get_server_certificate",
		"body": ["get_server_certificate(${1:addr}, ${2:ssl_version=PROTOCOL_SSLv23}, ${3:ca_certs=None})"]},
	"getpeercert() from the ssl module": {
		"description": "getpeercert() from the ssl module",
		"prefix": "getpeercert",
		"body": ["getpeercert(${1:binary_form=False})"]},
	"load_cert_chain() from the ssl module": {
		"description": "load_cert_chain() from the ssl module",
		"prefix": "load_cert_chain",
		"body": ["load_cert_chain(${1:certfile}, ${2:keyfile=None}, ${3:password=None})"]},
	"load_default_certs() from the ssl module": {
		"description": "load_default_certs() from the ssl module",
		"prefix": "load_default_certs",
		"body": ["load_default_certs(${1:purpose=Purpose.SERVER_AUTH})"]},
	"load_dh_params() from the ssl module": {
		"description": "load_dh_params() from the ssl module",
		"prefix": "load_dh_params",
		"body": ["load_dh_params(${1:dhfile})"]},
	"load_verify_locations() from the ssl module": {
		"description": "load_verify_locations() from the ssl module",
		"prefix": "load_verify_locations",
		"body": ["load_verify_locations(${1:cafile=None}, ${2:capath=None}, ${3:cadata=None})"]},
	"match_hostname() from the ssl module": {
		"description": "match_hostname() from the ssl module",
		"prefix": "match_hostname",
		"body": ["match_hostname(${1:cert}, ${2:hostname})"]},
	"options() from the ssl module": {
		"description": "options() from the ssl module",
		"prefix": "options",
		"body": ["options()"]},
	"pending() from the ssl module": {
		"description": "pending() from the ssl module",
		"prefix": "pending",
		"body": ["pending(${1:})"]},
	"protocol() from the ssl module": {
		"description": "protocol() from the ssl module",
		"prefix": "protocol",
		"body": ["protocol()"]},
	"read() from the ssl module": {
		"description": "read() from the ssl module",
		"prefix": "read",
		"body": ["read(${1:len=0}, ${2:buffer=None})"]},
	"selected_alpn_protocol() from the ssl module": {
		"description": "selected_alpn_protocol() from the ssl module",
		"prefix": "selected_alpn_protocol",
		"body": ["selected_alpn_protocol(${1:})"]},
	"selected_npn_protocol() from the ssl module": {
		"description": "selected_npn_protocol() from the ssl module",
		"prefix": "selected_npn_protocol",
		"body": ["selected_npn_protocol(${1:})"]},
	"server_hostname() from the ssl module": {
		"description": "server_hostname() from the ssl module",
		"prefix": "server_hostname",
		"body": ["server_hostname()"]},
	"server_side() from the ssl module": {
		"description": "server_side() from the ssl module",
		"prefix": "server_side",
		"body": ["server_side()"]},
	"session_stats() from the ssl module": {
		"description": "session_stats() from the ssl module",
		"prefix": "session_stats",
		"body": ["session_stats(${1:})"]},
	"set_alpn_protocols() from the ssl module": {
		"description": "set_alpn_protocols() from the ssl module",
		"prefix": "set_alpn_protocols",
		"body": ["set_alpn_protocols(${1:protocols})"]},
	"set_ciphers() from the ssl module": {
		"description": "set_ciphers() from the ssl module",
		"prefix": "set_ciphers",
		"body": ["set_ciphers(${1:ciphers})"]},
	"set_default_verify_paths() from the ssl module": {
		"description": "set_default_verify_paths() from the ssl module",
		"prefix": "set_default_verify_paths",
		"body": ["set_default_verify_paths(${1:})"]},
	"set_ecdh_curve() from the ssl module": {
		"description": "set_ecdh_curve() from the ssl module",
		"prefix": "set_ecdh_curve",
		"body": ["set_ecdh_curve(${1:curve_name})"]},
	"set_npn_protocols() from the ssl module": {
		"description": "set_npn_protocols() from the ssl module",
		"prefix": "set_npn_protocols",
		"body": ["set_npn_protocols(${1:protocols})"]},
	"set_servername_callback() from the ssl module": {
		"description": "set_servername_callback() from the ssl module",
		"prefix": "set_servername_callback",
		"body": ["set_servername_callback(${1:server_name_callback})"]},
	"shared_ciphers() from the ssl module": {
		"description": "shared_ciphers() from the ssl module",
		"prefix": "shared_ciphers",
		"body": ["shared_ciphers(${1:})"]},
	"unwrap() from the ssl module": {
		"description": "unwrap() from the ssl module",
		"prefix": "unwrap",
		"body": ["unwrap(${1:})"]},
	"verify_flags() from the ssl module": {
		"description": "verify_flags() from the ssl module",
		"prefix": "verify_flags",
		"body": ["verify_flags()"]},
	"verify_mode() from the ssl module": {
		"description": "verify_mode() from the ssl module",
		"prefix": "verify_mode",
		"body": ["verify_mode()"]},
	"version() from the ssl module": {
		"description": "version() from the ssl module",
		"prefix": "version",
		"body": ["version(${1:})"]},
	"wrap_bio() from the ssl module": {
		"description": "wrap_bio() from the ssl module",
		"prefix": "wrap_bio",
		"body": ["wrap_bio(${1:incoming}, ${2:outgoing}, ${3:server_side=False}, ${4:server_hostname=None})"]},
	"wrap_socket() from the ssl module": {
		"description": "wrap_socket() from the ssl module",
		"prefix": "wrap_socket",
		"body": ["wrap_socket(${1:sock}, ${2:keyfile=None}, ${3:certfile=None}, ${4:server_side=False}, ${5:cert_reqs=CERT_NONE}, ${6:ssl_version={see docs}}, ${7:ca_certs=None}, ${8:do_handshake_on_connect=True}, ${9:suppress_ragged_eofs=True}, ${10:ciphers=None})"]},
	"wrap_socket() from the ssl module": {
		"description": "wrap_socket() from the ssl module",
		"prefix": "wrap_socket",
		"body": ["wrap_socket(${1:sock}, ${2:server_side=False}, ${3:do_handshake_on_connect=True}, ${4:suppress_ragged_eofs=True}, ${5:server_hostname=None})"]},
	"write() from the ssl module": {
		"description": "write() from the ssl module",
		"prefix": "write",
		"body": ["write(${1:buf})"]},
// stat completion
	"FILE_ATTRIBUTE_ARCHIVE from the stat module": {
		"description": "FILE_ATTRIBUTE_ARCHIVE from the stat module",
		"prefix": "FILE_ATTRIBUTE_ARCHIVE",
		"body": ["FILE_ATTRIBUTE_ARCHIVE"]},
	"FILE_ATTRIBUTE_COMPRESSED from the stat module": {
		"description": "FILE_ATTRIBUTE_COMPRESSED from the stat module",
		"prefix": "FILE_ATTRIBUTE_COMPRESSED",
		"body": ["FILE_ATTRIBUTE_COMPRESSED"]},
	"FILE_ATTRIBUTE_DEVICE from the stat module": {
		"description": "FILE_ATTRIBUTE_DEVICE from the stat module",
		"prefix": "FILE_ATTRIBUTE_DEVICE",
		"body": ["FILE_ATTRIBUTE_DEVICE"]},
	"FILE_ATTRIBUTE_DIRECTORY from the stat module": {
		"description": "FILE_ATTRIBUTE_DIRECTORY from the stat module",
		"prefix": "FILE_ATTRIBUTE_DIRECTORY",
		"body": ["FILE_ATTRIBUTE_DIRECTORY"]},
	"FILE_ATTRIBUTE_ENCRYPTED from the stat module": {
		"description": "FILE_ATTRIBUTE_ENCRYPTED from the stat module",
		"prefix": "FILE_ATTRIBUTE_ENCRYPTED",
		"body": ["FILE_ATTRIBUTE_ENCRYPTED"]},
	"FILE_ATTRIBUTE_HIDDEN from the stat module": {
		"description": "FILE_ATTRIBUTE_HIDDEN from the stat module",
		"prefix": "FILE_ATTRIBUTE_HIDDEN",
		"body": ["FILE_ATTRIBUTE_HIDDEN"]},
	"FILE_ATTRIBUTE_INTEGRITY_STREAM from the stat module": {
		"description": "FILE_ATTRIBUTE_INTEGRITY_STREAM from the stat module",
		"prefix": "FILE_ATTRIBUTE_INTEGRITY_STREAM",
		"body": ["FILE_ATTRIBUTE_INTEGRITY_STREAM"]},
	"FILE_ATTRIBUTE_NORMAL from the stat module": {
		"description": "FILE_ATTRIBUTE_NORMAL from the stat module",
		"prefix": "FILE_ATTRIBUTE_NORMAL",
		"body": ["FILE_ATTRIBUTE_NORMAL"]},
	"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED from the stat module": {
		"description": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED from the stat module",
		"prefix": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",
		"body": ["FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]},
	"FILE_ATTRIBUTE_NO_SCRUB_DATA from the stat module": {
		"description": "FILE_ATTRIBUTE_NO_SCRUB_DATA from the stat module",
		"prefix": "FILE_ATTRIBUTE_NO_SCRUB_DATA",
		"body": ["FILE_ATTRIBUTE_NO_SCRUB_DATA"]},
	"FILE_ATTRIBUTE_OFFLINE from the stat module": {
		"description": "FILE_ATTRIBUTE_OFFLINE from the stat module",
		"prefix": "FILE_ATTRIBUTE_OFFLINE",
		"body": ["FILE_ATTRIBUTE_OFFLINE"]},
	"FILE_ATTRIBUTE_READONLY from the stat module": {
		"description": "FILE_ATTRIBUTE_READONLY from the stat module",
		"prefix": "FILE_ATTRIBUTE_READONLY",
		"body": ["FILE_ATTRIBUTE_READONLY"]},
	"FILE_ATTRIBUTE_REPARSE_POINT from the stat module": {
		"description": "FILE_ATTRIBUTE_REPARSE_POINT from the stat module",
		"prefix": "FILE_ATTRIBUTE_REPARSE_POINT",
		"body": ["FILE_ATTRIBUTE_REPARSE_POINT"]},
	"FILE_ATTRIBUTE_SPARSE_FILE from the stat module": {
		"description": "FILE_ATTRIBUTE_SPARSE_FILE from the stat module",
		"prefix": "FILE_ATTRIBUTE_SPARSE_FILE",
		"body": ["FILE_ATTRIBUTE_SPARSE_FILE"]},
	"FILE_ATTRIBUTE_SYSTEM from the stat module": {
		"description": "FILE_ATTRIBUTE_SYSTEM from the stat module",
		"prefix": "FILE_ATTRIBUTE_SYSTEM",
		"body": ["FILE_ATTRIBUTE_SYSTEM"]},
	"FILE_ATTRIBUTE_TEMPORARY from the stat module": {
		"description": "FILE_ATTRIBUTE_TEMPORARY from the stat module",
		"prefix": "FILE_ATTRIBUTE_TEMPORARY",
		"body": ["FILE_ATTRIBUTE_TEMPORARY"]},
	"FILE_ATTRIBUTE_VIRTUAL from the stat module": {
		"description": "FILE_ATTRIBUTE_VIRTUAL from the stat module",
		"prefix": "FILE_ATTRIBUTE_VIRTUAL",
		"body": ["FILE_ATTRIBUTE_VIRTUAL"]},
	"SF_APPEND from the stat module": {
		"description": "SF_APPEND from the stat module",
		"prefix": "SF_APPEND",
		"body": ["SF_APPEND"]},
	"SF_ARCHIVED from the stat module": {
		"description": "SF_ARCHIVED from the stat module",
		"prefix": "SF_ARCHIVED",
		"body": ["SF_ARCHIVED"]},
	"SF_IMMUTABLE from the stat module": {
		"description": "SF_IMMUTABLE from the stat module",
		"prefix": "SF_IMMUTABLE",
		"body": ["SF_IMMUTABLE"]},
	"SF_NOUNLINK from the stat module": {
		"description": "SF_NOUNLINK from the stat module",
		"prefix": "SF_NOUNLINK",
		"body": ["SF_NOUNLINK"]},
	"SF_SNAPSHOT from the stat module": {
		"description": "SF_SNAPSHOT from the stat module",
		"prefix": "SF_SNAPSHOT",
		"body": ["SF_SNAPSHOT"]},
	"ST_ATIME from the stat module": {
		"description": "ST_ATIME from the stat module",
		"prefix": "ST_ATIME",
		"body": ["ST_ATIME"]},
	"ST_CTIME from the stat module": {
		"description": "ST_CTIME from the stat module",
		"prefix": "ST_CTIME",
		"body": ["ST_CTIME"]},
	"ST_DEV from the stat module": {
		"description": "ST_DEV from the stat module",
		"prefix": "ST_DEV",
		"body": ["ST_DEV"]},
	"ST_GID from the stat module": {
		"description": "ST_GID from the stat module",
		"prefix": "ST_GID",
		"body": ["ST_GID"]},
	"ST_INO from the stat module": {
		"description": "ST_INO from the stat module",
		"prefix": "ST_INO",
		"body": ["ST_INO"]},
	"ST_MODE from the stat module": {
		"description": "ST_MODE from the stat module",
		"prefix": "ST_MODE",
		"body": ["ST_MODE"]},
	"ST_MTIME from the stat module": {
		"description": "ST_MTIME from the stat module",
		"prefix": "ST_MTIME",
		"body": ["ST_MTIME"]},
	"ST_NLINK from the stat module": {
		"description": "ST_NLINK from the stat module",
		"prefix": "ST_NLINK",
		"body": ["ST_NLINK"]},
	"ST_SIZE from the stat module": {
		"description": "ST_SIZE from the stat module",
		"prefix": "ST_SIZE",
		"body": ["ST_SIZE"]},
	"ST_UID from the stat module": {
		"description": "ST_UID from the stat module",
		"prefix": "ST_UID",
		"body": ["ST_UID"]},
	"S_ENFMT from the stat module": {
		"description": "S_ENFMT from the stat module",
		"prefix": "S_ENFMT",
		"body": ["S_ENFMT"]},
	"S_IEXEC from the stat module": {
		"description": "S_IEXEC from the stat module",
		"prefix": "S_IEXEC",
		"body": ["S_IEXEC"]},
	"S_IFBLK from the stat module": {
		"description": "S_IFBLK from the stat module",
		"prefix": "S_IFBLK",
		"body": ["S_IFBLK"]},
	"S_IFCHR from the stat module": {
		"description": "S_IFCHR from the stat module",
		"prefix": "S_IFCHR",
		"body": ["S_IFCHR"]},
	"S_IFDIR from the stat module": {
		"description": "S_IFDIR from the stat module",
		"prefix": "S_IFDIR",
		"body": ["S_IFDIR"]},
	"S_IFDOOR from the stat module": {
		"description": "S_IFDOOR from the stat module",
		"prefix": "S_IFDOOR",
		"body": ["S_IFDOOR"]},
	"S_IFIFO from the stat module": {
		"description": "S_IFIFO from the stat module",
		"prefix": "S_IFIFO",
		"body": ["S_IFIFO"]},
	"S_IFLNK from the stat module": {
		"description": "S_IFLNK from the stat module",
		"prefix": "S_IFLNK",
		"body": ["S_IFLNK"]},
	"S_IFMT from the stat module": {
		"description": "S_IFMT from the stat module",
		"prefix": "S_IFMT",
		"body": ["S_IFMT(${1:mode})"]},
	"S_IFPORT from the stat module": {
		"description": "S_IFPORT from the stat module",
		"prefix": "S_IFPORT",
		"body": ["S_IFPORT"]},
	"S_IFREG from the stat module": {
		"description": "S_IFREG from the stat module",
		"prefix": "S_IFREG",
		"body": ["S_IFREG"]},
	"S_IFSOCK from the stat module": {
		"description": "S_IFSOCK from the stat module",
		"prefix": "S_IFSOCK",
		"body": ["S_IFSOCK"]},
	"S_IFWHT from the stat module": {
		"description": "S_IFWHT from the stat module",
		"prefix": "S_IFWHT",
		"body": ["S_IFWHT"]},
	"S_IMODE from the stat module": {
		"description": "S_IMODE from the stat module",
		"prefix": "S_IMODE",
		"body": ["S_IMODE(${1:mode})"]},
	"S_IREAD from the stat module": {
		"description": "S_IREAD from the stat module",
		"prefix": "S_IREAD",
		"body": ["S_IREAD"]},
	"S_IRGRP from the stat module": {
		"description": "S_IRGRP from the stat module",
		"prefix": "S_IRGRP",
		"body": ["S_IRGRP"]},
	"S_IROTH from the stat module": {
		"description": "S_IROTH from the stat module",
		"prefix": "S_IROTH",
		"body": ["S_IROTH"]},
	"S_IRUSR from the stat module": {
		"description": "S_IRUSR from the stat module",
		"prefix": "S_IRUSR",
		"body": ["S_IRUSR"]},
	"S_IRWXG from the stat module": {
		"description": "S_IRWXG from the stat module",
		"prefix": "S_IRWXG",
		"body": ["S_IRWXG"]},
	"S_IRWXO from the stat module": {
		"description": "S_IRWXO from the stat module",
		"prefix": "S_IRWXO",
		"body": ["S_IRWXO"]},
	"S_IRWXU from the stat module": {
		"description": "S_IRWXU from the stat module",
		"prefix": "S_IRWXU",
		"body": ["S_IRWXU"]},
	"S_ISBLK from the stat module": {
		"description": "S_ISBLK from the stat module",
		"prefix": "S_ISBLK",
		"body": ["S_ISBLK(${1:mode})"]},
	"S_ISCHR from the stat module": {
		"description": "S_ISCHR from the stat module",
		"prefix": "S_ISCHR",
		"body": ["S_ISCHR(${1:mode})"]},
	"S_ISDIR from the stat module": {
		"description": "S_ISDIR from the stat module",
		"prefix": "S_ISDIR",
		"body": ["S_ISDIR(${1:mode})"]},
	"S_ISDOOR from the stat module": {
		"description": "S_ISDOOR from the stat module",
		"prefix": "S_ISDOOR",
		"body": ["S_ISDOOR(${1:mode})"]},
	"S_ISFIFO from the stat module": {
		"description": "S_ISFIFO from the stat module",
		"prefix": "S_ISFIFO",
		"body": ["S_ISFIFO(${1:mode})"]},
	"S_ISGID from the stat module": {
		"description": "S_ISGID from the stat module",
		"prefix": "S_ISGID",
		"body": ["S_ISGID"]},
	"S_ISLNK from the stat module": {
		"description": "S_ISLNK from the stat module",
		"prefix": "S_ISLNK",
		"body": ["S_ISLNK(${1:mode})"]},
	"S_ISPORT from the stat module": {
		"description": "S_ISPORT from the stat module",
		"prefix": "S_ISPORT",
		"body": ["S_ISPORT(${1:mode})"]},
	"S_ISREG from the stat module": {
		"description": "S_ISREG from the stat module",
		"prefix": "S_ISREG",
		"body": ["S_ISREG(${1:mode})"]},
	"S_ISSOCK from the stat module": {
		"description": "S_ISSOCK from the stat module",
		"prefix": "S_ISSOCK",
		"body": ["S_ISSOCK(${1:mode})"]},
	"S_ISUID from the stat module": {
		"description": "S_ISUID from the stat module",
		"prefix": "S_ISUID",
		"body": ["S_ISUID"]},
	"S_ISVTX from the stat module": {
		"description": "S_ISVTX from the stat module",
		"prefix": "S_ISVTX",
		"body": ["S_ISVTX"]},
	"S_ISWHT from the stat module": {
		"description": "S_ISWHT from the stat module",
		"prefix": "S_ISWHT",
		"body": ["S_ISWHT(${1:mode})"]},
	"S_IWGRP from the stat module": {
		"description": "S_IWGRP from the stat module",
		"prefix": "S_IWGRP",
		"body": ["S_IWGRP"]},
	"S_IWOTH from the stat module": {
		"description": "S_IWOTH from the stat module",
		"prefix": "S_IWOTH",
		"body": ["S_IWOTH"]},
	"S_IWRITE from the stat module": {
		"description": "S_IWRITE from the stat module",
		"prefix": "S_IWRITE",
		"body": ["S_IWRITE"]},
	"S_IWUSR from the stat module": {
		"description": "S_IWUSR from the stat module",
		"prefix": "S_IWUSR",
		"body": ["S_IWUSR"]},
	"S_IXGRP from the stat module": {
		"description": "S_IXGRP from the stat module",
		"prefix": "S_IXGRP",
		"body": ["S_IXGRP"]},
	"S_IXOTH from the stat module": {
		"description": "S_IXOTH from the stat module",
		"prefix": "S_IXOTH",
		"body": ["S_IXOTH"]},
	"S_IXUSR from the stat module": {
		"description": "S_IXUSR from the stat module",
		"prefix": "S_IXUSR",
		"body": ["S_IXUSR"]},
	"UF_APPEND from the stat module": {
		"description": "UF_APPEND from the stat module",
		"prefix": "UF_APPEND",
		"body": ["UF_APPEND"]},
	"UF_COMPRESSED from the stat module": {
		"description": "UF_COMPRESSED from the stat module",
		"prefix": "UF_COMPRESSED",
		"body": ["UF_COMPRESSED"]},
	"UF_HIDDEN from the stat module": {
		"description": "UF_HIDDEN from the stat module",
		"prefix": "UF_HIDDEN",
		"body": ["UF_HIDDEN"]},
	"UF_IMMUTABLE from the stat module": {
		"description": "UF_IMMUTABLE from the stat module",
		"prefix": "UF_IMMUTABLE",
		"body": ["UF_IMMUTABLE"]},
	"UF_NODUMP from the stat module": {
		"description": "UF_NODUMP from the stat module",
		"prefix": "UF_NODUMP",
		"body": ["UF_NODUMP"]},
	"UF_NOUNLINK from the stat module": {
		"description": "UF_NOUNLINK from the stat module",
		"prefix": "UF_NOUNLINK",
		"body": ["UF_NOUNLINK"]},
	"UF_OPAQUE from the stat module": {
		"description": "UF_OPAQUE from the stat module",
		"prefix": "UF_OPAQUE",
		"body": ["UF_OPAQUE"]},
	"filemode() from the stat module": {
		"description": "filemode() from the stat module",
		"prefix": "filemode",
		"body": ["filemode(${1:mode})"]},
// statistics completion
	"StatisticsError from the statistics module": {
		"description": "StatisticsError from the statistics module",
		"prefix": "StatisticsError",
		"body": ["StatisticsError"]},
	"mean() from the statistics module": {
		"description": "mean() from the statistics module",
		"prefix": "mean",
		"body": ["mean(${1:data})"]},
	"median() from the statistics module": {
		"description": "median() from the statistics module",
		"prefix": "median",
		"body": ["median(${1:data})"]},
	"median_grouped() from the statistics module": {
		"description": "median_grouped() from the statistics module",
		"prefix": "median_grouped",
		"body": ["median_grouped(${1:data}, ${2:interval=1})"]},
	"median_high() from the statistics module": {
		"description": "median_high() from the statistics module",
		"prefix": "median_high",
		"body": ["median_high(${1:data})"]},
	"median_low() from the statistics module": {
		"description": "median_low() from the statistics module",
		"prefix": "median_low",
		"body": ["median_low(${1:data})"]},
	"mode() from the statistics module": {
		"description": "mode() from the statistics module",
		"prefix": "mode",
		"body": ["mode(${1:data})"]},
	"pstdev() from the statistics module": {
		"description": "pstdev() from the statistics module",
		"prefix": "pstdev",
		"body": ["pstdev(${1:data}, ${2:mu=None})"]},
	"pvariance() from the statistics module": {
		"description": "pvariance() from the statistics module",
		"prefix": "pvariance",
		"body": ["pvariance(${1:data}, ${2:mu=None})"]},
	"stdev() from the statistics module": {
		"description": "stdev() from the statistics module",
		"prefix": "stdev",
		"body": ["stdev(${1:data}, ${2:xbar=None})"]},
	"variance() from the statistics module": {
		"description": "variance() from the statistics module",
		"prefix": "variance",
		"body": ["variance(${1:data,})"]},
// string completion
	"Formatter from the string module": {
		"description": "Formatter from the string module",
		"prefix": "Formatter",
		"body": ["Formatter"]},
	"Template from the string module": {
		"description": "Template from the string module",
		"prefix": "Template",
		"body": ["Template(${1:template})"]},
	"ascii_letters() from the string module": {
		"description": "ascii_letters() from the string module",
		"prefix": "ascii_letters",
		"body": ["ascii_letters()"]},
	"ascii_lowercase() from the string module": {
		"description": "ascii_lowercase() from the string module",
		"prefix": "ascii_lowercase",
		"body": ["ascii_lowercase()"]},
	"ascii_uppercase() from the string module": {
		"description": "ascii_uppercase() from the string module",
		"prefix": "ascii_uppercase",
		"body": ["ascii_uppercase()"]},
	"capwords() from the string module": {
		"description": "capwords() from the string module",
		"prefix": "capwords",
		"body": ["capwords(${1:s}, ${2:sep=None})"]},
	"digits() from the string module": {
		"description": "digits() from the string module",
		"prefix": "digits",
		"body": ["digits()"]},
	"hexdigits() from the string module": {
		"description": "hexdigits() from the string module",
		"prefix": "hexdigits",
		"body": ["hexdigits()"]},
	"octdigits() from the string module": {
		"description": "octdigits() from the string module",
		"prefix": "octdigits",
		"body": ["octdigits()"]},
	"printable() from the string module": {
		"description": "printable() from the string module",
		"prefix": "printable",
		"body": ["printable()"]},
	"punctuation() from the string module": {
		"description": "punctuation() from the string module",
		"prefix": "punctuation",
		"body": ["punctuation()"]},
	"whitespace() from the string module": {
		"description": "whitespace() from the string module",
		"prefix": "whitespace",
		"body": ["whitespace()"]},
// stringprep completion
	"in_table_a1() from the stringprep module": {
		"description": "in_table_a1() from the stringprep module",
		"prefix": "in_table_a1",
		"body": ["in_table_a1(${1:code})"]},
	"in_table_b1() from the stringprep module": {
		"description": "in_table_b1() from the stringprep module",
		"prefix": "in_table_b1",
		"body": ["in_table_b1(${1:code})"]},
	"in_table_c11() from the stringprep module": {
		"description": "in_table_c11() from the stringprep module",
		"prefix": "in_table_c11",
		"body": ["in_table_c11(${1:code})"]},
	"in_table_c11_c12() from the stringprep module": {
		"description": "in_table_c11_c12() from the stringprep module",
		"prefix": "in_table_c11_c12",
		"body": ["in_table_c11_c12(${1:code})"]},
	"in_table_c12() from the stringprep module": {
		"description": "in_table_c12() from the stringprep module",
		"prefix": "in_table_c12",
		"body": ["in_table_c12(${1:code})"]},
	"in_table_c21() from the stringprep module": {
		"description": "in_table_c21() from the stringprep module",
		"prefix": "in_table_c21",
		"body": ["in_table_c21(${1:code})"]},
	"in_table_c21_c22() from the stringprep module": {
		"description": "in_table_c21_c22() from the stringprep module",
		"prefix": "in_table_c21_c22",
		"body": ["in_table_c21_c22(${1:code})"]},
	"in_table_c22() from the stringprep module": {
		"description": "in_table_c22() from the stringprep module",
		"prefix": "in_table_c22",
		"body": ["in_table_c22(${1:code})"]},
	"in_table_c3() from the stringprep module": {
		"description": "in_table_c3() from the stringprep module",
		"prefix": "in_table_c3",
		"body": ["in_table_c3(${1:code})"]},
	"in_table_c4() from the stringprep module": {
		"description": "in_table_c4() from the stringprep module",
		"prefix": "in_table_c4",
		"body": ["in_table_c4(${1:code})"]},
	"in_table_c5() from the stringprep module": {
		"description": "in_table_c5() from the stringprep module",
		"prefix": "in_table_c5",
		"body": ["in_table_c5(${1:code})"]},
	"in_table_c6() from the stringprep module": {
		"description": "in_table_c6() from the stringprep module",
		"prefix": "in_table_c6",
		"body": ["in_table_c6(${1:code})"]},
	"in_table_c7() from the stringprep module": {
		"description": "in_table_c7() from the stringprep module",
		"prefix": "in_table_c7",
		"body": ["in_table_c7(${1:code})"]},
	"in_table_c8() from the stringprep module": {
		"description": "in_table_c8() from the stringprep module",
		"prefix": "in_table_c8",
		"body": ["in_table_c8(${1:code})"]},
	"in_table_c9() from the stringprep module": {
		"description": "in_table_c9() from the stringprep module",
		"prefix": "in_table_c9",
		"body": ["in_table_c9(${1:code})"]},
	"in_table_d1() from the stringprep module": {
		"description": "in_table_d1() from the stringprep module",
		"prefix": "in_table_d1",
		"body": ["in_table_d1(${1:code})"]},
	"in_table_d2() from the stringprep module": {
		"description": "in_table_d2() from the stringprep module",
		"prefix": "in_table_d2",
		"body": ["in_table_d2(${1:code})"]},
	"map_table_b2() from the stringprep module": {
		"description": "map_table_b2() from the stringprep module",
		"prefix": "map_table_b2",
		"body": ["map_table_b2(${1:code})"]},
	"map_table_b3() from the stringprep module": {
		"description": "map_table_b3() from the stringprep module",
		"prefix": "map_table_b3",
		"body": ["map_table_b3(${1:code})"]},
// struct completion
	"Struct from the struct module": {
		"description": "Struct from the struct module",
		"prefix": "Struct",
		"body": ["Struct(${1:format})"]},
	"calcsize() from the struct module": {
		"description": "calcsize() from the struct module",
		"prefix": "calcsize",
		"body": ["calcsize(${1:fmt})"]},
	"error() from the struct module": {
		"description": "error() from the struct module",
		"prefix": "error",
		"body": ["error()"]},
	"iter_unpack() from the struct module": {
		"description": "iter_unpack() from the struct module",
		"prefix": "iter_unpack",
		"body": ["iter_unpack(${1:fmt}, ${2:buffer})"]},
	"pack() from the struct module": {
		"description": "pack() from the struct module",
		"prefix": "pack",
		"body": ["pack(${1:fmt}, ${2:v1}, ${3:v2}, ${4:...})"]},
	"pack_into() from the struct module": {
		"description": "pack_into() from the struct module",
		"prefix": "pack_into",
		"body": ["pack_into(${1:fmt}, ${2:buffer}, ${3:offset}, ${4:v1}, ${5:v2}, ${6:...})"]},
	"unpack() from the struct module": {
		"description": "unpack() from the struct module",
		"prefix": "unpack",
		"body": ["unpack(${1:fmt}, ${2:buffer})"]},
	"unpack_from() from the struct module": {
		"description": "unpack_from() from the struct module",
		"prefix": "unpack_from",
		"body": ["unpack_from(${1:fmt,})"]},
// subprocess completion
	"CREATE_NEW_CONSOLE from the subprocess module": {
		"description": "CREATE_NEW_CONSOLE from the subprocess module",
		"prefix": "CREATE_NEW_CONSOLE",
		"body": ["CREATE_NEW_CONSOLE"]},
	"CREATE_NEW_PROCESS_GROUP from the subprocess module": {
		"description": "CREATE_NEW_PROCESS_GROUP from the subprocess module",
		"prefix": "CREATE_NEW_PROCESS_GROUP",
		"body": ["CREATE_NEW_PROCESS_GROUP"]},
	"CalledProcessError from the subprocess module": {
		"description": "CalledProcessError from the subprocess module",
		"prefix": "CalledProcessError",
		"body": ["CalledProcessError"]},
	"CompletedProcess from the subprocess module": {
		"description": "CompletedProcess from the subprocess module",
		"prefix": "CompletedProcess",
		"body": ["CompletedProcess"]},
	"DEVNULL from the subprocess module": {
		"description": "DEVNULL from the subprocess module",
		"prefix": "DEVNULL",
		"body": ["DEVNULL"]},
	"PIPE from the subprocess module": {
		"description": "PIPE from the subprocess module",
		"prefix": "PIPE",
		"body": ["PIPE"]},
	"Popen from the subprocess module": {
		"description": "Popen from the subprocess module",
		"prefix": "Popen",
		"body": ["Popen(${1:args}, ${2:bufsize=-1}, ${3:executable=None}, ${4:stdin=None}, ${5:stdout=None}, ${6:stderr=None}, ${7:preexec_fn=None}, ${8:close_fds=True}, ${9:shell=False}, ${10:cwd=None}, ${11:env=None}, ${12:universal_newlines=False}, ${13:startupinfo=None}, ${14:creationflags=0}, ${15:restore_signals=True}, ${16:start_new_session=False}, ${17:pass_fds=}, ${18:})"]},
	"STARTF_USESHOWWINDOW from the subprocess module": {
		"description": "STARTF_USESHOWWINDOW from the subprocess module",
		"prefix": "STARTF_USESHOWWINDOW",
		"body": ["STARTF_USESHOWWINDOW"]},
	"STARTF_USESTDHANDLES from the subprocess module": {
		"description": "STARTF_USESTDHANDLES from the subprocess module",
		"prefix": "STARTF_USESTDHANDLES",
		"body": ["STARTF_USESTDHANDLES"]},
	"STARTUPINFO from the subprocess module": {
		"description": "STARTUPINFO from the subprocess module",
		"prefix": "STARTUPINFO",
		"body": ["STARTUPINFO"]},
	"STDOUT from the subprocess module": {
		"description": "STDOUT from the subprocess module",
		"prefix": "STDOUT",
		"body": ["STDOUT"]},
	"STD_ERROR_HANDLE from the subprocess module": {
		"description": "STD_ERROR_HANDLE from the subprocess module",
		"prefix": "STD_ERROR_HANDLE",
		"body": ["STD_ERROR_HANDLE"]},
	"STD_INPUT_HANDLE from the subprocess module": {
		"description": "STD_INPUT_HANDLE from the subprocess module",
		"prefix": "STD_INPUT_HANDLE",
		"body": ["STD_INPUT_HANDLE"]},
	"STD_OUTPUT_HANDLE from the subprocess module": {
		"description": "STD_OUTPUT_HANDLE from the subprocess module",
		"prefix": "STD_OUTPUT_HANDLE",
		"body": ["STD_OUTPUT_HANDLE"]},
	"SW_HIDE from the subprocess module": {
		"description": "SW_HIDE from the subprocess module",
		"prefix": "SW_HIDE",
		"body": ["SW_HIDE"]},
	"SubprocessError from the subprocess module": {
		"description": "SubprocessError from the subprocess module",
		"prefix": "SubprocessError",
		"body": ["SubprocessError"]},
	"TimeoutExpired from the subprocess module": {
		"description": "TimeoutExpired from the subprocess module",
		"prefix": "TimeoutExpired",
		"body": ["TimeoutExpired"]},
	"args() from the subprocess module": {
		"description": "args() from the subprocess module",
		"prefix": "args",
		"body": ["args()"]},
	"call() from the subprocess module": {
		"description": "call() from the subprocess module",
		"prefix": "call",
		"body": ["call(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stdout=None}, ${5:stderr=None}, ${6:shell=False}, ${7:timeout=None})"]},
	"check_call() from the subprocess module": {
		"description": "check_call() from the subprocess module",
		"prefix": "check_call",
		"body": ["check_call(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stdout=None}, ${5:stderr=None}, ${6:shell=False}, ${7:timeout=None})"]},
	"check_output() from the subprocess module": {
		"description": "check_output() from the subprocess module",
		"prefix": "check_output",
		"body": ["check_output(${1:args}, ${2:*}, ${3:stdin=None}, ${4:stderr=None}, ${5:shell=False}, ${6:universal_newlines=False}, ${7:timeout=None})"]},
	"communicate() from the subprocess module": {
		"description": "communicate() from the subprocess module",
		"prefix": "communicate",
		"body": ["communicate(${1:input=None}, ${2:timeout=None})"]},
	"getoutput() from the subprocess module": {
		"description": "getoutput() from the subprocess module",
		"prefix": "getoutput",
		"body": ["getoutput(${1:cmd})"]},
	"getstatusoutput() from the subprocess module": {
		"description": "getstatusoutput() from the subprocess module",
		"prefix": "getstatusoutput",
		"body": ["getstatusoutput(${1:cmd})"]},
	"kill() from the subprocess module": {
		"description": "kill() from the subprocess module",
		"prefix": "kill",
		"body": ["kill(${1:})"]},
	"pid() from the subprocess module": {
		"description": "pid() from the subprocess module",
		"prefix": "pid",
		"body": ["pid()"]},
	"poll() from the subprocess module": {
		"description": "poll() from the subprocess module",
		"prefix": "poll",
		"body": ["poll(${1:})"]},
	"returncode() from the subprocess module": {
		"description": "returncode() from the subprocess module",
		"prefix": "returncode",
		"body": ["returncode()"]},
	"run() from the subprocess module": {
		"description": "run() from the subprocess module",
		"prefix": "run",
		"body": ["run(${1:args}, ${2:*}, ${3:stdin=None}, ${4:input=None}, ${5:stdout=None}, ${6:stderr=None}, ${7:shell=False}, ${8:timeout=None}, ${9:check=False})"]},
	"send_signal() from the subprocess module": {
		"description": "send_signal() from the subprocess module",
		"prefix": "send_signal",
		"body": ["send_signal(${1:signal})"]},
	"stderr() from the subprocess module": {
		"description": "stderr() from the subprocess module",
		"prefix": "stderr",
		"body": ["stderr()"]},
	"stdin() from the subprocess module": {
		"description": "stdin() from the subprocess module",
		"prefix": "stdin",
		"body": ["stdin()"]},
	"stdout() from the subprocess module": {
		"description": "stdout() from the subprocess module",
		"prefix": "stdout",
		"body": ["stdout()"]},
	"terminate() from the subprocess module": {
		"description": "terminate() from the subprocess module",
		"prefix": "terminate",
		"body": ["terminate(${1:})"]},
	"wait() from the subprocess module": {
		"description": "wait() from the subprocess module",
		"prefix": "wait",
		"body": ["wait(${1:timeout=None})"]},
// sunau completion
	"AUDIO_FILE_ENCODING_ADPCM_G721 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_ADPCM_G721 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_ADPCM_G721",
		"body": ["AUDIO_FILE_ENCODING_ADPCM_G721"]},
	"AUDIO_FILE_ENCODING_ADPCM_G722 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_ADPCM_G722 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_ADPCM_G722",
		"body": ["AUDIO_FILE_ENCODING_ADPCM_G722"]},
	"AUDIO_FILE_ENCODING_ADPCM_G723_3 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_ADPCM_G723_3 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_ADPCM_G723_3",
		"body": ["AUDIO_FILE_ENCODING_ADPCM_G723_3"]},
	"AUDIO_FILE_ENCODING_ADPCM_G723_5 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_ADPCM_G723_5 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_ADPCM_G723_5",
		"body": ["AUDIO_FILE_ENCODING_ADPCM_G723_5"]},
	"AUDIO_FILE_ENCODING_ALAW_8 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_ALAW_8 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_ALAW_8",
		"body": ["AUDIO_FILE_ENCODING_ALAW_8"]},
	"AUDIO_FILE_ENCODING_DOUBLE from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_DOUBLE from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_DOUBLE",
		"body": ["AUDIO_FILE_ENCODING_DOUBLE"]},
	"AUDIO_FILE_ENCODING_FLOAT from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_FLOAT from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_FLOAT",
		"body": ["AUDIO_FILE_ENCODING_FLOAT"]},
	"AUDIO_FILE_ENCODING_LINEAR_16 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_LINEAR_16 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_LINEAR_16",
		"body": ["AUDIO_FILE_ENCODING_LINEAR_16"]},
	"AUDIO_FILE_ENCODING_LINEAR_24 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_LINEAR_24 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_LINEAR_24",
		"body": ["AUDIO_FILE_ENCODING_LINEAR_24"]},
	"AUDIO_FILE_ENCODING_LINEAR_32 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_LINEAR_32 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_LINEAR_32",
		"body": ["AUDIO_FILE_ENCODING_LINEAR_32"]},
	"AUDIO_FILE_ENCODING_LINEAR_8 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_LINEAR_8 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_LINEAR_8",
		"body": ["AUDIO_FILE_ENCODING_LINEAR_8"]},
	"AUDIO_FILE_ENCODING_MULAW_8 from the sunau module": {
		"description": "AUDIO_FILE_ENCODING_MULAW_8 from the sunau module",
		"prefix": "AUDIO_FILE_ENCODING_MULAW_8",
		"body": ["AUDIO_FILE_ENCODING_MULAW_8"]},
	"AUDIO_FILE_MAGIC from the sunau module": {
		"description": "AUDIO_FILE_MAGIC from the sunau module",
		"prefix": "AUDIO_FILE_MAGIC",
		"body": ["AUDIO_FILE_MAGIC"]},
	"Error from the sunau module": {
		"description": "Error from the sunau module",
		"prefix": "Error",
		"body": ["Error"]},
	"close() from the sunau module": {
		"description": "close() from the sunau module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"getcompname() from the sunau module": {
		"description": "getcompname() from the sunau module",
		"prefix": "getcompname",
		"body": ["getcompname(${1:})"]},
	"getcomptype() from the sunau module": {
		"description": "getcomptype() from the sunau module",
		"prefix": "getcomptype",
		"body": ["getcomptype(${1:})"]},
	"getframerate() from the sunau module": {
		"description": "getframerate() from the sunau module",
		"prefix": "getframerate",
		"body": ["getframerate(${1:})"]},
	"getmark() from the sunau module": {
		"description": "getmark() from the sunau module",
		"prefix": "getmark",
		"body": ["getmark(${1:id})"]},
	"getmarkers() from the sunau module": {
		"description": "getmarkers() from the sunau module",
		"prefix": "getmarkers",
		"body": ["getmarkers(${1:})"]},
	"getnchannels() from the sunau module": {
		"description": "getnchannels() from the sunau module",
		"prefix": "getnchannels",
		"body": ["getnchannels(${1:})"]},
	"getnframes() from the sunau module": {
		"description": "getnframes() from the sunau module",
		"prefix": "getnframes",
		"body": ["getnframes(${1:})"]},
	"getparams() from the sunau module": {
		"description": "getparams() from the sunau module",
		"prefix": "getparams",
		"body": ["getparams(${1:})"]},
	"getsampwidth() from the sunau module": {
		"description": "getsampwidth() from the sunau module",
		"prefix": "getsampwidth",
		"body": ["getsampwidth(${1:})"]},
	"open() from the sunau module": {
		"description": "open() from the sunau module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:mode})"]},
	"openfp() from the sunau module": {
		"description": "openfp() from the sunau module",
		"prefix": "openfp",
		"body": ["openfp(${1:file}, ${2:mode})"]},
	"readframes() from the sunau module": {
		"description": "readframes() from the sunau module",
		"prefix": "readframes",
		"body": ["readframes(${1:n})"]},
	"rewind() from the sunau module": {
		"description": "rewind() from the sunau module",
		"prefix": "rewind",
		"body": ["rewind(${1:})"]},
	"setcomptype() from the sunau module": {
		"description": "setcomptype() from the sunau module",
		"prefix": "setcomptype",
		"body": ["setcomptype(${1:type}, ${2:name})"]},
	"setframerate() from the sunau module": {
		"description": "setframerate() from the sunau module",
		"prefix": "setframerate",
		"body": ["setframerate(${1:n})"]},
	"setnchannels() from the sunau module": {
		"description": "setnchannels() from the sunau module",
		"prefix": "setnchannels",
		"body": ["setnchannels(${1:n})"]},
	"setnframes() from the sunau module": {
		"description": "setnframes() from the sunau module",
		"prefix": "setnframes",
		"body": ["setnframes(${1:n})"]},
	"setparams() from the sunau module": {
		"description": "setparams() from the sunau module",
		"prefix": "setparams",
		"body": ["setparams(${1:tuple})"]},
	"setpos() from the sunau module": {
		"description": "setpos() from the sunau module",
		"prefix": "setpos",
		"body": ["setpos(${1:pos})"]},
	"setsampwidth() from the sunau module": {
		"description": "setsampwidth() from the sunau module",
		"prefix": "setsampwidth",
		"body": ["setsampwidth(${1:n})"]},
	"tell() from the sunau module": {
		"description": "tell() from the sunau module",
		"prefix": "tell",
		"body": ["tell(${1:})"]},
	"writeframes() from the sunau module": {
		"description": "writeframes() from the sunau module",
		"prefix": "writeframes",
		"body": ["writeframes(${1:data})"]},
	"writeframesraw() from the sunau module": {
		"description": "writeframesraw() from the sunau module",
		"prefix": "writeframesraw",
		"body": ["writeframesraw(${1:data})"]},
// symbol completion
	"sym_name() from the symbol module": {
		"description": "sym_name() from the symbol module",
		"prefix": "sym_name",
		"body": ["sym_name()"]},
// symtable completion
	"Class from the symtable module": {
		"description": "Class from the symtable module",
		"prefix": "Class",
		"body": ["Class"]},
	"Function from the symtable module": {
		"description": "Function from the symtable module",
		"prefix": "Function",
		"body": ["Function"]},
	"Symbol from the symtable module": {
		"description": "Symbol from the symtable module",
		"prefix": "Symbol",
		"body": ["Symbol"]},
	"SymbolTable from the symtable module": {
		"description": "SymbolTable from the symtable module",
		"prefix": "SymbolTable",
		"body": ["SymbolTable"]},
	"symtable() from the symtable module": {
		"description": "symtable() from the symtable module",
		"prefix": "symtable",
		"body": ["symtable(${1:code,})"]},
// sys completion
	"__displayhook__() from the sys module": {
		"description": "__displayhook__() from the sys module",
		"prefix": "__displayhook__",
		"body": ["__displayhook__()"]},
	"__excepthook__() from the sys module": {
		"description": "__excepthook__() from the sys module",
		"prefix": "__excepthook__",
		"body": ["__excepthook__()"]},
	"__interactivehook__() from the sys module": {
		"description": "__interactivehook__() from the sys module",
		"prefix": "__interactivehook__",
		"body": ["__interactivehook__()"]},
	"__stderr__() from the sys module": {
		"description": "__stderr__() from the sys module",
		"prefix": "__stderr__",
		"body": ["__stderr__()"]},
	"__stdin__() from the sys module": {
		"description": "__stdin__() from the sys module",
		"prefix": "__stdin__",
		"body": ["__stdin__()"]},
	"__stdout__() from the sys module": {
		"description": "__stdout__() from the sys module",
		"prefix": "__stdout__",
		"body": ["__stdout__()"]},
	"_clear_type_cache() from the sys module": {
		"description": "_clear_type_cache() from the sys module",
		"prefix": "_clear_type_cache",
		"body": ["_clear_type_cache(${1:})"]},
	"_current_frames() from the sys module": {
		"description": "_current_frames() from the sys module",
		"prefix": "_current_frames",
		"body": ["_current_frames(${1:})"]},
	"_debugmallocstats() from the sys module": {
		"description": "_debugmallocstats() from the sys module",
		"prefix": "_debugmallocstats",
		"body": ["_debugmallocstats(${1:})"]},
	"_getframe() from the sys module": {
		"description": "_getframe() from the sys module",
		"prefix": "_getframe",
		"body": ["_getframe(${1:[depth]})"]},
	"_xoptions() from the sys module": {
		"description": "_xoptions() from the sys module",
		"prefix": "_xoptions",
		"body": ["_xoptions()"]},
	"abiflags() from the sys module": {
		"description": "abiflags() from the sys module",
		"prefix": "abiflags",
		"body": ["abiflags()"]},
	"api_version() from the sys module": {
		"description": "api_version() from the sys module",
		"prefix": "api_version",
		"body": ["api_version()"]},
	"argv() from the sys module": {
		"description": "argv() from the sys module",
		"prefix": "argv",
		"body": ["argv()"]},
	"base_exec_prefix() from the sys module": {
		"description": "base_exec_prefix() from the sys module",
		"prefix": "base_exec_prefix",
		"body": ["base_exec_prefix()"]},
	"base_prefix() from the sys module": {
		"description": "base_prefix() from the sys module",
		"prefix": "base_prefix",
		"body": ["base_prefix()"]},
	"builtin_module_names() from the sys module": {
		"description": "builtin_module_names() from the sys module",
		"prefix": "builtin_module_names",
		"body": ["builtin_module_names()"]},
	"byteorder() from the sys module": {
		"description": "byteorder() from the sys module",
		"prefix": "byteorder",
		"body": ["byteorder()"]},
	"call_tracing() from the sys module": {
		"description": "call_tracing() from the sys module",
		"prefix": "call_tracing",
		"body": ["call_tracing(${1:func}, ${2:args})"]},
	"copyright() from the sys module": {
		"description": "copyright() from the sys module",
		"prefix": "copyright",
		"body": ["copyright()"]},
	"displayhook() from the sys module": {
		"description": "displayhook() from the sys module",
		"prefix": "displayhook",
		"body": ["displayhook(${1:value})"]},
	"dllhandle() from the sys module": {
		"description": "dllhandle() from the sys module",
		"prefix": "dllhandle",
		"body": ["dllhandle()"]},
	"dont_write_bytecode() from the sys module": {
		"description": "dont_write_bytecode() from the sys module",
		"prefix": "dont_write_bytecode",
		"body": ["dont_write_bytecode()"]},
	"exc_info() from the sys module": {
		"description": "exc_info() from the sys module",
		"prefix": "exc_info",
		"body": ["exc_info(${1:})"]},
	"excepthook() from the sys module": {
		"description": "excepthook() from the sys module",
		"prefix": "excepthook",
		"body": ["excepthook(${1:type}, ${2:value}, ${3:traceback})"]},
	"exec_prefix() from the sys module": {
		"description": "exec_prefix() from the sys module",
		"prefix": "exec_prefix",
		"body": ["exec_prefix()"]},
	"executable() from the sys module": {
		"description": "executable() from the sys module",
		"prefix": "executable",
		"body": ["executable()"]},
	"exit() from the sys module": {
		"description": "exit() from the sys module",
		"prefix": "exit",
		"body": ["exit(${1:[arg]})"]},
	"flags() from the sys module": {
		"description": "flags() from the sys module",
		"prefix": "flags",
		"body": ["flags()"]},
	"float_info() from the sys module": {
		"description": "float_info() from the sys module",
		"prefix": "float_info",
		"body": ["float_info()"]},
	"float_repr_style() from the sys module": {
		"description": "float_repr_style() from the sys module",
		"prefix": "float_repr_style",
		"body": ["float_repr_style()"]},
	"get_coroutine_wrapper() from the sys module": {
		"description": "get_coroutine_wrapper() from the sys module",
		"prefix": "get_coroutine_wrapper",
		"body": ["get_coroutine_wrapper(${1:})"]},
	"getallocatedblocks() from the sys module": {
		"description": "getallocatedblocks() from the sys module",
		"prefix": "getallocatedblocks",
		"body": ["getallocatedblocks(${1:})"]},
	"getcheckinterval() from the sys module": {
		"description": "getcheckinterval() from the sys module",
		"prefix": "getcheckinterval",
		"body": ["getcheckinterval(${1:})"]},
	"getdefaultencoding() from the sys module": {
		"description": "getdefaultencoding() from the sys module",
		"prefix": "getdefaultencoding",
		"body": ["getdefaultencoding(${1:})"]},
	"getdlopenflags() from the sys module": {
		"description": "getdlopenflags() from the sys module",
		"prefix": "getdlopenflags",
		"body": ["getdlopenflags(${1:})"]},
	"getfilesystemencoding() from the sys module": {
		"description": "getfilesystemencoding() from the sys module",
		"prefix": "getfilesystemencoding",
		"body": ["getfilesystemencoding(${1:})"]},
	"getprofile() from the sys module": {
		"description": "getprofile() from the sys module",
		"prefix": "getprofile",
		"body": ["getprofile(${1:})"]},
	"getrecursionlimit() from the sys module": {
		"description": "getrecursionlimit() from the sys module",
		"prefix": "getrecursionlimit",
		"body": ["getrecursionlimit(${1:})"]},
	"getrefcount() from the sys module": {
		"description": "getrefcount() from the sys module",
		"prefix": "getrefcount",
		"body": ["getrefcount(${1:object})"]},
	"getsizeof() from the sys module": {
		"description": "getsizeof() from the sys module",
		"prefix": "getsizeof",
		"body": ["getsizeof(${1:object[}, ${2:default]})"]},
	"getswitchinterval() from the sys module": {
		"description": "getswitchinterval() from the sys module",
		"prefix": "getswitchinterval",
		"body": ["getswitchinterval(${1:})"]},
	"gettrace() from the sys module": {
		"description": "gettrace() from the sys module",
		"prefix": "gettrace",
		"body": ["gettrace(${1:})"]},
	"getwindowsversion() from the sys module": {
		"description": "getwindowsversion() from the sys module",
		"prefix": "getwindowsversion",
		"body": ["getwindowsversion(${1:})"]},
	"hash_info() from the sys module": {
		"description": "hash_info() from the sys module",
		"prefix": "hash_info",
		"body": ["hash_info()"]},
	"hexversion() from the sys module": {
		"description": "hexversion() from the sys module",
		"prefix": "hexversion",
		"body": ["hexversion()"]},
	"implementation() from the sys module": {
		"description": "implementation() from the sys module",
		"prefix": "implementation",
		"body": ["implementation()"]},
	"int_info() from the sys module": {
		"description": "int_info() from the sys module",
		"prefix": "int_info",
		"body": ["int_info()"]},
	"intern() from the sys module": {
		"description": "intern() from the sys module",
		"prefix": "intern",
		"body": ["intern(${1:string})"]},
	"is_finalizing() from the sys module": {
		"description": "is_finalizing() from the sys module",
		"prefix": "is_finalizing",
		"body": ["is_finalizing(${1:})"]},
	"last_traceback() from the sys module": {
		"description": "last_traceback() from the sys module",
		"prefix": "last_traceback",
		"body": ["last_traceback()"]},
	"last_type() from the sys module": {
		"description": "last_type() from the sys module",
		"prefix": "last_type",
		"body": ["last_type()"]},
	"last_value() from the sys module": {
		"description": "last_value() from the sys module",
		"prefix": "last_value",
		"body": ["last_value()"]},
	"maxsize() from the sys module": {
		"description": "maxsize() from the sys module",
		"prefix": "maxsize",
		"body": ["maxsize()"]},
	"maxunicode() from the sys module": {
		"description": "maxunicode() from the sys module",
		"prefix": "maxunicode",
		"body": ["maxunicode()"]},
	"meta_path() from the sys module": {
		"description": "meta_path() from the sys module",
		"prefix": "meta_path",
		"body": ["meta_path()"]},
	"modules() from the sys module": {
		"description": "modules() from the sys module",
		"prefix": "modules",
		"body": ["modules()"]},
	"path() from the sys module": {
		"description": "path() from the sys module",
		"prefix": "path",
		"body": ["path()"]},
	"path_hooks() from the sys module": {
		"description": "path_hooks() from the sys module",
		"prefix": "path_hooks",
		"body": ["path_hooks()"]},
	"path_importer_cache() from the sys module": {
		"description": "path_importer_cache() from the sys module",
		"prefix": "path_importer_cache",
		"body": ["path_importer_cache()"]},
	"platform() from the sys module": {
		"description": "platform() from the sys module",
		"prefix": "platform",
		"body": ["platform()"]},
	"prefix() from the sys module": {
		"description": "prefix() from the sys module",
		"prefix": "prefix",
		"body": ["prefix()"]},
	"ps1() from the sys module": {
		"description": "ps1() from the sys module",
		"prefix": "ps1",
		"body": ["ps1()"]},
	"ps2() from the sys module": {
		"description": "ps2() from the sys module",
		"prefix": "ps2",
		"body": ["ps2()"]},
	"set_coroutine_wrapper() from the sys module": {
		"description": "set_coroutine_wrapper() from the sys module",
		"prefix": "set_coroutine_wrapper",
		"body": ["set_coroutine_wrapper(${1:wrapper})"]},
	"setcheckinterval() from the sys module": {
		"description": "setcheckinterval() from the sys module",
		"prefix": "setcheckinterval",
		"body": ["setcheckinterval(${1:interval})"]},
	"setdlopenflags() from the sys module": {
		"description": "setdlopenflags() from the sys module",
		"prefix": "setdlopenflags",
		"body": ["setdlopenflags(${1:n})"]},
	"setprofile() from the sys module": {
		"description": "setprofile() from the sys module",
		"prefix": "setprofile",
		"body": ["setprofile(${1:profilefunc})"]},
	"setrecursionlimit() from the sys module": {
		"description": "setrecursionlimit() from the sys module",
		"prefix": "setrecursionlimit",
		"body": ["setrecursionlimit(${1:limit})"]},
	"setswitchinterval() from the sys module": {
		"description": "setswitchinterval() from the sys module",
		"prefix": "setswitchinterval",
		"body": ["setswitchinterval(${1:interval})"]},
	"settrace() from the sys module": {
		"description": "settrace() from the sys module",
		"prefix": "settrace",
		"body": ["settrace(${1:tracefunc})"]},
	"settscdump() from the sys module": {
		"description": "settscdump() from the sys module",
		"prefix": "settscdump",
		"body": ["settscdump(${1:on_flag})"]},
	"stderr() from the sys module": {
		"description": "stderr() from the sys module",
		"prefix": "stderr",
		"body": ["stderr()"]},
	"stdin() from the sys module": {
		"description": "stdin() from the sys module",
		"prefix": "stdin",
		"body": ["stdin()"]},
	"stdout() from the sys module": {
		"description": "stdout() from the sys module",
		"prefix": "stdout",
		"body": ["stdout()"]},
	"thread_info() from the sys module": {
		"description": "thread_info() from the sys module",
		"prefix": "thread_info",
		"body": ["thread_info()"]},
	"tracebacklimit() from the sys module": {
		"description": "tracebacklimit() from the sys module",
		"prefix": "tracebacklimit",
		"body": ["tracebacklimit()"]},
	"version() from the sys module": {
		"description": "version() from the sys module",
		"prefix": "version",
		"body": ["version()"]},
	"version_info() from the sys module": {
		"description": "version_info() from the sys module",
		"prefix": "version_info",
		"body": ["version_info()"]},
	"warnoptions() from the sys module": {
		"description": "warnoptions() from the sys module",
		"prefix": "warnoptions",
		"body": ["warnoptions()"]},
	"winver() from the sys module": {
		"description": "winver() from the sys module",
		"prefix": "winver",
		"body": ["winver()"]},
// sysconfig completion
	"get_config_h_filename() from the sysconfig module": {
		"description": "get_config_h_filename() from the sysconfig module",
		"prefix": "get_config_h_filename",
		"body": ["get_config_h_filename(${1:})"]},
	"get_config_var() from the sysconfig module": {
		"description": "get_config_var() from the sysconfig module",
		"prefix": "get_config_var",
		"body": ["get_config_var(${1:name})"]},
	"get_config_vars() from the sysconfig module": {
		"description": "get_config_vars() from the sysconfig module",
		"prefix": "get_config_vars",
		"body": ["get_config_vars(${1:*args})"]},
	"get_makefile_filename() from the sysconfig module": {
		"description": "get_makefile_filename() from the sysconfig module",
		"prefix": "get_makefile_filename",
		"body": ["get_makefile_filename(${1:})"]},
	"get_path() from the sysconfig module": {
		"description": "get_path() from the sysconfig module",
		"prefix": "get_path",
		"body": ["get_path(${1:name[}, ${2:scheme[}, ${3:vars[}, ${4:expand]]]})"]},
	"get_path_names() from the sysconfig module": {
		"description": "get_path_names() from the sysconfig module",
		"prefix": "get_path_names",
		"body": ["get_path_names(${1:})"]},
	"get_paths() from the sysconfig module": {
		"description": "get_paths() from the sysconfig module",
		"prefix": "get_paths",
		"body": ["get_paths(${1:[scheme[}, ${2:vars[}, ${3:expand]]]})"]},
	"get_platform() from the sysconfig module": {
		"description": "get_platform() from the sysconfig module",
		"prefix": "get_platform",
		"body": ["get_platform(${1:})"]},
	"get_python_version() from the sysconfig module": {
		"description": "get_python_version() from the sysconfig module",
		"prefix": "get_python_version",
		"body": ["get_python_version(${1:})"]},
	"get_scheme_names() from the sysconfig module": {
		"description": "get_scheme_names() from the sysconfig module",
		"prefix": "get_scheme_names",
		"body": ["get_scheme_names(${1:})"]},
	"is_python_build() from the sysconfig module": {
		"description": "is_python_build() from the sysconfig module",
		"prefix": "is_python_build",
		"body": ["is_python_build(${1:})"]},
	"parse_config_h() from the sysconfig module": {
		"description": "parse_config_h() from the sysconfig module",
		"prefix": "parse_config_h",
		"body": ["parse_config_h(${1:fp[,})"]},
// syslog completion
	"closelog() from the syslog module": {
		"description": "closelog() from the syslog module",
		"prefix": "closelog",
		"body": ["closelog(${1:})"]},
	"openlog() from the syslog module": {
		"description": "openlog() from the syslog module",
		"prefix": "openlog",
		"body": ["openlog(${1:[ident[}, ${2:logoption[}, ${3:facility]]]})"]},
	"setlogmask() from the syslog module": {
		"description": "setlogmask() from the syslog module",
		"prefix": "setlogmask",
		"body": ["setlogmask(${1:maskpri})"]},
	"syslog() from the syslog module": {
		"description": "syslog() from the syslog module",
		"prefix": "syslog",
		"body": ["syslog(${1:message})"]},
	"syslog() from the syslog module": {
		"description": "syslog() from the syslog module",
		"prefix": "syslog",
		"body": ["syslog(${1:priority,})"]},
// tabnanny completion
	"NannyNag from the tabnanny module": {
		"description": "NannyNag from the tabnanny module",
		"prefix": "NannyNag",
		"body": ["NannyNag"]},
	"check() from the tabnanny module": {
		"description": "check() from the tabnanny module",
		"prefix": "check",
		"body": ["check(${1:file_or_dir})"]},
	"filename_only() from the tabnanny module": {
		"description": "filename_only() from the tabnanny module",
		"prefix": "filename_only",
		"body": ["filename_only()"]},
	"tokeneater() from the tabnanny module": {
		"description": "tokeneater() from the tabnanny module",
		"prefix": "tokeneater",
		"body": ["tokeneater(${1:type}, ${2:token}, ${3:start}, ${4:end}, ${5:line})"]},
	"verbose() from the tabnanny module": {
		"description": "verbose() from the tabnanny module",
		"prefix": "verbose",
		"body": ["verbose()"]},
// tarfile completion
	"CompressionError from the tarfile module": {
		"description": "CompressionError from the tarfile module",
		"prefix": "CompressionError",
		"body": ["CompressionError"]},
	"DEFAULT_FORMAT from the tarfile module": {
		"description": "DEFAULT_FORMAT from the tarfile module",
		"prefix": "DEFAULT_FORMAT",
		"body": ["DEFAULT_FORMAT"]},
	"ENCODING from the tarfile module": {
		"description": "ENCODING from the tarfile module",
		"prefix": "ENCODING",
		"body": ["ENCODING"]},
	"ExtractError from the tarfile module": {
		"description": "ExtractError from the tarfile module",
		"prefix": "ExtractError",
		"body": ["ExtractError"]},
	"GNU_FORMAT from the tarfile module": {
		"description": "GNU_FORMAT from the tarfile module",
		"prefix": "GNU_FORMAT",
		"body": ["GNU_FORMAT"]},
	"HeaderError from the tarfile module": {
		"description": "HeaderError from the tarfile module",
		"prefix": "HeaderError",
		"body": ["HeaderError"]},
	"PAX_FORMAT from the tarfile module": {
		"description": "PAX_FORMAT from the tarfile module",
		"prefix": "PAX_FORMAT",
		"body": ["PAX_FORMAT"]},
	"ReadError from the tarfile module": {
		"description": "ReadError from the tarfile module",
		"prefix": "ReadError",
		"body": ["ReadError"]},
	"StreamError from the tarfile module": {
		"description": "StreamError from the tarfile module",
		"prefix": "StreamError",
		"body": ["StreamError"]},
	"TarError from the tarfile module": {
		"description": "TarError from the tarfile module",
		"prefix": "TarError",
		"body": ["TarError"]},
	"TarFile from the tarfile module": {
		"description": "TarFile from the tarfile module",
		"prefix": "TarFile",
		"body": ["TarFile"]},
	"TarFile from the tarfile module": {
		"description": "TarFile from the tarfile module",
		"prefix": "TarFile",
		"body": ["TarFile(${1:name=None}, ${2:mode='r'}, ${3:fileobj=None}, ${4:format=DEFAULT_FORMAT}, ${5:tarinfo=TarInfo}, ${6:dereference=False}, ${7:ignore_zeros=False}, ${8:encoding=ENCODING}, ${9:errors='surrogateescape'}, ${10:pax_headers=None}, ${11:debug=0}, ${12:errorlevel=0})"]},
	"TarInfo from the tarfile module": {
		"description": "TarInfo from the tarfile module",
		"prefix": "TarInfo",
		"body": ["TarInfo(${1:name=\"\"})"]},
	"USTAR_FORMAT from the tarfile module": {
		"description": "USTAR_FORMAT from the tarfile module",
		"prefix": "USTAR_FORMAT",
		"body": ["USTAR_FORMAT"]},
	"add() from the tarfile module": {
		"description": "add() from the tarfile module",
		"prefix": "add",
		"body": ["add(${1:name}, ${2:arcname=None}, ${3:recursive=True}, ${4:exclude=None}, ${5:*}, ${6:filter=None})"]},
	"addfile() from the tarfile module": {
		"description": "addfile() from the tarfile module",
		"prefix": "addfile",
		"body": ["addfile(${1:tarinfo}, ${2:fileobj=None})"]},
	"close() from the tarfile module": {
		"description": "close() from the tarfile module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"extract() from the tarfile module": {
		"description": "extract() from the tarfile module",
		"prefix": "extract",
		"body": ["extract(${1:member}, ${2:path=\"\"}, ${3:set_attrs=True}, ${4:*}, ${5:numeric_owner=False})"]},
	"extractall() from the tarfile module": {
		"description": "extractall() from the tarfile module",
		"prefix": "extractall",
		"body": ["extractall(${1:path=\".\"}, ${2:members=None}, ${3:*}, ${4:numeric_owner=False})"]},
	"extractfile() from the tarfile module": {
		"description": "extractfile() from the tarfile module",
		"prefix": "extractfile",
		"body": ["extractfile(${1:member})"]},
	"frombuf() from the tarfile module": {
		"description": "frombuf() from the tarfile module",
		"prefix": "frombuf",
		"body": ["frombuf(${1:buf}, ${2:encoding}, ${3:errors})"]},
	"fromtarfile() from the tarfile module": {
		"description": "fromtarfile() from the tarfile module",
		"prefix": "fromtarfile",
		"body": ["fromtarfile(${1:tarfile})"]},
	"getmember() from the tarfile module": {
		"description": "getmember() from the tarfile module",
		"prefix": "getmember",
		"body": ["getmember(${1:name})"]},
	"getmembers() from the tarfile module": {
		"description": "getmembers() from the tarfile module",
		"prefix": "getmembers",
		"body": ["getmembers(${1:})"]},
	"getnames() from the tarfile module": {
		"description": "getnames() from the tarfile module",
		"prefix": "getnames",
		"body": ["getnames(${1:})"]},
	"gettarinfo() from the tarfile module": {
		"description": "gettarinfo() from the tarfile module",
		"prefix": "gettarinfo",
		"body": ["gettarinfo(${1:name=None}, ${2:arcname=None}, ${3:fileobj=None})"]},
	"gid() from the tarfile module": {
		"description": "gid() from the tarfile module",
		"prefix": "gid",
		"body": ["gid()"]},
	"gname() from the tarfile module": {
		"description": "gname() from the tarfile module",
		"prefix": "gname",
		"body": ["gname()"]},
	"is_tarfile() from the tarfile module": {
		"description": "is_tarfile() from the tarfile module",
		"prefix": "is_tarfile",
		"body": ["is_tarfile(${1:name})"]},
	"isblk() from the tarfile module": {
		"description": "isblk() from the tarfile module",
		"prefix": "isblk",
		"body": ["isblk(${1:})"]},
	"ischr() from the tarfile module": {
		"description": "ischr() from the tarfile module",
		"prefix": "ischr",
		"body": ["ischr(${1:})"]},
	"isdev() from the tarfile module": {
		"description": "isdev() from the tarfile module",
		"prefix": "isdev",
		"body": ["isdev(${1:})"]},
	"isdir() from the tarfile module": {
		"description": "isdir() from the tarfile module",
		"prefix": "isdir",
		"body": ["isdir(${1:})"]},
	"isfifo() from the tarfile module": {
		"description": "isfifo() from the tarfile module",
		"prefix": "isfifo",
		"body": ["isfifo(${1:})"]},
	"isfile() from the tarfile module": {
		"description": "isfile() from the tarfile module",
		"prefix": "isfile",
		"body": ["isfile(${1:})"]},
	"islnk() from the tarfile module": {
		"description": "islnk() from the tarfile module",
		"prefix": "islnk",
		"body": ["islnk(${1:})"]},
	"isreg() from the tarfile module": {
		"description": "isreg() from the tarfile module",
		"prefix": "isreg",
		"body": ["isreg(${1:})"]},
	"issym() from the tarfile module": {
		"description": "issym() from the tarfile module",
		"prefix": "issym",
		"body": ["issym(${1:})"]},
	"linkname() from the tarfile module": {
		"description": "linkname() from the tarfile module",
		"prefix": "linkname",
		"body": ["linkname()"]},
	"list() from the tarfile module": {
		"description": "list() from the tarfile module",
		"prefix": "list",
		"body": ["list(${1:verbose=True}, ${2:*}, ${3:members=None})"]},
	"mode() from the tarfile module": {
		"description": "mode() from the tarfile module",
		"prefix": "mode",
		"body": ["mode()"]},
	"mtime() from the tarfile module": {
		"description": "mtime() from the tarfile module",
		"prefix": "mtime",
		"body": ["mtime()"]},
	"name() from the tarfile module": {
		"description": "name() from the tarfile module",
		"prefix": "name",
		"body": ["name()"]},
	"next() from the tarfile module": {
		"description": "next() from the tarfile module",
		"prefix": "next",
		"body": ["next(${1:})"]},
	"open() from the tarfile module": {
		"description": "open() from the tarfile module",
		"prefix": "open",
		"body": ["open(${1:...})"]},
	"open() from the tarfile module": {
		"description": "open() from the tarfile module",
		"prefix": "open",
		"body": ["open(${1:name=None}, ${2:mode='r'}, ${3:fileobj=None}, ${4:bufsize=10240}, ${5:**kwargs})"]},
	"pax_headers() from the tarfile module": {
		"description": "pax_headers() from the tarfile module",
		"prefix": "pax_headers",
		"body": ["pax_headers()"]},
	"size() from the tarfile module": {
		"description": "size() from the tarfile module",
		"prefix": "size",
		"body": ["size()"]},
	"tobuf() from the tarfile module": {
		"description": "tobuf() from the tarfile module",
		"prefix": "tobuf",
		"body": ["tobuf(${1:format=DEFAULT_FORMAT}, ${2:encoding=ENCODING}, ${3:errors='surrogateescape'})"]},
	"type() from the tarfile module": {
		"description": "type() from the tarfile module",
		"prefix": "type",
		"body": ["type()"]},
	"uid() from the tarfile module": {
		"description": "uid() from the tarfile module",
		"prefix": "uid",
		"body": ["uid()"]},
	"uname() from the tarfile module": {
		"description": "uname() from the tarfile module",
		"prefix": "uname",
		"body": ["uname()"]},
// telnetlib completion
	"Telnet from the telnetlib module": {
		"description": "Telnet from the telnetlib module",
		"prefix": "Telnet",
		"body": ["Telnet(${1:host=None}, ${2:port=0[}, ${3:timeout]})"]},
	"close() from the telnetlib module": {
		"description": "close() from the telnetlib module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"expect() from the telnetlib module": {
		"description": "expect() from the telnetlib module",
		"prefix": "expect",
		"body": ["expect(${1:list}, ${2:timeout=None})"]},
	"fileno() from the telnetlib module": {
		"description": "fileno() from the telnetlib module",
		"prefix": "fileno",
		"body": ["fileno(${1:})"]},
	"get_socket() from the telnetlib module": {
		"description": "get_socket() from the telnetlib module",
		"prefix": "get_socket",
		"body": ["get_socket(${1:})"]},
	"interact() from the telnetlib module": {
		"description": "interact() from the telnetlib module",
		"prefix": "interact",
		"body": ["interact(${1:})"]},
	"msg() from the telnetlib module": {
		"description": "msg() from the telnetlib module",
		"prefix": "msg",
		"body": ["msg(${0:msg}, ${2:*args})"]},
	"mt_interact() from the telnetlib module": {
		"description": "mt_interact() from the telnetlib module",
		"prefix": "mt_interact",
		"body": ["mt_interact(${1:})"]},
	"open() from the telnetlib module": {
		"description": "open() from the telnetlib module",
		"prefix": "open",
		"body": ["open(${1:host}, ${2:port=0[}, ${3:timeout]})"]},
	"read_all() from the telnetlib module": {
		"description": "read_all() from the telnetlib module",
		"prefix": "read_all",
		"body": ["read_all(${1:})"]},
	"read_eager() from the telnetlib module": {
		"description": "read_eager() from the telnetlib module",
		"prefix": "read_eager",
		"body": ["read_eager(${1:})"]},
	"read_lazy() from the telnetlib module": {
		"description": "read_lazy() from the telnetlib module",
		"prefix": "read_lazy",
		"body": ["read_lazy(${1:})"]},
	"read_sb_data() from the telnetlib module": {
		"description": "read_sb_data() from the telnetlib module",
		"prefix": "read_sb_data",
		"body": ["read_sb_data(${1:})"]},
	"read_some() from the telnetlib module": {
		"description": "read_some() from the telnetlib module",
		"prefix": "read_some",
		"body": ["read_some(${1:})"]},
	"read_until() from the telnetlib module": {
		"description": "read_until() from the telnetlib module",
		"prefix": "read_until",
		"body": ["read_until(${1:expected}, ${2:timeout=None})"]},
	"read_very_eager() from the telnetlib module": {
		"description": "read_very_eager() from the telnetlib module",
		"prefix": "read_very_eager",
		"body": ["read_very_eager(${1:})"]},
	"read_very_lazy() from the telnetlib module": {
		"description": "read_very_lazy() from the telnetlib module",
		"prefix": "read_very_lazy",
		"body": ["read_very_lazy(${1:})"]},
	"set_debuglevel() from the telnetlib module": {
		"description": "set_debuglevel() from the telnetlib module",
		"prefix": "set_debuglevel",
		"body": ["set_debuglevel(${1:debuglevel})"]},
	"set_option_negotiation_callback() from the telnetlib module": {
		"description": "set_option_negotiation_callback() from the telnetlib module",
		"prefix": "set_option_negotiation_callback",
		"body": ["set_option_negotiation_callback(${1:callback})"]},
	"write() from the telnetlib module": {
		"description": "write() from the telnetlib module",
		"prefix": "write",
		"body": ["write(${1:buffer})"]},
// tempfile completion
	"NamedTemporaryFile from the tempfile module": {
		"description": "NamedTemporaryFile from the tempfile module",
		"prefix": "NamedTemporaryFile",
		"body": ["NamedTemporaryFile(${1:mode='w+b'}, ${2:buffering=None}, ${3:encoding=None}, ${4:newline=None}, ${5:suffix=None}, ${6:prefix=None}, ${7:dir=None}, ${8:delete=True})"]},
	"SpooledTemporaryFile from the tempfile module": {
		"description": "SpooledTemporaryFile from the tempfile module",
		"prefix": "SpooledTemporaryFile",
		"body": ["SpooledTemporaryFile(${1:max_size=0}, ${2:mode='w+b'}, ${3:buffering=None}, ${4:encoding=None}, ${5:newline=None}, ${6:suffix=None}, ${7:prefix=None}, ${8:dir=None})"]},
	"TemporaryDirectory from the tempfile module": {
		"description": "TemporaryDirectory from the tempfile module",
		"prefix": "TemporaryDirectory",
		"body": ["TemporaryDirectory(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None})"]},
	"TemporaryFile from the tempfile module": {
		"description": "TemporaryFile from the tempfile module",
		"prefix": "TemporaryFile",
		"body": ["TemporaryFile(${1:mode='w+b'}, ${2:buffering=None}, ${3:encoding=None}, ${4:newline=None}, ${5:suffix=None}, ${6:prefix=None}, ${7:dir=None})"]},
	"gettempdir() from the tempfile module": {
		"description": "gettempdir() from the tempfile module",
		"prefix": "gettempdir",
		"body": ["gettempdir(${1:})"]},
	"gettempdirb() from the tempfile module": {
		"description": "gettempdirb() from the tempfile module",
		"prefix": "gettempdirb",
		"body": ["gettempdirb(${1:})"]},
	"gettempprefix() from the tempfile module": {
		"description": "gettempprefix() from the tempfile module",
		"prefix": "gettempprefix",
		"body": ["gettempprefix(${1:})"]},
	"gettempprefixb() from the tempfile module": {
		"description": "gettempprefixb() from the tempfile module",
		"prefix": "gettempprefixb",
		"body": ["gettempprefixb(${1:})"]},
	"mkdtemp() from the tempfile module": {
		"description": "mkdtemp() from the tempfile module",
		"prefix": "mkdtemp",
		"body": ["mkdtemp(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None})"]},
	"mkstemp() from the tempfile module": {
		"description": "mkstemp() from the tempfile module",
		"prefix": "mkstemp",
		"body": ["mkstemp(${1:suffix=None}, ${2:prefix=None}, ${3:dir=None}, ${4:text=False})"]},
	"mktemp() from the tempfile module": {
		"description": "mktemp() from the tempfile module",
		"prefix": "mktemp",
		"body": ["mktemp(${1:suffix=''}, ${2:prefix='tmp'}, ${3:dir=None})"]},
	"tempdir() from the tempfile module": {
		"description": "tempdir() from the tempfile module",
		"prefix": "tempdir",
		"body": ["tempdir()"]},
// termios completion
	"tcdrain() from the termios module": {
		"description": "tcdrain() from the termios module",
		"prefix": "tcdrain",
		"body": ["tcdrain(${1:fd})"]},
	"tcflow() from the termios module": {
		"description": "tcflow() from the termios module",
		"prefix": "tcflow",
		"body": ["tcflow(${1:fd}, ${2:action})"]},
	"tcflush() from the termios module": {
		"description": "tcflush() from the termios module",
		"prefix": "tcflush",
		"body": ["tcflush(${1:fd}, ${2:queue})"]},
	"tcgetattr() from the termios module": {
		"description": "tcgetattr() from the termios module",
		"prefix": "tcgetattr",
		"body": ["tcgetattr(${1:fd})"]},
	"tcsendbreak() from the termios module": {
		"description": "tcsendbreak() from the termios module",
		"prefix": "tcsendbreak",
		"body": ["tcsendbreak(${1:fd}, ${2:duration})"]},
	"tcsetattr() from the termios module": {
		"description": "tcsetattr() from the termios module",
		"prefix": "tcsetattr",
		"body": ["tcsetattr(${1:fd,})"]},
// test completion
	"EnvironmentVarGuard from the test module": {
		"description": "EnvironmentVarGuard from the test module",
		"prefix": "EnvironmentVarGuard",
		"body": ["EnvironmentVarGuard"]},
	"ResourceDenied from the test module": {
		"description": "ResourceDenied from the test module",
		"prefix": "ResourceDenied",
		"body": ["ResourceDenied"]},
	"SuppressCrashReport from the test module": {
		"description": "SuppressCrashReport from the test module",
		"prefix": "SuppressCrashReport",
		"body": ["SuppressCrashReport"]},
	"TESTFN from the test module": {
		"description": "TESTFN from the test module",
		"prefix": "TESTFN",
		"body": ["TESTFN"]},
	"TestFailed from the test module": {
		"description": "TestFailed from the test module",
		"prefix": "TestFailed",
		"body": ["TestFailed"]},
	"TransientResource from the test module": {
		"description": "TransientResource from the test module",
		"prefix": "TransientResource",
		"body": ["TransientResource(${1:exc}, ${2:**kwargs})"]},
	"WarningsRecorder from the test module": {
		"description": "WarningsRecorder from the test module",
		"prefix": "WarningsRecorder",
		"body": ["WarningsRecorder"]},
	"anticipate_failure() from the test module": {
		"description": "anticipate_failure() from the test module",
		"prefix": "anticipate_failure",
		"body": ["anticipate_failure(${1:condition})"]},
	"bind_port() from the test module": {
		"description": "bind_port() from the test module",
		"prefix": "bind_port",
		"body": ["bind_port(${1:sock}, ${2:host=HOST})"]},
	"can_symlink() from the test module": {
		"description": "can_symlink() from the test module",
		"prefix": "can_symlink",
		"body": ["can_symlink(${1:})"]},
	"captured_stderr() from the test module": {
		"description": "captured_stderr() from the test module",
		"prefix": "captured_stderr",
		"body": ["captured_stderr(${1:})"]},
	"captured_stdin() from the test module": {
		"description": "captured_stdin() from the test module",
		"prefix": "captured_stdin",
		"body": ["captured_stdin(${1:})"]},
	"captured_stdout() from the test module": {
		"description": "captured_stdout() from the test module",
		"prefix": "captured_stdout",
		"body": ["captured_stdout(${1:})"]},
	"change_cwd() from the test module": {
		"description": "change_cwd() from the test module",
		"prefix": "change_cwd",
		"body": ["change_cwd(${1:path}, ${2:quiet=False})"]},
	"check_warnings() from the test module": {
		"description": "check_warnings() from the test module",
		"prefix": "check_warnings",
		"body": ["check_warnings(${1:*filters}, ${2:quiet=True})"]},
	"find_unused_port() from the test module": {
		"description": "find_unused_port() from the test module",
		"prefix": "find_unused_port",
		"body": ["find_unused_port(${1:family=socket.AF_INET}, ${2:socktype=socket.SOCK_STREAM})"]},
	"findfile() from the test module": {
		"description": "findfile() from the test module",
		"prefix": "findfile",
		"body": ["findfile(${1:filename}, ${2:subdir=None})"]},
	"forget() from the test module": {
		"description": "forget() from the test module",
		"prefix": "forget",
		"body": ["forget(${1:module_name})"]},
	"import_fresh_module() from the test module": {
		"description": "import_fresh_module() from the test module",
		"prefix": "import_fresh_module",
		"body": ["import_fresh_module(${1:name}, ${2:fresh=}, ${3:})"]},
	"import_module() from the test module": {
		"description": "import_module() from the test module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:deprecated=False})"]},
	"is_jython() from the test module": {
		"description": "is_jython() from the test module",
		"prefix": "is_jython",
		"body": ["is_jython()"]},
	"is_resource_enabled() from the test module": {
		"description": "is_resource_enabled() from the test module",
		"prefix": "is_resource_enabled",
		"body": ["is_resource_enabled(${1:resource})"]},
	"load_package_tests() from the test module": {
		"description": "load_package_tests() from the test module",
		"prefix": "load_package_tests",
		"body": ["load_package_tests(${1:pkg_dir}, ${2:loader}, ${3:standard_tests}, ${4:pattern})"]},
	"make_bad_fd() from the test module": {
		"description": "make_bad_fd() from the test module",
		"prefix": "make_bad_fd",
		"body": ["make_bad_fd(${1:})"]},
	"requires() from the test module": {
		"description": "requires() from the test module",
		"prefix": "requires",
		"body": ["requires(${1:resource}, ${2:msg=None})"]},
	"run_doctest() from the test module": {
		"description": "run_doctest() from the test module",
		"prefix": "run_doctest",
		"body": ["run_doctest(${1:module}, ${2:verbosity=None})"]},
	"run_unittest() from the test module": {
		"description": "run_unittest() from the test module",
		"prefix": "run_unittest",
		"body": ["run_unittest(${1:*classes})"]},
	"run_with_locale() from the test module": {
		"description": "run_with_locale() from the test module",
		"prefix": "run_with_locale",
		"body": ["run_with_locale(${1:catstr}, ${2:*locales})"]},
	"set() from the test module": {
		"description": "set() from the test module",
		"prefix": "set",
		"body": ["set(${1:envvar}, ${2:value})"]},
	"skip_unless_symlink() from the test module": {
		"description": "skip_unless_symlink() from the test module",
		"prefix": "skip_unless_symlink",
		"body": ["skip_unless_symlink()"]},
	"temp_cwd() from the test module": {
		"description": "temp_cwd() from the test module",
		"prefix": "temp_cwd",
		"body": ["temp_cwd(${1:name='tempcwd'}, ${2:quiet=False})"]},
	"temp_dir() from the test module": {
		"description": "temp_dir() from the test module",
		"prefix": "temp_dir",
		"body": ["temp_dir(${1:path=None}, ${2:quiet=False})"]},
	"temp_umask() from the test module": {
		"description": "temp_umask() from the test module",
		"prefix": "temp_umask",
		"body": ["temp_umask(${1:umask})"]},
	"unset() from the test module": {
		"description": "unset() from the test module",
		"prefix": "unset",
		"body": ["unset(${1:envvar})"]},
	"verbose() from the test module": {
		"description": "verbose() from the test module",
		"prefix": "verbose",
		"body": ["verbose()"]},
// test.support completion
	"EnvironmentVarGuard from the test.support module": {
		"description": "EnvironmentVarGuard from the test.support module",
		"prefix": "EnvironmentVarGuard",
		"body": ["EnvironmentVarGuard"]},
	"ResourceDenied from the test.support module": {
		"description": "ResourceDenied from the test.support module",
		"prefix": "ResourceDenied",
		"body": ["ResourceDenied"]},
	"SuppressCrashReport from the test.support module": {
		"description": "SuppressCrashReport from the test.support module",
		"prefix": "SuppressCrashReport",
		"body": ["SuppressCrashReport"]},
	"TESTFN from the test.support module": {
		"description": "TESTFN from the test.support module",
		"prefix": "TESTFN",
		"body": ["TESTFN"]},
	"TestFailed from the test.support module": {
		"description": "TestFailed from the test.support module",
		"prefix": "TestFailed",
		"body": ["TestFailed"]},
	"TransientResource from the test.support module": {
		"description": "TransientResource from the test.support module",
		"prefix": "TransientResource",
		"body": ["TransientResource(${1:exc}, ${2:**kwargs})"]},
	"WarningsRecorder from the test.support module": {
		"description": "WarningsRecorder from the test.support module",
		"prefix": "WarningsRecorder",
		"body": ["WarningsRecorder"]},
	"anticipate_failure() from the test.support module": {
		"description": "anticipate_failure() from the test.support module",
		"prefix": "anticipate_failure",
		"body": ["anticipate_failure(${1:condition})"]},
	"bind_port() from the test.support module": {
		"description": "bind_port() from the test.support module",
		"prefix": "bind_port",
		"body": ["bind_port(${1:sock}, ${2:host=HOST})"]},
	"can_symlink() from the test.support module": {
		"description": "can_symlink() from the test.support module",
		"prefix": "can_symlink",
		"body": ["can_symlink(${1:})"]},
	"captured_stderr() from the test.support module": {
		"description": "captured_stderr() from the test.support module",
		"prefix": "captured_stderr",
		"body": ["captured_stderr(${1:})"]},
	"captured_stdin() from the test.support module": {
		"description": "captured_stdin() from the test.support module",
		"prefix": "captured_stdin",
		"body": ["captured_stdin(${1:})"]},
	"captured_stdout() from the test.support module": {
		"description": "captured_stdout() from the test.support module",
		"prefix": "captured_stdout",
		"body": ["captured_stdout(${1:})"]},
	"change_cwd() from the test.support module": {
		"description": "change_cwd() from the test.support module",
		"prefix": "change_cwd",
		"body": ["change_cwd(${1:path}, ${2:quiet=False})"]},
	"check_warnings() from the test.support module": {
		"description": "check_warnings() from the test.support module",
		"prefix": "check_warnings",
		"body": ["check_warnings(${1:*filters}, ${2:quiet=True})"]},
	"find_unused_port() from the test.support module": {
		"description": "find_unused_port() from the test.support module",
		"prefix": "find_unused_port",
		"body": ["find_unused_port(${1:family=socket.AF_INET}, ${2:socktype=socket.SOCK_STREAM})"]},
	"findfile() from the test.support module": {
		"description": "findfile() from the test.support module",
		"prefix": "findfile",
		"body": ["findfile(${1:filename}, ${2:subdir=None})"]},
	"forget() from the test.support module": {
		"description": "forget() from the test.support module",
		"prefix": "forget",
		"body": ["forget(${1:module_name})"]},
	"import_fresh_module() from the test.support module": {
		"description": "import_fresh_module() from the test.support module",
		"prefix": "import_fresh_module",
		"body": ["import_fresh_module(${1:name}, ${2:fresh=}, ${3:})"]},
	"import_module() from the test.support module": {
		"description": "import_module() from the test.support module",
		"prefix": "import_module",
		"body": ["import_module(${1:name}, ${2:deprecated=False})"]},
	"is_jython() from the test.support module": {
		"description": "is_jython() from the test.support module",
		"prefix": "is_jython",
		"body": ["is_jython()"]},
	"is_resource_enabled() from the test.support module": {
		"description": "is_resource_enabled() from the test.support module",
		"prefix": "is_resource_enabled",
		"body": ["is_resource_enabled(${1:resource})"]},
	"load_package_tests() from the test.support module": {
		"description": "load_package_tests() from the test.support module",
		"prefix": "load_package_tests",
		"body": ["load_package_tests(${1:pkg_dir}, ${2:loader}, ${3:standard_tests}, ${4:pattern})"]},
	"make_bad_fd() from the test.support module": {
		"description": "make_bad_fd() from the test.support module",
		"prefix": "make_bad_fd",
		"body": ["make_bad_fd(${1:})"]},
	"requires() from the test.support module": {
		"description": "requires() from the test.support module",
		"prefix": "requires",
		"body": ["requires(${1:resource}, ${2:msg=None})"]},
	"run_doctest() from the test.support module": {
		"description": "run_doctest() from the test.support module",
		"prefix": "run_doctest",
		"body": ["run_doctest(${1:module}, ${2:verbosity=None})"]},
	"run_unittest() from the test.support module": {
		"description": "run_unittest() from the test.support module",
		"prefix": "run_unittest",
		"body": ["run_unittest(${1:*classes})"]},
	"run_with_locale() from the test.support module": {
		"description": "run_with_locale() from the test.support module",
		"prefix": "run_with_locale",
		"body": ["run_with_locale(${1:catstr}, ${2:*locales})"]},
	"set() from the test.support module": {
		"description": "set() from the test.support module",
		"prefix": "set",
		"body": ["set(${1:envvar}, ${2:value})"]},
	"skip_unless_symlink() from the test.support module": {
		"description": "skip_unless_symlink() from the test.support module",
		"prefix": "skip_unless_symlink",
		"body": ["skip_unless_symlink()"]},
	"temp_cwd() from the test.support module": {
		"description": "temp_cwd() from the test.support module",
		"prefix": "temp_cwd",
		"body": ["temp_cwd(${1:name='tempcwd'}, ${2:quiet=False})"]},
	"temp_dir() from the test.support module": {
		"description": "temp_dir() from the test.support module",
		"prefix": "temp_dir",
		"body": ["temp_dir(${1:path=None}, ${2:quiet=False})"]},
	"temp_umask() from the test.support module": {
		"description": "temp_umask() from the test.support module",
		"prefix": "temp_umask",
		"body": ["temp_umask(${1:umask})"]},
	"unset() from the test.support module": {
		"description": "unset() from the test.support module",
		"prefix": "unset",
		"body": ["unset(${1:envvar})"]},
	"verbose() from the test.support module": {
		"description": "verbose() from the test.support module",
		"prefix": "verbose",
		"body": ["verbose()"]},
// textwrap completion
	"TextWrapper from the textwrap module": {
		"description": "TextWrapper from the textwrap module",
		"prefix": "TextWrapper",
		"body": ["TextWrapper(${1:**kwargs})"]},
	"dedent() from the textwrap module": {
		"description": "dedent() from the textwrap module",
		"prefix": "dedent",
		"body": ["dedent(${1:text})"]},
	"fill() from the textwrap module": {
		"description": "fill() from the textwrap module",
		"prefix": "fill",
		"body": ["fill(${1:text}, ${2:width=70}, ${3:**kwargs})"]},
	"indent() from the textwrap module": {
		"description": "indent() from the textwrap module",
		"prefix": "indent",
		"body": ["indent(${1:text}, ${2:prefix}, ${3:predicate=None})"]},
	"shorten() from the textwrap module": {
		"description": "shorten() from the textwrap module",
		"prefix": "shorten",
		"body": ["shorten(${1:text}, ${2:width}, ${3:**kwargs})"]},
	"wrap() from the textwrap module": {
		"description": "wrap() from the textwrap module",
		"prefix": "wrap",
		"body": ["wrap(${1:text,})"]},
// threading completion
	"Barrier from the threading module": {
		"description": "Barrier from the threading module",
		"prefix": "Barrier",
		"body": ["Barrier(${1:parties}, ${2:action=None}, ${3:timeout=None})"]},
	"BoundedSemaphore from the threading module": {
		"description": "BoundedSemaphore from the threading module",
		"prefix": "BoundedSemaphore",
		"body": ["BoundedSemaphore(${1:value=1})"]},
	"BrokenBarrierError from the threading module": {
		"description": "BrokenBarrierError from the threading module",
		"prefix": "BrokenBarrierError",
		"body": ["BrokenBarrierError"]},
	"Condition from the threading module": {
		"description": "Condition from the threading module",
		"prefix": "Condition",
		"body": ["Condition(${1:lock=None})"]},
	"Event from the threading module": {
		"description": "Event from the threading module",
		"prefix": "Event",
		"body": ["Event"]},
	"Lock from the threading module": {
		"description": "Lock from the threading module",
		"prefix": "Lock",
		"body": ["Lock"]},
	"RLock from the threading module": {
		"description": "RLock from the threading module",
		"prefix": "RLock",
		"body": ["RLock"]},
	"Semaphore from the threading module": {
		"description": "Semaphore from the threading module",
		"prefix": "Semaphore",
		"body": ["Semaphore(${1:value=1})"]},
	"TIMEOUT_MAX from the threading module": {
		"description": "TIMEOUT_MAX from the threading module",
		"prefix": "TIMEOUT_MAX",
		"body": ["TIMEOUT_MAX"]},
	"Thread from the threading module": {
		"description": "Thread from the threading module",
		"prefix": "Thread",
		"body": ["Thread(${1:group=None}, ${2:target=None}, ${3:name=None}, ${4:args=}, ${5:})"]},
	"Timer from the threading module": {
		"description": "Timer from the threading module",
		"prefix": "Timer",
		"body": ["Timer(${1:interval}, ${2:function}, ${3:args=None}, ${4:kwargs=None})"]},
	"active_count() from the threading module": {
		"description": "active_count() from the threading module",
		"prefix": "active_count",
		"body": ["active_count(${1:})"]},
	"current_thread() from the threading module": {
		"description": "current_thread() from the threading module",
		"prefix": "current_thread",
		"body": ["current_thread(${1:})"]},
	"enumerate() from the threading module": {
		"description": "enumerate() from the threading module",
		"prefix": "enumerate",
		"body": ["enumerate(${1:})"]},
	"get_ident() from the threading module": {
		"description": "get_ident() from the threading module",
		"prefix": "get_ident",
		"body": ["get_ident(${1:})"]},
	"local() from the threading module": {
		"description": "local() from the threading module",
		"prefix": "local",
		"body": ["local()"]},
	"main_thread() from the threading module": {
		"description": "main_thread() from the threading module",
		"prefix": "main_thread",
		"body": ["main_thread(${1:})"]},
	"setprofile() from the threading module": {
		"description": "setprofile() from the threading module",
		"prefix": "setprofile",
		"body": ["setprofile(${1:func})"]},
	"settrace() from the threading module": {
		"description": "settrace() from the threading module",
		"prefix": "settrace",
		"body": ["settrace(${1:func})"]},
	"stack_size() from the threading module": {
		"description": "stack_size() from the threading module",
		"prefix": "stack_size",
		"body": ["stack_size(${1:[size]})"]},
// time completion
	"CLOCK_HIGHRES from the time module": {
		"description": "CLOCK_HIGHRES from the time module",
		"prefix": "CLOCK_HIGHRES",
		"body": ["CLOCK_HIGHRES"]},
	"CLOCK_MONOTONIC from the time module": {
		"description": "CLOCK_MONOTONIC from the time module",
		"prefix": "CLOCK_MONOTONIC",
		"body": ["CLOCK_MONOTONIC"]},
	"CLOCK_MONOTONIC_RAW from the time module": {
		"description": "CLOCK_MONOTONIC_RAW from the time module",
		"prefix": "CLOCK_MONOTONIC_RAW",
		"body": ["CLOCK_MONOTONIC_RAW"]},
	"CLOCK_PROCESS_CPUTIME_ID from the time module": {
		"description": "CLOCK_PROCESS_CPUTIME_ID from the time module",
		"prefix": "CLOCK_PROCESS_CPUTIME_ID",
		"body": ["CLOCK_PROCESS_CPUTIME_ID"]},
	"CLOCK_REALTIME from the time module": {
		"description": "CLOCK_REALTIME from the time module",
		"prefix": "CLOCK_REALTIME",
		"body": ["CLOCK_REALTIME"]},
	"CLOCK_THREAD_CPUTIME_ID from the time module": {
		"description": "CLOCK_THREAD_CPUTIME_ID from the time module",
		"prefix": "CLOCK_THREAD_CPUTIME_ID",
		"body": ["CLOCK_THREAD_CPUTIME_ID"]},
	"altzone() from the time module": {
		"description": "altzone() from the time module",
		"prefix": "altzone",
		"body": ["altzone()"]},
	"asctime() from the time module": {
		"description": "asctime() from the time module",
		"prefix": "asctime",
		"body": ["asctime(${1:[t]})"]},
	"clock() from the time module": {
		"description": "clock() from the time module",
		"prefix": "clock",
		"body": ["clock(${1:})"]},
	"clock_getres() from the time module": {
		"description": "clock_getres() from the time module",
		"prefix": "clock_getres",
		"body": ["clock_getres(${1:clk_id})"]},
	"clock_gettime() from the time module": {
		"description": "clock_gettime() from the time module",
		"prefix": "clock_gettime",
		"body": ["clock_gettime(${1:clk_id})"]},
	"clock_settime() from the time module": {
		"description": "clock_settime() from the time module",
		"prefix": "clock_settime",
		"body": ["clock_settime(${1:clk_id}, ${2:time})"]},
	"ctime() from the time module": {
		"description": "ctime() from the time module",
		"prefix": "ctime",
		"body": ["ctime(${1:[secs]})"]},
	"daylight() from the time module": {
		"description": "daylight() from the time module",
		"prefix": "daylight",
		"body": ["daylight()"]},
	"get_clock_info() from the time module": {
		"description": "get_clock_info() from the time module",
		"prefix": "get_clock_info",
		"body": ["get_clock_info(${1:name})"]},
	"gmtime() from the time module": {
		"description": "gmtime() from the time module",
		"prefix": "gmtime",
		"body": ["gmtime(${1:[secs]})"]},
	"localtime() from the time module": {
		"description": "localtime() from the time module",
		"prefix": "localtime",
		"body": ["localtime(${1:[secs]})"]},
	"mktime() from the time module": {
		"description": "mktime() from the time module",
		"prefix": "mktime",
		"body": ["mktime(${1:t})"]},
	"monotonic() from the time module": {
		"description": "monotonic() from the time module",
		"prefix": "monotonic",
		"body": ["monotonic(${1:})"]},
	"perf_counter() from the time module": {
		"description": "perf_counter() from the time module",
		"prefix": "perf_counter",
		"body": ["perf_counter(${1:})"]},
	"process_time() from the time module": {
		"description": "process_time() from the time module",
		"prefix": "process_time",
		"body": ["process_time(${1:})"]},
	"sleep() from the time module": {
		"description": "sleep() from the time module",
		"prefix": "sleep",
		"body": ["sleep(${1:secs})"]},
	"strftime() from the time module": {
		"description": "strftime() from the time module",
		"prefix": "strftime",
		"body": ["strftime(${1:format[}, ${2:t]})"]},
	"strptime() from the time module": {
		"description": "strptime() from the time module",
		"prefix": "strptime",
		"body": ["strptime(${1:string[}, ${2:format]})"]},
	"struct_time() from the time module": {
		"description": "struct_time() from the time module",
		"prefix": "struct_time",
		"body": ["struct_time()"]},
	"time() from the time module": {
		"description": "time() from the time module",
		"prefix": "time",
		"body": ["time(${1:})"]},
	"timezone() from the time module": {
		"description": "timezone() from the time module",
		"prefix": "timezone",
		"body": ["timezone()"]},
	"tzname() from the time module": {
		"description": "tzname() from the time module",
		"prefix": "tzname",
		"body": ["tzname()"]},
	"tzset() from the time module": {
		"description": "tzset() from the time module",
		"prefix": "tzset",
		"body": ["tzset(${1:})"]},
// timeit completion
	"Timer from the timeit module": {
		"description": "Timer from the timeit module",
		"prefix": "Timer",
		"body": ["Timer(${1:stmt='pass'}, ${2:setup='pass'}, ${3:timer=}, ${4:globals=None})"]},
	"default_timer() from the timeit module": {
		"description": "default_timer() from the timeit module",
		"prefix": "default_timer",
		"body": ["default_timer(${1:})"]},
	"repeat() from the timeit module": {
		"description": "repeat() from the timeit module",
		"prefix": "repeat",
		"body": ["repeat(${1:stmt='pass'}, ${2:setup='pass'}, ${3:timer=}, ${4:repeat=3}, ${5:number=1000000}, ${6:globals=None})"]},
	"timeit() from the timeit module": {
		"description": "timeit() from the timeit module",
		"prefix": "timeit",
		"body": ["timeit(${1:stmt='pass',})"]},
// tkinter completion
	"EXCEPTION from the tkinter module": {
		"description": "EXCEPTION from the tkinter module",
		"prefix": "EXCEPTION",
		"body": ["EXCEPTION"]},
	"READABLE from the tkinter module": {
		"description": "READABLE from the tkinter module",
		"prefix": "READABLE",
		"body": ["READABLE"]},
	"Tcl from the tkinter module": {
		"description": "Tcl from the tkinter module",
		"prefix": "Tcl",
		"body": ["Tcl(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tk'}, ${4:useTk=0})"]},
	"Tk from the tkinter module": {
		"description": "Tk from the tkinter module",
		"prefix": "Tk",
		"body": ["Tk(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tk'}, ${4:useTk=1})"]},
	"WRITABLE from the tkinter module": {
		"description": "WRITABLE from the tkinter module",
		"prefix": "WRITABLE",
		"body": ["WRITABLE"]},
	"createfilehandler() from the tkinter module": {
		"description": "createfilehandler() from the tkinter module",
		"prefix": "createfilehandler",
		"body": ["createfilehandler(${1:file}, ${2:mask}, ${3:func})"]},
	"deletefilehandler() from the tkinter module": {
		"description": "deletefilehandler() from the tkinter module",
		"prefix": "deletefilehandler",
		"body": ["deletefilehandler(${1:file})"]},
// tkinter.scrolledtext completion
	"frame() from the tkinter.scrolledtext module": {
		"description": "frame() from the tkinter.scrolledtext module",
		"prefix": "frame",
		"body": ["frame()"]},
	"vbar() from the tkinter.scrolledtext module": {
		"description": "vbar() from the tkinter.scrolledtext module",
		"prefix": "vbar",
		"body": ["vbar()"]},
// tkinter.tix completion
	"Balloon from the tkinter.tix module": {
		"description": "Balloon from the tkinter.tix module",
		"prefix": "Balloon",
		"body": ["Balloon"]},
	"ButtonBox from the tkinter.tix module": {
		"description": "ButtonBox from the tkinter.tix module",
		"prefix": "ButtonBox",
		"body": ["ButtonBox"]},
	"CheckList from the tkinter.tix module": {
		"description": "CheckList from the tkinter.tix module",
		"prefix": "CheckList",
		"body": ["CheckList"]},
	"ComboBox from the tkinter.tix module": {
		"description": "ComboBox from the tkinter.tix module",
		"prefix": "ComboBox",
		"body": ["ComboBox"]},
	"Control from the tkinter.tix module": {
		"description": "Control from the tkinter.tix module",
		"prefix": "Control",
		"body": ["Control"]},
	"DirList from the tkinter.tix module": {
		"description": "DirList from the tkinter.tix module",
		"prefix": "DirList",
		"body": ["DirList"]},
	"DirSelectBox from the tkinter.tix module": {
		"description": "DirSelectBox from the tkinter.tix module",
		"prefix": "DirSelectBox",
		"body": ["DirSelectBox"]},
	"DirSelectDialog from the tkinter.tix module": {
		"description": "DirSelectDialog from the tkinter.tix module",
		"prefix": "DirSelectDialog",
		"body": ["DirSelectDialog"]},
	"DirTree from the tkinter.tix module": {
		"description": "DirTree from the tkinter.tix module",
		"prefix": "DirTree",
		"body": ["DirTree"]},
	"ExFileSelectBox from the tkinter.tix module": {
		"description": "ExFileSelectBox from the tkinter.tix module",
		"prefix": "ExFileSelectBox",
		"body": ["ExFileSelectBox"]},
	"FileEntry from the tkinter.tix module": {
		"description": "FileEntry from the tkinter.tix module",
		"prefix": "FileEntry",
		"body": ["FileEntry"]},
	"FileSelectBox from the tkinter.tix module": {
		"description": "FileSelectBox from the tkinter.tix module",
		"prefix": "FileSelectBox",
		"body": ["FileSelectBox"]},
	"Form from the tkinter.tix module": {
		"description": "Form from the tkinter.tix module",
		"prefix": "Form",
		"body": ["Form"]},
	"HList from the tkinter.tix module": {
		"description": "HList from the tkinter.tix module",
		"prefix": "HList",
		"body": ["HList"]},
	"InputOnly from the tkinter.tix module": {
		"description": "InputOnly from the tkinter.tix module",
		"prefix": "InputOnly",
		"body": ["InputOnly"]},
	"LabelEntry from the tkinter.tix module": {
		"description": "LabelEntry from the tkinter.tix module",
		"prefix": "LabelEntry",
		"body": ["LabelEntry"]},
	"LabelFrame from the tkinter.tix module": {
		"description": "LabelFrame from the tkinter.tix module",
		"prefix": "LabelFrame",
		"body": ["LabelFrame"]},
	"ListNoteBook from the tkinter.tix module": {
		"description": "ListNoteBook from the tkinter.tix module",
		"prefix": "ListNoteBook",
		"body": ["ListNoteBook"]},
	"Meter from the tkinter.tix module": {
		"description": "Meter from the tkinter.tix module",
		"prefix": "Meter",
		"body": ["Meter"]},
	"NoteBook from the tkinter.tix module": {
		"description": "NoteBook from the tkinter.tix module",
		"prefix": "NoteBook",
		"body": ["NoteBook"]},
	"OptionMenu from the tkinter.tix module": {
		"description": "OptionMenu from the tkinter.tix module",
		"prefix": "OptionMenu",
		"body": ["OptionMenu"]},
	"PanedWindow from the tkinter.tix module": {
		"description": "PanedWindow from the tkinter.tix module",
		"prefix": "PanedWindow",
		"body": ["PanedWindow"]},
	"PopupMenu from the tkinter.tix module": {
		"description": "PopupMenu from the tkinter.tix module",
		"prefix": "PopupMenu",
		"body": ["PopupMenu"]},
	"Select from the tkinter.tix module": {
		"description": "Select from the tkinter.tix module",
		"prefix": "Select",
		"body": ["Select"]},
	"StdButtonBox from the tkinter.tix module": {
		"description": "StdButtonBox from the tkinter.tix module",
		"prefix": "StdButtonBox",
		"body": ["StdButtonBox"]},
	"TList from the tkinter.tix module": {
		"description": "TList from the tkinter.tix module",
		"prefix": "TList",
		"body": ["TList"]},
	"Tk from the tkinter.tix module": {
		"description": "Tk from the tkinter.tix module",
		"prefix": "Tk",
		"body": ["Tk(${1:screenName=None}, ${2:baseName=None}, ${3:className='Tix'})"]},
	"Tree from the tkinter.tix module": {
		"description": "Tree from the tkinter.tix module",
		"prefix": "Tree",
		"body": ["Tree"]},
	"tixCommand() from the tkinter.tix module": {
		"description": "tixCommand() from the tkinter.tix module",
		"prefix": "tixCommand",
		"body": ["tixCommand()"]},
	"tix_addbitmapdir() from the tkinter.tix module": {
		"description": "tix_addbitmapdir() from the tkinter.tix module",
		"prefix": "tix_addbitmapdir",
		"body": ["tix_addbitmapdir(${1:directory})"]},
	"tix_cget() from the tkinter.tix module": {
		"description": "tix_cget() from the tkinter.tix module",
		"prefix": "tix_cget",
		"body": ["tix_cget(${1:option})"]},
	"tix_configure() from the tkinter.tix module": {
		"description": "tix_configure() from the tkinter.tix module",
		"prefix": "tix_configure",
		"body": ["tix_configure(${1:cnf=None}, ${2:**kw})"]},
	"tix_filedialog() from the tkinter.tix module": {
		"description": "tix_filedialog() from the tkinter.tix module",
		"prefix": "tix_filedialog",
		"body": ["tix_filedialog(${1:[dlgclass]})"]},
	"tix_getbitmap() from the tkinter.tix module": {
		"description": "tix_getbitmap() from the tkinter.tix module",
		"prefix": "tix_getbitmap",
		"body": ["tix_getbitmap(${1:name})"]},
	"tix_getimage() from the tkinter.tix module": {
		"description": "tix_getimage() from the tkinter.tix module",
		"prefix": "tix_getimage",
		"body": ["tix_getimage(${1:self}, ${2:name})"]},
	"tix_option_get() from the tkinter.tix module": {
		"description": "tix_option_get() from the tkinter.tix module",
		"prefix": "tix_option_get",
		"body": ["tix_option_get(${1:name})"]},
	"tix_resetoptions() from the tkinter.tix module": {
		"description": "tix_resetoptions() from the tkinter.tix module",
		"prefix": "tix_resetoptions",
		"body": ["tix_resetoptions(${1:newScheme,})"]},
// tkinter.ttk completion
	"Combobox from the tkinter.ttk module": {
		"description": "Combobox from the tkinter.ttk module",
		"prefix": "Combobox",
		"body": ["Combobox"]},
	"Notebook from the tkinter.ttk module": {
		"description": "Notebook from the tkinter.ttk module",
		"prefix": "Notebook",
		"body": ["Notebook"]},
	"Progressbar from the tkinter.ttk module": {
		"description": "Progressbar from the tkinter.ttk module",
		"prefix": "Progressbar",
		"body": ["Progressbar"]},
	"Style from the tkinter.ttk module": {
		"description": "Style from the tkinter.ttk module",
		"prefix": "Style",
		"body": ["Style"]},
	"Treeview from the tkinter.ttk module": {
		"description": "Treeview from the tkinter.ttk module",
		"prefix": "Treeview",
		"body": ["Treeview"]},
	"Widget from the tkinter.ttk module": {
		"description": "Widget from the tkinter.ttk module",
		"prefix": "Widget",
		"body": ["Widget"]},
// token completion
	"AMPER from the token module": {
		"description": "AMPER from the token module",
		"prefix": "AMPER",
		"body": ["AMPER"]},
	"AMPEREQUAL from the token module": {
		"description": "AMPEREQUAL from the token module",
		"prefix": "AMPEREQUAL",
		"body": ["AMPEREQUAL"]},
	"ASYNC from the token module": {
		"description": "ASYNC from the token module",
		"prefix": "ASYNC",
		"body": ["ASYNC"]},
	"AT from the token module": {
		"description": "AT from the token module",
		"prefix": "AT",
		"body": ["AT"]},
	"ATEQUAL from the token module": {
		"description": "ATEQUAL from the token module",
		"prefix": "ATEQUAL",
		"body": ["ATEQUAL"]},
	"AWAIT from the token module": {
		"description": "AWAIT from the token module",
		"prefix": "AWAIT",
		"body": ["AWAIT"]},
	"CIRCUMFLEX from the token module": {
		"description": "CIRCUMFLEX from the token module",
		"prefix": "CIRCUMFLEX",
		"body": ["CIRCUMFLEX"]},
	"CIRCUMFLEXEQUAL from the token module": {
		"description": "CIRCUMFLEXEQUAL from the token module",
		"prefix": "CIRCUMFLEXEQUAL",
		"body": ["CIRCUMFLEXEQUAL"]},
	"COLON from the token module": {
		"description": "COLON from the token module",
		"prefix": "COLON",
		"body": ["COLON"]},
	"COMMA from the token module": {
		"description": "COMMA from the token module",
		"prefix": "COMMA",
		"body": ["COMMA"]},
	"DEDENT from the token module": {
		"description": "DEDENT from the token module",
		"prefix": "DEDENT",
		"body": ["DEDENT"]},
	"DOT from the token module": {
		"description": "DOT from the token module",
		"prefix": "DOT",
		"body": ["DOT"]},
	"DOUBLESLASH from the token module": {
		"description": "DOUBLESLASH from the token module",
		"prefix": "DOUBLESLASH",
		"body": ["DOUBLESLASH"]},
	"DOUBLESLASHEQUAL from the token module": {
		"description": "DOUBLESLASHEQUAL from the token module",
		"prefix": "DOUBLESLASHEQUAL",
		"body": ["DOUBLESLASHEQUAL"]},
	"DOUBLESTAR from the token module": {
		"description": "DOUBLESTAR from the token module",
		"prefix": "DOUBLESTAR",
		"body": ["DOUBLESTAR"]},
	"DOUBLESTAREQUAL from the token module": {
		"description": "DOUBLESTAREQUAL from the token module",
		"prefix": "DOUBLESTAREQUAL",
		"body": ["DOUBLESTAREQUAL"]},
	"ELLIPSIS from the token module": {
		"description": "ELLIPSIS from the token module",
		"prefix": "ELLIPSIS",
		"body": ["ELLIPSIS"]},
	"ENDMARKER from the token module": {
		"description": "ENDMARKER from the token module",
		"prefix": "ENDMARKER",
		"body": ["ENDMARKER"]},
	"EQEQUAL from the token module": {
		"description": "EQEQUAL from the token module",
		"prefix": "EQEQUAL",
		"body": ["EQEQUAL"]},
	"EQUAL from the token module": {
		"description": "EQUAL from the token module",
		"prefix": "EQUAL",
		"body": ["EQUAL"]},
	"ERRORTOKEN from the token module": {
		"description": "ERRORTOKEN from the token module",
		"prefix": "ERRORTOKEN",
		"body": ["ERRORTOKEN"]},
	"GREATER from the token module": {
		"description": "GREATER from the token module",
		"prefix": "GREATER",
		"body": ["GREATER"]},
	"GREATEREQUAL from the token module": {
		"description": "GREATEREQUAL from the token module",
		"prefix": "GREATEREQUAL",
		"body": ["GREATEREQUAL"]},
	"INDENT from the token module": {
		"description": "INDENT from the token module",
		"prefix": "INDENT",
		"body": ["INDENT"]},
	"ISEOF from the token module": {
		"description": "ISEOF from the token module",
		"prefix": "ISEOF",
		"body": ["ISEOF(${1:x})"]},
	"ISNONTERMINAL from the token module": {
		"description": "ISNONTERMINAL from the token module",
		"prefix": "ISNONTERMINAL",
		"body": ["ISNONTERMINAL(${1:x})"]},
	"ISTERMINAL from the token module": {
		"description": "ISTERMINAL from the token module",
		"prefix": "ISTERMINAL",
		"body": ["ISTERMINAL(${1:x})"]},
	"LBRACE from the token module": {
		"description": "LBRACE from the token module",
		"prefix": "LBRACE",
		"body": ["LBRACE"]},
	"LEFTSHIFT from the token module": {
		"description": "LEFTSHIFT from the token module",
		"prefix": "LEFTSHIFT",
		"body": ["LEFTSHIFT"]},
	"LEFTSHIFTEQUAL from the token module": {
		"description": "LEFTSHIFTEQUAL from the token module",
		"prefix": "LEFTSHIFTEQUAL",
		"body": ["LEFTSHIFTEQUAL"]},
	"LESS from the token module": {
		"description": "LESS from the token module",
		"prefix": "LESS",
		"body": ["LESS"]},
	"LESSEQUAL from the token module": {
		"description": "LESSEQUAL from the token module",
		"prefix": "LESSEQUAL",
		"body": ["LESSEQUAL"]},
	"LPAR from the token module": {
		"description": "LPAR from the token module",
		"prefix": "LPAR",
		"body": ["LPAR"]},
	"LSQB from the token module": {
		"description": "LSQB from the token module",
		"prefix": "LSQB",
		"body": ["LSQB"]},
	"MINEQUAL from the token module": {
		"description": "MINEQUAL from the token module",
		"prefix": "MINEQUAL",
		"body": ["MINEQUAL"]},
	"MINUS from the token module": {
		"description": "MINUS from the token module",
		"prefix": "MINUS",
		"body": ["MINUS"]},
	"NAME from the token module": {
		"description": "NAME from the token module",
		"prefix": "NAME",
		"body": ["NAME"]},
	"NEWLINE from the token module": {
		"description": "NEWLINE from the token module",
		"prefix": "NEWLINE",
		"body": ["NEWLINE"]},
	"NOTEQUAL from the token module": {
		"description": "NOTEQUAL from the token module",
		"prefix": "NOTEQUAL",
		"body": ["NOTEQUAL"]},
	"NT_OFFSET from the token module": {
		"description": "NT_OFFSET from the token module",
		"prefix": "NT_OFFSET",
		"body": ["NT_OFFSET"]},
	"NUMBER from the token module": {
		"description": "NUMBER from the token module",
		"prefix": "NUMBER",
		"body": ["NUMBER"]},
	"N_TOKENS from the token module": {
		"description": "N_TOKENS from the token module",
		"prefix": "N_TOKENS",
		"body": ["N_TOKENS"]},
	"OP from the token module": {
		"description": "OP from the token module",
		"prefix": "OP",
		"body": ["OP"]},
	"PERCENT from the token module": {
		"description": "PERCENT from the token module",
		"prefix": "PERCENT",
		"body": ["PERCENT"]},
	"PERCENTEQUAL from the token module": {
		"description": "PERCENTEQUAL from the token module",
		"prefix": "PERCENTEQUAL",
		"body": ["PERCENTEQUAL"]},
	"PLUS from the token module": {
		"description": "PLUS from the token module",
		"prefix": "PLUS",
		"body": ["PLUS"]},
	"PLUSEQUAL from the token module": {
		"description": "PLUSEQUAL from the token module",
		"prefix": "PLUSEQUAL",
		"body": ["PLUSEQUAL"]},
	"RARROW from the token module": {
		"description": "RARROW from the token module",
		"prefix": "RARROW",
		"body": ["RARROW"]},
	"RBRACE from the token module": {
		"description": "RBRACE from the token module",
		"prefix": "RBRACE",
		"body": ["RBRACE"]},
	"RIGHTSHIFT from the token module": {
		"description": "RIGHTSHIFT from the token module",
		"prefix": "RIGHTSHIFT",
		"body": ["RIGHTSHIFT"]},
	"RIGHTSHIFTEQUAL from the token module": {
		"description": "RIGHTSHIFTEQUAL from the token module",
		"prefix": "RIGHTSHIFTEQUAL",
		"body": ["RIGHTSHIFTEQUAL"]},
	"RPAR from the token module": {
		"description": "RPAR from the token module",
		"prefix": "RPAR",
		"body": ["RPAR"]},
	"RSQB from the token module": {
		"description": "RSQB from the token module",
		"prefix": "RSQB",
		"body": ["RSQB"]},
	"SEMI from the token module": {
		"description": "SEMI from the token module",
		"prefix": "SEMI",
		"body": ["SEMI"]},
	"SLASH from the token module": {
		"description": "SLASH from the token module",
		"prefix": "SLASH",
		"body": ["SLASH"]},
	"SLASHEQUAL from the token module": {
		"description": "SLASHEQUAL from the token module",
		"prefix": "SLASHEQUAL",
		"body": ["SLASHEQUAL"]},
	"STAR from the token module": {
		"description": "STAR from the token module",
		"prefix": "STAR",
		"body": ["STAR"]},
	"STAREQUAL from the token module": {
		"description": "STAREQUAL from the token module",
		"prefix": "STAREQUAL",
		"body": ["STAREQUAL"]},
	"STRING from the token module": {
		"description": "STRING from the token module",
		"prefix": "STRING",
		"body": ["STRING"]},
	"TILDE from the token module": {
		"description": "TILDE from the token module",
		"prefix": "TILDE",
		"body": ["TILDE"]},
	"VBAR from the token module": {
		"description": "VBAR from the token module",
		"prefix": "VBAR",
		"body": ["VBAR"]},
	"VBAREQUAL from the token module": {
		"description": "VBAREQUAL from the token module",
		"prefix": "VBAREQUAL",
		"body": ["VBAREQUAL"]},
	"tok_name() from the token module": {
		"description": "tok_name() from the token module",
		"prefix": "tok_name",
		"body": ["tok_name()"]},
// tokenize completion
	"COMMENT from the tokenize module": {
		"description": "COMMENT from the tokenize module",
		"prefix": "COMMENT",
		"body": ["COMMENT"]},
	"ENCODING from the tokenize module": {
		"description": "ENCODING from the tokenize module",
		"prefix": "ENCODING",
		"body": ["ENCODING"]},
	"NL from the tokenize module": {
		"description": "NL from the tokenize module",
		"prefix": "NL",
		"body": ["NL"]},
	"TokenError from the tokenize module": {
		"description": "TokenError from the tokenize module",
		"prefix": "TokenError",
		"body": ["TokenError"]},
	"detect_encoding() from the tokenize module": {
		"description": "detect_encoding() from the tokenize module",
		"prefix": "detect_encoding",
		"body": ["detect_encoding(${1:readline})"]},
	"open() from the tokenize module": {
		"description": "open() from the tokenize module",
		"prefix": "open",
		"body": ["open(${1:filename})"]},
	"tokenize() from the tokenize module": {
		"description": "tokenize() from the tokenize module",
		"prefix": "tokenize",
		"body": ["tokenize(${1:readline})"]},
	"untokenize() from the tokenize module": {
		"description": "untokenize() from the tokenize module",
		"prefix": "untokenize",
		"body": ["untokenize(${1:iterable})"]},
// trace completion
	"CoverageResults from the trace module": {
		"description": "CoverageResults from the trace module",
		"prefix": "CoverageResults",
		"body": ["CoverageResults"]},
	"Trace from the trace module": {
		"description": "Trace from the trace module",
		"prefix": "Trace",
		"body": ["Trace(${1:count=1,})"]},
// traceback completion
	"FrameSummary from the traceback module": {
		"description": "FrameSummary from the traceback module",
		"prefix": "FrameSummary",
		"body": ["FrameSummary(${1:filename}, ${2:lineno}, ${3:name}, ${4:lookup_line=True}, ${5:locals=None}, ${6:line=None})"]},
	"StackSummary from the traceback module": {
		"description": "StackSummary from the traceback module",
		"prefix": "StackSummary",
		"body": ["StackSummary"]},
	"TracebackException from the traceback module": {
		"description": "TracebackException from the traceback module",
		"prefix": "TracebackException",
		"body": ["TracebackException(${1:exc_type}, ${2:exc_value}, ${3:exc_traceback}, ${4:*}, ${5:limit=None}, ${6:lookup_lines=True}, ${7:capture_locals=False})"]},
	"clear_frames() from the traceback module": {
		"description": "clear_frames() from the traceback module",
		"prefix": "clear_frames",
		"body": ["clear_frames(${1:tb})"]},
	"extract_stack() from the traceback module": {
		"description": "extract_stack() from the traceback module",
		"prefix": "extract_stack",
		"body": ["extract_stack(${1:f=None}, ${2:limit=None})"]},
	"extract_tb() from the traceback module": {
		"description": "extract_tb() from the traceback module",
		"prefix": "extract_tb",
		"body": ["extract_tb(${1:tb}, ${2:limit=None})"]},
	"format_exc() from the traceback module": {
		"description": "format_exc() from the traceback module",
		"prefix": "format_exc",
		"body": ["format_exc(${1:limit=None}, ${2:chain=True})"]},
	"format_exception() from the traceback module": {
		"description": "format_exception() from the traceback module",
		"prefix": "format_exception",
		"body": ["format_exception(${1:etype}, ${2:value}, ${3:tb}, ${4:limit=None}, ${5:chain=True})"]},
	"format_exception_only() from the traceback module": {
		"description": "format_exception_only() from the traceback module",
		"prefix": "format_exception_only",
		"body": ["format_exception_only(${1:etype}, ${2:value})"]},
	"format_list() from the traceback module": {
		"description": "format_list() from the traceback module",
		"prefix": "format_list",
		"body": ["format_list(${1:extracted_list})"]},
	"format_stack() from the traceback module": {
		"description": "format_stack() from the traceback module",
		"prefix": "format_stack",
		"body": ["format_stack(${1:f=None}, ${2:limit=None})"]},
	"format_tb() from the traceback module": {
		"description": "format_tb() from the traceback module",
		"prefix": "format_tb",
		"body": ["format_tb(${1:tb}, ${2:limit=None})"]},
	"print_exc() from the traceback module": {
		"description": "print_exc() from the traceback module",
		"prefix": "print_exc",
		"body": ["print_exc(${1:limit=None}, ${2:file=None}, ${3:chain=True})"]},
	"print_exception() from the traceback module": {
		"description": "print_exception() from the traceback module",
		"prefix": "print_exception",
		"body": ["print_exception(${1:etype}, ${2:value}, ${3:tb}, ${4:limit=None}, ${5:file=None}, ${6:chain=True})"]},
	"print_last() from the traceback module": {
		"description": "print_last() from the traceback module",
		"prefix": "print_last",
		"body": ["print_last(${1:limit=None}, ${2:file=None}, ${3:chain=True})"]},
	"print_stack() from the traceback module": {
		"description": "print_stack() from the traceback module",
		"prefix": "print_stack",
		"body": ["print_stack(${1:f=None}, ${2:limit=None}, ${3:file=None})"]},
	"print_tb() from the traceback module": {
		"description": "print_tb() from the traceback module",
		"prefix": "print_tb",
		"body": ["print_tb(${1:tb}, ${2:limit=None}, ${3:file=None})"]},
	"walk_stack() from the traceback module": {
		"description": "walk_stack() from the traceback module",
		"prefix": "walk_stack",
		"body": ["walk_stack(${1:f})"]},
	"walk_tb() from the traceback module": {
		"description": "walk_tb() from the traceback module",
		"prefix": "walk_tb",
		"body": ["walk_tb(${1:tb})"]},
// tracemalloc completion
	"Filter from the tracemalloc module": {
		"description": "Filter from the tracemalloc module",
		"prefix": "Filter",
		"body": ["Filter(${1:inclusive: bool}, ${2:filename_pattern: str}, ${3:lineno: int=None}, ${4:all_frames: bool=False})"]},
	"Frame from the tracemalloc module": {
		"description": "Frame from the tracemalloc module",
		"prefix": "Frame",
		"body": ["Frame"]},
	"Snapshot from the tracemalloc module": {
		"description": "Snapshot from the tracemalloc module",
		"prefix": "Snapshot",
		"body": ["Snapshot"]},
	"Statistic from the tracemalloc module": {
		"description": "Statistic from the tracemalloc module",
		"prefix": "Statistic",
		"body": ["Statistic"]},
	"StatisticDiff from the tracemalloc module": {
		"description": "StatisticDiff from the tracemalloc module",
		"prefix": "StatisticDiff",
		"body": ["StatisticDiff"]},
	"Trace from the tracemalloc module": {
		"description": "Trace from the tracemalloc module",
		"prefix": "Trace",
		"body": ["Trace"]},
	"Traceback from the tracemalloc module": {
		"description": "Traceback from the tracemalloc module",
		"prefix": "Traceback",
		"body": ["Traceback"]},
	"clear_traces() from the tracemalloc module": {
		"description": "clear_traces() from the tracemalloc module",
		"prefix": "clear_traces",
		"body": ["clear_traces(${1:})"]},
	"get_object_traceback() from the tracemalloc module": {
		"description": "get_object_traceback() from the tracemalloc module",
		"prefix": "get_object_traceback",
		"body": ["get_object_traceback(${1:obj})"]},
	"get_traceback_limit() from the tracemalloc module": {
		"description": "get_traceback_limit() from the tracemalloc module",
		"prefix": "get_traceback_limit",
		"body": ["get_traceback_limit(${1:})"]},
	"get_traced_memory() from the tracemalloc module": {
		"description": "get_traced_memory() from the tracemalloc module",
		"prefix": "get_traced_memory",
		"body": ["get_traced_memory(${1:})"]},
	"get_tracemalloc_memory() from the tracemalloc module": {
		"description": "get_tracemalloc_memory() from the tracemalloc module",
		"prefix": "get_tracemalloc_memory",
		"body": ["get_tracemalloc_memory(${1:})"]},
	"is_tracing() from the tracemalloc module": {
		"description": "is_tracing() from the tracemalloc module",
		"prefix": "is_tracing",
		"body": ["is_tracing(${1:})"]},
	"start() from the tracemalloc module": {
		"description": "start() from the tracemalloc module",
		"prefix": "start",
		"body": ["start(${1:nframe: int=1})"]},
	"stop() from the tracemalloc module": {
		"description": "stop() from the tracemalloc module",
		"prefix": "stop",
		"body": ["stop(${1:})"]},
	"take_snapshot() from the tracemalloc module": {
		"description": "take_snapshot() from the tracemalloc module",
		"prefix": "take_snapshot",
		"body": ["take_snapshot(${1:})"]},
// tty completion
	"setcbreak() from the tty module": {
		"description": "setcbreak() from the tty module",
		"prefix": "setcbreak",
		"body": ["setcbreak(${1:fd}, ${2:when=termios.TCSAFLUSH})"]},
	"setraw() from the tty module": {
		"description": "setraw() from the tty module",
		"prefix": "setraw",
		"body": ["setraw(${1:fd,})"]},
// turtle completion
	"RawPen from the turtle module": {
		"description": "RawPen from the turtle module",
		"prefix": "RawPen",
		"body": ["RawPen(${1:canvas})"]},
	"RawTurtle from the turtle module": {
		"description": "RawTurtle from the turtle module",
		"prefix": "RawTurtle",
		"body": ["RawTurtle(${1:canvas})"]},
	"Screen from the turtle module": {
		"description": "Screen from the turtle module",
		"prefix": "Screen",
		"body": ["Screen"]},
	"ScrolledCanvas from the turtle module": {
		"description": "ScrolledCanvas from the turtle module",
		"prefix": "ScrolledCanvas",
		"body": ["ScrolledCanvas(${1:master})"]},
	"Shape from the turtle module": {
		"description": "Shape from the turtle module",
		"prefix": "Shape",
		"body": ["Shape(${1:type_}, ${2:data})"]},
	"Turtle from the turtle module": {
		"description": "Turtle from the turtle module",
		"prefix": "Turtle",
		"body": ["Turtle"]},
	"TurtleScreen from the turtle module": {
		"description": "TurtleScreen from the turtle module",
		"prefix": "TurtleScreen",
		"body": ["TurtleScreen(${1:cv})"]},
	"Vec2D from the turtle module": {
		"description": "Vec2D from the turtle module",
		"prefix": "Vec2D",
		"body": ["Vec2D(${1:x}, ${2:y})"]},
	"addshape() from the turtle module": {
		"description": "addshape() from the turtle module",
		"prefix": "addshape",
		"body": ["addshape(${1:name}, ${2:shape=None})"]},
	"back() from the turtle module": {
		"description": "back() from the turtle module",
		"prefix": "back",
		"body": ["back(${1:distance})"]},
	"backward() from the turtle module": {
		"description": "backward() from the turtle module",
		"prefix": "backward",
		"body": ["backward(${1:distance})"]},
	"begin_fill() from the turtle module": {
		"description": "begin_fill() from the turtle module",
		"prefix": "begin_fill",
		"body": ["begin_fill(${1:})"]},
	"begin_poly() from the turtle module": {
		"description": "begin_poly() from the turtle module",
		"prefix": "begin_poly",
		"body": ["begin_poly(${1:})"]},
	"bgcolor() from the turtle module": {
		"description": "bgcolor() from the turtle module",
		"prefix": "bgcolor",
		"body": ["bgcolor(${1:*args})"]},
	"bgpic() from the turtle module": {
		"description": "bgpic() from the turtle module",
		"prefix": "bgpic",
		"body": ["bgpic(${1:picname=None})"]},
	"bk() from the turtle module": {
		"description": "bk() from the turtle module",
		"prefix": "bk",
		"body": ["bk(${1:distance})"]},
	"bye() from the turtle module": {
		"description": "bye() from the turtle module",
		"prefix": "bye",
		"body": ["bye(${1:})"]},
	"circle() from the turtle module": {
		"description": "circle() from the turtle module",
		"prefix": "circle",
		"body": ["circle(${1:radius}, ${2:extent=None}, ${3:steps=None})"]},
	"clear() from the turtle module": {
		"description": "clear() from the turtle module",
		"prefix": "clear",
		"body": ["clear(${1:})"]},
	"clearstamp() from the turtle module": {
		"description": "clearstamp() from the turtle module",
		"prefix": "clearstamp",
		"body": ["clearstamp(${1:stampid})"]},
	"clearstamps() from the turtle module": {
		"description": "clearstamps() from the turtle module",
		"prefix": "clearstamps",
		"body": ["clearstamps(${1:n=None})"]},
	"clone() from the turtle module": {
		"description": "clone() from the turtle module",
		"prefix": "clone",
		"body": ["clone(${1:})"]},
	"color() from the turtle module": {
		"description": "color() from the turtle module",
		"prefix": "color",
		"body": ["color(${1:*args})"]},
	"colormode() from the turtle module": {
		"description": "colormode() from the turtle module",
		"prefix": "colormode",
		"body": ["colormode(${1:cmode=None})"]},
	"degrees() from the turtle module": {
		"description": "degrees() from the turtle module",
		"prefix": "degrees",
		"body": ["degrees(${1:fullcircle=360.0})"]},
	"delay() from the turtle module": {
		"description": "delay() from the turtle module",
		"prefix": "delay",
		"body": ["delay(${1:delay=None})"]},
	"distance() from the turtle module": {
		"description": "distance() from the turtle module",
		"prefix": "distance",
		"body": ["distance(${1:x}, ${2:y=None})"]},
	"done() from the turtle module": {
		"description": "done() from the turtle module",
		"prefix": "done",
		"body": ["done(${1:})"]},
	"dot() from the turtle module": {
		"description": "dot() from the turtle module",
		"prefix": "dot",
		"body": ["dot(${1:size=None}, ${2:*color})"]},
	"down() from the turtle module": {
		"description": "down() from the turtle module",
		"prefix": "down",
		"body": ["down(${1:})"]},
	"end_fill() from the turtle module": {
		"description": "end_fill() from the turtle module",
		"prefix": "end_fill",
		"body": ["end_fill(${1:})"]},
	"end_poly() from the turtle module": {
		"description": "end_poly() from the turtle module",
		"prefix": "end_poly",
		"body": ["end_poly(${1:})"]},
	"exitonclick() from the turtle module": {
		"description": "exitonclick() from the turtle module",
		"prefix": "exitonclick",
		"body": ["exitonclick(${1:})"]},
	"fd() from the turtle module": {
		"description": "fd() from the turtle module",
		"prefix": "fd",
		"body": ["fd(${1:distance})"]},
	"fillcolor() from the turtle module": {
		"description": "fillcolor() from the turtle module",
		"prefix": "fillcolor",
		"body": ["fillcolor(${1:*args})"]},
	"filling() from the turtle module": {
		"description": "filling() from the turtle module",
		"prefix": "filling",
		"body": ["filling(${1:})"]},
	"forward() from the turtle module": {
		"description": "forward() from the turtle module",
		"prefix": "forward",
		"body": ["forward(${1:distance})"]},
	"get_poly() from the turtle module": {
		"description": "get_poly() from the turtle module",
		"prefix": "get_poly",
		"body": ["get_poly(${1:})"]},
	"get_shapepoly() from the turtle module": {
		"description": "get_shapepoly() from the turtle module",
		"prefix": "get_shapepoly",
		"body": ["get_shapepoly(${1:})"]},
	"getcanvas() from the turtle module": {
		"description": "getcanvas() from the turtle module",
		"prefix": "getcanvas",
		"body": ["getcanvas(${1:})"]},
	"getpen() from the turtle module": {
		"description": "getpen() from the turtle module",
		"prefix": "getpen",
		"body": ["getpen(${1:})"]},
	"getscreen() from the turtle module": {
		"description": "getscreen() from the turtle module",
		"prefix": "getscreen",
		"body": ["getscreen(${1:})"]},
	"getshapes() from the turtle module": {
		"description": "getshapes() from the turtle module",
		"prefix": "getshapes",
		"body": ["getshapes(${1:})"]},
	"getturtle() from the turtle module": {
		"description": "getturtle() from the turtle module",
		"prefix": "getturtle",
		"body": ["getturtle(${1:})"]},
	"goto() from the turtle module": {
		"description": "goto() from the turtle module",
		"prefix": "goto",
		"body": ["goto(${1:x}, ${2:y=None})"]},
	"heading() from the turtle module": {
		"description": "heading() from the turtle module",
		"prefix": "heading",
		"body": ["heading(${1:})"]},
	"hideturtle() from the turtle module": {
		"description": "hideturtle() from the turtle module",
		"prefix": "hideturtle",
		"body": ["hideturtle(${1:})"]},
	"home() from the turtle module": {
		"description": "home() from the turtle module",
		"prefix": "home",
		"body": ["home(${1:})"]},
	"ht() from the turtle module": {
		"description": "ht() from the turtle module",
		"prefix": "ht",
		"body": ["ht(${1:})"]},
	"isdown() from the turtle module": {
		"description": "isdown() from the turtle module",
		"prefix": "isdown",
		"body": ["isdown(${1:})"]},
	"isvisible() from the turtle module": {
		"description": "isvisible() from the turtle module",
		"prefix": "isvisible",
		"body": ["isvisible(${1:})"]},
	"left() from the turtle module": {
		"description": "left() from the turtle module",
		"prefix": "left",
		"body": ["left(${1:angle})"]},
	"listen() from the turtle module": {
		"description": "listen() from the turtle module",
		"prefix": "listen",
		"body": ["listen(${1:xdummy=None}, ${2:ydummy=None})"]},
	"lt() from the turtle module": {
		"description": "lt() from the turtle module",
		"prefix": "lt",
		"body": ["lt(${1:angle})"]},
	"mainloop() from the turtle module": {
		"description": "mainloop() from the turtle module",
		"prefix": "mainloop",
		"body": ["mainloop(${1:})"]},
	"mode() from the turtle module": {
		"description": "mode() from the turtle module",
		"prefix": "mode",
		"body": ["mode(${1:mode=None})"]},
	"numinput() from the turtle module": {
		"description": "numinput() from the turtle module",
		"prefix": "numinput",
		"body": ["numinput(${1:title}, ${2:prompt}, ${3:default=None}, ${4:minval=None}, ${5:maxval=None})"]},
	"onclick() from the turtle module": {
		"description": "onclick() from the turtle module",
		"prefix": "onclick",
		"body": ["onclick(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"ondrag() from the turtle module": {
		"description": "ondrag() from the turtle module",
		"prefix": "ondrag",
		"body": ["ondrag(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"onkey() from the turtle module": {
		"description": "onkey() from the turtle module",
		"prefix": "onkey",
		"body": ["onkey(${1:fun}, ${2:key})"]},
	"onkeypress() from the turtle module": {
		"description": "onkeypress() from the turtle module",
		"prefix": "onkeypress",
		"body": ["onkeypress(${1:fun}, ${2:key=None})"]},
	"onkeyrelease() from the turtle module": {
		"description": "onkeyrelease() from the turtle module",
		"prefix": "onkeyrelease",
		"body": ["onkeyrelease(${1:fun}, ${2:key})"]},
	"onrelease() from the turtle module": {
		"description": "onrelease() from the turtle module",
		"prefix": "onrelease",
		"body": ["onrelease(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"ontimer() from the turtle module": {
		"description": "ontimer() from the turtle module",
		"prefix": "ontimer",
		"body": ["ontimer(${1:fun}, ${2:t=0})"]},
	"pd() from the turtle module": {
		"description": "pd() from the turtle module",
		"prefix": "pd",
		"body": ["pd(${1:})"]},
	"pen() from the turtle module": {
		"description": "pen() from the turtle module",
		"prefix": "pen",
		"body": ["pen(${1:pen=None}, ${2:**pendict})"]},
	"pencolor() from the turtle module": {
		"description": "pencolor() from the turtle module",
		"prefix": "pencolor",
		"body": ["pencolor(${1:*args})"]},
	"pendown() from the turtle module": {
		"description": "pendown() from the turtle module",
		"prefix": "pendown",
		"body": ["pendown(${1:})"]},
	"pensize() from the turtle module": {
		"description": "pensize() from the turtle module",
		"prefix": "pensize",
		"body": ["pensize(${1:width=None})"]},
	"penup() from the turtle module": {
		"description": "penup() from the turtle module",
		"prefix": "penup",
		"body": ["penup(${1:})"]},
	"pos() from the turtle module": {
		"description": "pos() from the turtle module",
		"prefix": "pos",
		"body": ["pos(${1:})"]},
	"position() from the turtle module": {
		"description": "position() from the turtle module",
		"prefix": "position",
		"body": ["position(${1:})"]},
	"pu() from the turtle module": {
		"description": "pu() from the turtle module",
		"prefix": "pu",
		"body": ["pu(${1:})"]},
	"radians() from the turtle module": {
		"description": "radians() from the turtle module",
		"prefix": "radians",
		"body": ["radians(${1:})"]},
	"register_shape() from the turtle module": {
		"description": "register_shape() from the turtle module",
		"prefix": "register_shape",
		"body": ["register_shape(${1:name}, ${2:shape=None})"]},
	"reset() from the turtle module": {
		"description": "reset() from the turtle module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"resizemode() from the turtle module": {
		"description": "resizemode() from the turtle module",
		"prefix": "resizemode",
		"body": ["resizemode(${1:rmode=None})"]},
	"right() from the turtle module": {
		"description": "right() from the turtle module",
		"prefix": "right",
		"body": ["right(${1:angle})"]},
	"rt() from the turtle module": {
		"description": "rt() from the turtle module",
		"prefix": "rt",
		"body": ["rt(${1:angle})"]},
	"screensize() from the turtle module": {
		"description": "screensize() from the turtle module",
		"prefix": "screensize",
		"body": ["screensize(${1:canvwidth=None}, ${2:canvheight=None}, ${3:bg=None})"]},
	"seth() from the turtle module": {
		"description": "seth() from the turtle module",
		"prefix": "seth",
		"body": ["seth(${1:to_angle})"]},
	"setheading() from the turtle module": {
		"description": "setheading() from the turtle module",
		"prefix": "setheading",
		"body": ["setheading(${1:to_angle})"]},
	"setpos() from the turtle module": {
		"description": "setpos() from the turtle module",
		"prefix": "setpos",
		"body": ["setpos(${1:x}, ${2:y=None})"]},
	"setposition() from the turtle module": {
		"description": "setposition() from the turtle module",
		"prefix": "setposition",
		"body": ["setposition(${1:x}, ${2:y=None})"]},
	"settiltangle() from the turtle module": {
		"description": "settiltangle() from the turtle module",
		"prefix": "settiltangle",
		"body": ["settiltangle(${1:angle})"]},
	"setundobuffer() from the turtle module": {
		"description": "setundobuffer() from the turtle module",
		"prefix": "setundobuffer",
		"body": ["setundobuffer(${1:size})"]},
	"setup() from the turtle module": {
		"description": "setup() from the turtle module",
		"prefix": "setup",
		"body": ["setup(${1:width=_CFG[\"width\"]}, ${2:height=_CFG[\"height\"]}, ${3:startx=_CFG[\"leftright\"]}, ${4:starty=_CFG[\"topbottom\"]})"]},
	"setworldcoordinates() from the turtle module": {
		"description": "setworldcoordinates() from the turtle module",
		"prefix": "setworldcoordinates",
		"body": ["setworldcoordinates(${1:llx}, ${2:lly}, ${3:urx}, ${4:ury})"]},
	"setx() from the turtle module": {
		"description": "setx() from the turtle module",
		"prefix": "setx",
		"body": ["setx(${1:x})"]},
	"sety() from the turtle module": {
		"description": "sety() from the turtle module",
		"prefix": "sety",
		"body": ["sety(${1:y})"]},
	"shape() from the turtle module": {
		"description": "shape() from the turtle module",
		"prefix": "shape",
		"body": ["shape(${1:name=None})"]},
	"shapesize() from the turtle module": {
		"description": "shapesize() from the turtle module",
		"prefix": "shapesize",
		"body": ["shapesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})"]},
	"shapetransform() from the turtle module": {
		"description": "shapetransform() from the turtle module",
		"prefix": "shapetransform",
		"body": ["shapetransform(${1:t11=None}, ${2:t12=None}, ${3:t21=None}, ${4:t22=None})"]},
	"shearfactor() from the turtle module": {
		"description": "shearfactor() from the turtle module",
		"prefix": "shearfactor",
		"body": ["shearfactor(${1:shear=None})"]},
	"showturtle() from the turtle module": {
		"description": "showturtle() from the turtle module",
		"prefix": "showturtle",
		"body": ["showturtle(${1:})"]},
	"speed() from the turtle module": {
		"description": "speed() from the turtle module",
		"prefix": "speed",
		"body": ["speed(${1:speed=None})"]},
	"st() from the turtle module": {
		"description": "st() from the turtle module",
		"prefix": "st",
		"body": ["st(${1:})"]},
	"stamp() from the turtle module": {
		"description": "stamp() from the turtle module",
		"prefix": "stamp",
		"body": ["stamp(${1:})"]},
	"textinput() from the turtle module": {
		"description": "textinput() from the turtle module",
		"prefix": "textinput",
		"body": ["textinput(${1:title}, ${2:prompt})"]},
	"tilt() from the turtle module": {
		"description": "tilt() from the turtle module",
		"prefix": "tilt",
		"body": ["tilt(${1:angle})"]},
	"tiltangle() from the turtle module": {
		"description": "tiltangle() from the turtle module",
		"prefix": "tiltangle",
		"body": ["tiltangle(${1:angle=None})"]},
	"title() from the turtle module": {
		"description": "title() from the turtle module",
		"prefix": "title",
		"body": ["title(${1:titlestring})"]},
	"towards() from the turtle module": {
		"description": "towards() from the turtle module",
		"prefix": "towards",
		"body": ["towards(${1:x}, ${2:y=None})"]},
	"tracer() from the turtle module": {
		"description": "tracer() from the turtle module",
		"prefix": "tracer",
		"body": ["tracer(${1:n=None}, ${2:delay=None})"]},
	"turtles() from the turtle module": {
		"description": "turtles() from the turtle module",
		"prefix": "turtles",
		"body": ["turtles(${1:})"]},
	"turtlesize() from the turtle module": {
		"description": "turtlesize() from the turtle module",
		"prefix": "turtlesize",
		"body": ["turtlesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})"]},
	"undo() from the turtle module": {
		"description": "undo() from the turtle module",
		"prefix": "undo",
		"body": ["undo(${1:})"]},
	"undobufferentries() from the turtle module": {
		"description": "undobufferentries() from the turtle module",
		"prefix": "undobufferentries",
		"body": ["undobufferentries(${1:})"]},
	"up() from the turtle module": {
		"description": "up() from the turtle module",
		"prefix": "up",
		"body": ["up(${1:})"]},
	"update() from the turtle module": {
		"description": "update() from the turtle module",
		"prefix": "update",
		"body": ["update(${1:})"]},
	"width() from the turtle module": {
		"description": "width() from the turtle module",
		"prefix": "width",
		"body": ["width(${1:width=None})"]},
	"window_height() from the turtle module": {
		"description": "window_height() from the turtle module",
		"prefix": "window_height",
		"body": ["window_height(${1:})"]},
	"window_width() from the turtle module": {
		"description": "window_width() from the turtle module",
		"prefix": "window_width",
		"body": ["window_width(${1:})"]},
	"write() from the turtle module": {
		"description": "write() from the turtle module",
		"prefix": "write",
		"body": ["write(${1:arg}, ${2:move=False}, ${3:align=\"left\"}, ${4:font=}, ${5:\"Arial\"}, ${6:8}, ${7:\"normal\"})"]},
	"write_docstringdict() from the turtle module": {
		"description": "write_docstringdict() from the turtle module",
		"prefix": "write_docstringdict",
		"body": ["write_docstringdict(${1:filename=\"turtle_docstringdict\"})"]},
	"xcor() from the turtle module": {
		"description": "xcor() from the turtle module",
		"prefix": "xcor",
		"body": ["xcor(${1:})"]},
	"ycor() from the turtle module": {
		"description": "ycor() from the turtle module",
		"prefix": "ycor",
		"body": ["ycor(${1:})"]},
// turtledemo completion
	"RawPen from the turtledemo module": {
		"description": "RawPen from the turtledemo module",
		"prefix": "RawPen",
		"body": ["RawPen(${1:canvas})"]},
	"RawTurtle from the turtledemo module": {
		"description": "RawTurtle from the turtledemo module",
		"prefix": "RawTurtle",
		"body": ["RawTurtle(${1:canvas})"]},
	"Screen from the turtledemo module": {
		"description": "Screen from the turtledemo module",
		"prefix": "Screen",
		"body": ["Screen"]},
	"ScrolledCanvas from the turtledemo module": {
		"description": "ScrolledCanvas from the turtledemo module",
		"prefix": "ScrolledCanvas",
		"body": ["ScrolledCanvas(${1:master})"]},
	"Shape from the turtledemo module": {
		"description": "Shape from the turtledemo module",
		"prefix": "Shape",
		"body": ["Shape(${1:type_}, ${2:data})"]},
	"Turtle from the turtledemo module": {
		"description": "Turtle from the turtledemo module",
		"prefix": "Turtle",
		"body": ["Turtle"]},
	"TurtleScreen from the turtledemo module": {
		"description": "TurtleScreen from the turtledemo module",
		"prefix": "TurtleScreen",
		"body": ["TurtleScreen(${1:cv})"]},
	"Vec2D from the turtledemo module": {
		"description": "Vec2D from the turtledemo module",
		"prefix": "Vec2D",
		"body": ["Vec2D(${1:x}, ${2:y})"]},
	"addshape() from the turtledemo module": {
		"description": "addshape() from the turtledemo module",
		"prefix": "addshape",
		"body": ["addshape(${1:name}, ${2:shape=None})"]},
	"back() from the turtledemo module": {
		"description": "back() from the turtledemo module",
		"prefix": "back",
		"body": ["back(${1:distance})"]},
	"backward() from the turtledemo module": {
		"description": "backward() from the turtledemo module",
		"prefix": "backward",
		"body": ["backward(${1:distance})"]},
	"begin_fill() from the turtledemo module": {
		"description": "begin_fill() from the turtledemo module",
		"prefix": "begin_fill",
		"body": ["begin_fill(${1:})"]},
	"begin_poly() from the turtledemo module": {
		"description": "begin_poly() from the turtledemo module",
		"prefix": "begin_poly",
		"body": ["begin_poly(${1:})"]},
	"bgcolor() from the turtledemo module": {
		"description": "bgcolor() from the turtledemo module",
		"prefix": "bgcolor",
		"body": ["bgcolor(${1:*args})"]},
	"bgpic() from the turtledemo module": {
		"description": "bgpic() from the turtledemo module",
		"prefix": "bgpic",
		"body": ["bgpic(${1:picname=None})"]},
	"bk() from the turtledemo module": {
		"description": "bk() from the turtledemo module",
		"prefix": "bk",
		"body": ["bk(${1:distance})"]},
	"bye() from the turtledemo module": {
		"description": "bye() from the turtledemo module",
		"prefix": "bye",
		"body": ["bye(${1:})"]},
	"circle() from the turtledemo module": {
		"description": "circle() from the turtledemo module",
		"prefix": "circle",
		"body": ["circle(${1:radius}, ${2:extent=None}, ${3:steps=None})"]},
	"clear() from the turtledemo module": {
		"description": "clear() from the turtledemo module",
		"prefix": "clear",
		"body": ["clear(${1:})"]},
	"clear() from the turtledemo module": {
		"description": "clear() from the turtledemo module",
		"prefix": "clear",
		"body": ["clear(${1:})"]},
	"clearstamp() from the turtledemo module": {
		"description": "clearstamp() from the turtledemo module",
		"prefix": "clearstamp",
		"body": ["clearstamp(${1:stampid})"]},
	"clearstamps() from the turtledemo module": {
		"description": "clearstamps() from the turtledemo module",
		"prefix": "clearstamps",
		"body": ["clearstamps(${1:n=None})"]},
	"clone() from the turtledemo module": {
		"description": "clone() from the turtledemo module",
		"prefix": "clone",
		"body": ["clone(${1:})"]},
	"color() from the turtledemo module": {
		"description": "color() from the turtledemo module",
		"prefix": "color",
		"body": ["color(${1:*args})"]},
	"colormode() from the turtledemo module": {
		"description": "colormode() from the turtledemo module",
		"prefix": "colormode",
		"body": ["colormode(${1:cmode=None})"]},
	"degrees() from the turtledemo module": {
		"description": "degrees() from the turtledemo module",
		"prefix": "degrees",
		"body": ["degrees(${1:fullcircle=360.0})"]},
	"delay() from the turtledemo module": {
		"description": "delay() from the turtledemo module",
		"prefix": "delay",
		"body": ["delay(${1:delay=None})"]},
	"distance() from the turtledemo module": {
		"description": "distance() from the turtledemo module",
		"prefix": "distance",
		"body": ["distance(${1:x}, ${2:y=None})"]},
	"done() from the turtledemo module": {
		"description": "done() from the turtledemo module",
		"prefix": "done",
		"body": ["done(${1:})"]},
	"dot() from the turtledemo module": {
		"description": "dot() from the turtledemo module",
		"prefix": "dot",
		"body": ["dot(${1:size=None}, ${2:*color})"]},
	"down() from the turtledemo module": {
		"description": "down() from the turtledemo module",
		"prefix": "down",
		"body": ["down(${1:})"]},
	"end_fill() from the turtledemo module": {
		"description": "end_fill() from the turtledemo module",
		"prefix": "end_fill",
		"body": ["end_fill(${1:})"]},
	"end_poly() from the turtledemo module": {
		"description": "end_poly() from the turtledemo module",
		"prefix": "end_poly",
		"body": ["end_poly(${1:})"]},
	"exitonclick() from the turtledemo module": {
		"description": "exitonclick() from the turtledemo module",
		"prefix": "exitonclick",
		"body": ["exitonclick(${1:})"]},
	"fd() from the turtledemo module": {
		"description": "fd() from the turtledemo module",
		"prefix": "fd",
		"body": ["fd(${1:distance})"]},
	"fillcolor() from the turtledemo module": {
		"description": "fillcolor() from the turtledemo module",
		"prefix": "fillcolor",
		"body": ["fillcolor(${1:*args})"]},
	"filling() from the turtledemo module": {
		"description": "filling() from the turtledemo module",
		"prefix": "filling",
		"body": ["filling(${1:})"]},
	"forward() from the turtledemo module": {
		"description": "forward() from the turtledemo module",
		"prefix": "forward",
		"body": ["forward(${1:distance})"]},
	"get_poly() from the turtledemo module": {
		"description": "get_poly() from the turtledemo module",
		"prefix": "get_poly",
		"body": ["get_poly(${1:})"]},
	"get_shapepoly() from the turtledemo module": {
		"description": "get_shapepoly() from the turtledemo module",
		"prefix": "get_shapepoly",
		"body": ["get_shapepoly(${1:})"]},
	"getcanvas() from the turtledemo module": {
		"description": "getcanvas() from the turtledemo module",
		"prefix": "getcanvas",
		"body": ["getcanvas(${1:})"]},
	"getpen() from the turtledemo module": {
		"description": "getpen() from the turtledemo module",
		"prefix": "getpen",
		"body": ["getpen(${1:})"]},
	"getscreen() from the turtledemo module": {
		"description": "getscreen() from the turtledemo module",
		"prefix": "getscreen",
		"body": ["getscreen(${1:})"]},
	"getshapes() from the turtledemo module": {
		"description": "getshapes() from the turtledemo module",
		"prefix": "getshapes",
		"body": ["getshapes(${1:})"]},
	"getturtle() from the turtledemo module": {
		"description": "getturtle() from the turtledemo module",
		"prefix": "getturtle",
		"body": ["getturtle(${1:})"]},
	"goto() from the turtledemo module": {
		"description": "goto() from the turtledemo module",
		"prefix": "goto",
		"body": ["goto(${1:x}, ${2:y=None})"]},
	"heading() from the turtledemo module": {
		"description": "heading() from the turtledemo module",
		"prefix": "heading",
		"body": ["heading(${1:})"]},
	"hideturtle() from the turtledemo module": {
		"description": "hideturtle() from the turtledemo module",
		"prefix": "hideturtle",
		"body": ["hideturtle(${1:})"]},
	"home() from the turtledemo module": {
		"description": "home() from the turtledemo module",
		"prefix": "home",
		"body": ["home(${1:})"]},
	"ht() from the turtledemo module": {
		"description": "ht() from the turtledemo module",
		"prefix": "ht",
		"body": ["ht(${1:})"]},
	"isdown() from the turtledemo module": {
		"description": "isdown() from the turtledemo module",
		"prefix": "isdown",
		"body": ["isdown(${1:})"]},
	"isvisible() from the turtledemo module": {
		"description": "isvisible() from the turtledemo module",
		"prefix": "isvisible",
		"body": ["isvisible(${1:})"]},
	"left() from the turtledemo module": {
		"description": "left() from the turtledemo module",
		"prefix": "left",
		"body": ["left(${1:angle})"]},
	"listen() from the turtledemo module": {
		"description": "listen() from the turtledemo module",
		"prefix": "listen",
		"body": ["listen(${1:xdummy=None}, ${2:ydummy=None})"]},
	"lt() from the turtledemo module": {
		"description": "lt() from the turtledemo module",
		"prefix": "lt",
		"body": ["lt(${1:angle})"]},
	"mainloop() from the turtledemo module": {
		"description": "mainloop() from the turtledemo module",
		"prefix": "mainloop",
		"body": ["mainloop(${1:})"]},
	"mode() from the turtledemo module": {
		"description": "mode() from the turtledemo module",
		"prefix": "mode",
		"body": ["mode(${1:mode=None})"]},
	"numinput() from the turtledemo module": {
		"description": "numinput() from the turtledemo module",
		"prefix": "numinput",
		"body": ["numinput(${1:title}, ${2:prompt}, ${3:default=None}, ${4:minval=None}, ${5:maxval=None})"]},
	"onclick() from the turtledemo module": {
		"description": "onclick() from the turtledemo module",
		"prefix": "onclick",
		"body": ["onclick(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"onclick() from the turtledemo module": {
		"description": "onclick() from the turtledemo module",
		"prefix": "onclick",
		"body": ["onclick(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"ondrag() from the turtledemo module": {
		"description": "ondrag() from the turtledemo module",
		"prefix": "ondrag",
		"body": ["ondrag(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"onkey() from the turtledemo module": {
		"description": "onkey() from the turtledemo module",
		"prefix": "onkey",
		"body": ["onkey(${1:fun}, ${2:key})"]},
	"onkeypress() from the turtledemo module": {
		"description": "onkeypress() from the turtledemo module",
		"prefix": "onkeypress",
		"body": ["onkeypress(${1:fun}, ${2:key=None})"]},
	"onkeyrelease() from the turtledemo module": {
		"description": "onkeyrelease() from the turtledemo module",
		"prefix": "onkeyrelease",
		"body": ["onkeyrelease(${1:fun}, ${2:key})"]},
	"onrelease() from the turtledemo module": {
		"description": "onrelease() from the turtledemo module",
		"prefix": "onrelease",
		"body": ["onrelease(${1:fun}, ${2:btn=1}, ${3:add=None})"]},
	"ontimer() from the turtledemo module": {
		"description": "ontimer() from the turtledemo module",
		"prefix": "ontimer",
		"body": ["ontimer(${1:fun}, ${2:t=0})"]},
	"pd() from the turtledemo module": {
		"description": "pd() from the turtledemo module",
		"prefix": "pd",
		"body": ["pd(${1:})"]},
	"pen() from the turtledemo module": {
		"description": "pen() from the turtledemo module",
		"prefix": "pen",
		"body": ["pen(${1:pen=None}, ${2:**pendict})"]},
	"pencolor() from the turtledemo module": {
		"description": "pencolor() from the turtledemo module",
		"prefix": "pencolor",
		"body": ["pencolor(${1:*args})"]},
	"pendown() from the turtledemo module": {
		"description": "pendown() from the turtledemo module",
		"prefix": "pendown",
		"body": ["pendown(${1:})"]},
	"pensize() from the turtledemo module": {
		"description": "pensize() from the turtledemo module",
		"prefix": "pensize",
		"body": ["pensize(${1:width=None})"]},
	"penup() from the turtledemo module": {
		"description": "penup() from the turtledemo module",
		"prefix": "penup",
		"body": ["penup(${1:})"]},
	"pos() from the turtledemo module": {
		"description": "pos() from the turtledemo module",
		"prefix": "pos",
		"body": ["pos(${1:})"]},
	"position() from the turtledemo module": {
		"description": "position() from the turtledemo module",
		"prefix": "position",
		"body": ["position(${1:})"]},
	"pu() from the turtledemo module": {
		"description": "pu() from the turtledemo module",
		"prefix": "pu",
		"body": ["pu(${1:})"]},
	"radians() from the turtledemo module": {
		"description": "radians() from the turtledemo module",
		"prefix": "radians",
		"body": ["radians(${1:})"]},
	"register_shape() from the turtledemo module": {
		"description": "register_shape() from the turtledemo module",
		"prefix": "register_shape",
		"body": ["register_shape(${1:name}, ${2:shape=None})"]},
	"reset() from the turtledemo module": {
		"description": "reset() from the turtledemo module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"reset() from the turtledemo module": {
		"description": "reset() from the turtledemo module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"resizemode() from the turtledemo module": {
		"description": "resizemode() from the turtledemo module",
		"prefix": "resizemode",
		"body": ["resizemode(${1:rmode=None})"]},
	"right() from the turtledemo module": {
		"description": "right() from the turtledemo module",
		"prefix": "right",
		"body": ["right(${1:angle})"]},
	"rt() from the turtledemo module": {
		"description": "rt() from the turtledemo module",
		"prefix": "rt",
		"body": ["rt(${1:angle})"]},
	"screensize() from the turtledemo module": {
		"description": "screensize() from the turtledemo module",
		"prefix": "screensize",
		"body": ["screensize(${1:canvwidth=None}, ${2:canvheight=None}, ${3:bg=None})"]},
	"seth() from the turtledemo module": {
		"description": "seth() from the turtledemo module",
		"prefix": "seth",
		"body": ["seth(${1:to_angle})"]},
	"setheading() from the turtledemo module": {
		"description": "setheading() from the turtledemo module",
		"prefix": "setheading",
		"body": ["setheading(${1:to_angle})"]},
	"setpos() from the turtledemo module": {
		"description": "setpos() from the turtledemo module",
		"prefix": "setpos",
		"body": ["setpos(${1:x}, ${2:y=None})"]},
	"setposition() from the turtledemo module": {
		"description": "setposition() from the turtledemo module",
		"prefix": "setposition",
		"body": ["setposition(${1:x}, ${2:y=None})"]},
	"settiltangle() from the turtledemo module": {
		"description": "settiltangle() from the turtledemo module",
		"prefix": "settiltangle",
		"body": ["settiltangle(${1:angle})"]},
	"setundobuffer() from the turtledemo module": {
		"description": "setundobuffer() from the turtledemo module",
		"prefix": "setundobuffer",
		"body": ["setundobuffer(${1:size})"]},
	"setup() from the turtledemo module": {
		"description": "setup() from the turtledemo module",
		"prefix": "setup",
		"body": ["setup(${1:width=_CFG[\"width\"]}, ${2:height=_CFG[\"height\"]}, ${3:startx=_CFG[\"leftright\"]}, ${4:starty=_CFG[\"topbottom\"]})"]},
	"setworldcoordinates() from the turtledemo module": {
		"description": "setworldcoordinates() from the turtledemo module",
		"prefix": "setworldcoordinates",
		"body": ["setworldcoordinates(${1:llx}, ${2:lly}, ${3:urx}, ${4:ury})"]},
	"setx() from the turtledemo module": {
		"description": "setx() from the turtledemo module",
		"prefix": "setx",
		"body": ["setx(${1:x})"]},
	"sety() from the turtledemo module": {
		"description": "sety() from the turtledemo module",
		"prefix": "sety",
		"body": ["sety(${1:y})"]},
	"shape() from the turtledemo module": {
		"description": "shape() from the turtledemo module",
		"prefix": "shape",
		"body": ["shape(${1:name=None})"]},
	"shapesize() from the turtledemo module": {
		"description": "shapesize() from the turtledemo module",
		"prefix": "shapesize",
		"body": ["shapesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})"]},
	"shapetransform() from the turtledemo module": {
		"description": "shapetransform() from the turtledemo module",
		"prefix": "shapetransform",
		"body": ["shapetransform(${1:t11=None}, ${2:t12=None}, ${3:t21=None}, ${4:t22=None})"]},
	"shearfactor() from the turtledemo module": {
		"description": "shearfactor() from the turtledemo module",
		"prefix": "shearfactor",
		"body": ["shearfactor(${1:shear=None})"]},
	"showturtle() from the turtledemo module": {
		"description": "showturtle() from the turtledemo module",
		"prefix": "showturtle",
		"body": ["showturtle(${1:})"]},
	"speed() from the turtledemo module": {
		"description": "speed() from the turtledemo module",
		"prefix": "speed",
		"body": ["speed(${1:speed=None})"]},
	"st() from the turtledemo module": {
		"description": "st() from the turtledemo module",
		"prefix": "st",
		"body": ["st(${1:})"]},
	"stamp() from the turtledemo module": {
		"description": "stamp() from the turtledemo module",
		"prefix": "stamp",
		"body": ["stamp(${1:})"]},
	"textinput() from the turtledemo module": {
		"description": "textinput() from the turtledemo module",
		"prefix": "textinput",
		"body": ["textinput(${1:title}, ${2:prompt})"]},
	"tilt() from the turtledemo module": {
		"description": "tilt() from the turtledemo module",
		"prefix": "tilt",
		"body": ["tilt(${1:angle})"]},
	"tiltangle() from the turtledemo module": {
		"description": "tiltangle() from the turtledemo module",
		"prefix": "tiltangle",
		"body": ["tiltangle(${1:angle=None})"]},
	"title() from the turtledemo module": {
		"description": "title() from the turtledemo module",
		"prefix": "title",
		"body": ["title(${1:titlestring})"]},
	"towards() from the turtledemo module": {
		"description": "towards() from the turtledemo module",
		"prefix": "towards",
		"body": ["towards(${1:x}, ${2:y=None})"]},
	"tracer() from the turtledemo module": {
		"description": "tracer() from the turtledemo module",
		"prefix": "tracer",
		"body": ["tracer(${1:n=None}, ${2:delay=None})"]},
	"turtles() from the turtledemo module": {
		"description": "turtles() from the turtledemo module",
		"prefix": "turtles",
		"body": ["turtles(${1:})"]},
	"turtlesize() from the turtledemo module": {
		"description": "turtlesize() from the turtledemo module",
		"prefix": "turtlesize",
		"body": ["turtlesize(${1:stretch_wid=None}, ${2:stretch_len=None}, ${3:outline=None})"]},
	"undo() from the turtledemo module": {
		"description": "undo() from the turtledemo module",
		"prefix": "undo",
		"body": ["undo(${1:})"]},
	"undobufferentries() from the turtledemo module": {
		"description": "undobufferentries() from the turtledemo module",
		"prefix": "undobufferentries",
		"body": ["undobufferentries(${1:})"]},
	"up() from the turtledemo module": {
		"description": "up() from the turtledemo module",
		"prefix": "up",
		"body": ["up(${1:})"]},
	"update() from the turtledemo module": {
		"description": "update() from the turtledemo module",
		"prefix": "update",
		"body": ["update(${1:})"]},
	"width() from the turtledemo module": {
		"description": "width() from the turtledemo module",
		"prefix": "width",
		"body": ["width(${1:width=None})"]},
	"window_height() from the turtledemo module": {
		"description": "window_height() from the turtledemo module",
		"prefix": "window_height",
		"body": ["window_height(${1:})"]},
	"window_width() from the turtledemo module": {
		"description": "window_width() from the turtledemo module",
		"prefix": "window_width",
		"body": ["window_width(${1:})"]},
	"write() from the turtledemo module": {
		"description": "write() from the turtledemo module",
		"prefix": "write",
		"body": ["write(${1:arg}, ${2:move=False}, ${3:align=\"left\"}, ${4:font=}, ${5:\"Arial\"}, ${6:8}, ${7:\"normal\"})"]},
	"write_docstringdict() from the turtledemo module": {
		"description": "write_docstringdict() from the turtledemo module",
		"prefix": "write_docstringdict",
		"body": ["write_docstringdict(${1:filename=\"turtle_docstringdict\"})"]},
	"xcor() from the turtledemo module": {
		"description": "xcor() from the turtledemo module",
		"prefix": "xcor",
		"body": ["xcor(${1:})"]},
	"ycor() from the turtledemo module": {
		"description": "ycor() from the turtledemo module",
		"prefix": "ycor",
		"body": ["ycor(${1:})"]},
// types completion
	"BuiltinFunctionType from the types module": {
		"description": "BuiltinFunctionType from the types module",
		"prefix": "BuiltinFunctionType",
		"body": ["BuiltinFunctionType"]},
	"BuiltinMethodType from the types module": {
		"description": "BuiltinMethodType from the types module",
		"prefix": "BuiltinMethodType",
		"body": ["BuiltinMethodType"]},
	"CodeType from the types module": {
		"description": "CodeType from the types module",
		"prefix": "CodeType",
		"body": ["CodeType"]},
	"CoroutineType from the types module": {
		"description": "CoroutineType from the types module",
		"prefix": "CoroutineType",
		"body": ["CoroutineType"]},
	"DynamicClassAttribute from the types module": {
		"description": "DynamicClassAttribute from the types module",
		"prefix": "DynamicClassAttribute",
		"body": ["DynamicClassAttribute(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})"]},
	"FrameType from the types module": {
		"description": "FrameType from the types module",
		"prefix": "FrameType",
		"body": ["FrameType"]},
	"FunctionType from the types module": {
		"description": "FunctionType from the types module",
		"prefix": "FunctionType",
		"body": ["FunctionType"]},
	"GeneratorType from the types module": {
		"description": "GeneratorType from the types module",
		"prefix": "GeneratorType",
		"body": ["GeneratorType"]},
	"GetSetDescriptorType from the types module": {
		"description": "GetSetDescriptorType from the types module",
		"prefix": "GetSetDescriptorType",
		"body": ["GetSetDescriptorType"]},
	"LambdaType from the types module": {
		"description": "LambdaType from the types module",
		"prefix": "LambdaType",
		"body": ["LambdaType"]},
	"MappingProxyType from the types module": {
		"description": "MappingProxyType from the types module",
		"prefix": "MappingProxyType",
		"body": ["MappingProxyType(${1:mapping})"]},
	"MemberDescriptorType from the types module": {
		"description": "MemberDescriptorType from the types module",
		"prefix": "MemberDescriptorType",
		"body": ["MemberDescriptorType"]},
	"MethodType from the types module": {
		"description": "MethodType from the types module",
		"prefix": "MethodType",
		"body": ["MethodType"]},
	"ModuleType from the types module": {
		"description": "ModuleType from the types module",
		"prefix": "ModuleType",
		"body": ["ModuleType(${1:name}, ${2:doc=None})"]},
	"SimpleNamespace from the types module": {
		"description": "SimpleNamespace from the types module",
		"prefix": "SimpleNamespace",
		"body": ["SimpleNamespace"]},
	"TracebackType from the types module": {
		"description": "TracebackType from the types module",
		"prefix": "TracebackType",
		"body": ["TracebackType"]},
	"coroutine() from the types module": {
		"description": "coroutine() from the types module",
		"prefix": "coroutine",
		"body": ["coroutine(${1:gen_func})"]},
	"new_class() from the types module": {
		"description": "new_class() from the types module",
		"prefix": "new_class",
		"body": ["new_class(${1:name}, ${2:bases=}, ${3:})"]},
	"prepare_class() from the types module": {
		"description": "prepare_class() from the types module",
		"prefix": "prepare_class",
		"body": ["prepare_class(${1:name,})"]},
// typing completion
	"AbstractSet from the typing module": {
		"description": "AbstractSet from the typing module",
		"prefix": "AbstractSet",
		"body": ["AbstractSet(${1:Sized}, ${2:Iterable[T_co]}, ${3:Container[T_co]})"]},
	"AbstractSet from the typing module": {
		"description": "AbstractSet from the typing module",
		"prefix": "AbstractSet",
		"body": ["AbstractSet(${1:set}, ${2:MutableSet[T]})"]},
	"Any from the typing module": {
		"description": "Any from the typing module",
		"prefix": "Any",
		"body": ["Any"]},
	"ByteString from the typing module": {
		"description": "ByteString from the typing module",
		"prefix": "ByteString",
		"body": ["ByteString(${1:Sequence[int]})"]},
	"Callable from the typing module": {
		"description": "Callable from the typing module",
		"prefix": "Callable",
		"body": ["Callable"]},
	"Container from the typing module": {
		"description": "Container from the typing module",
		"prefix": "Container",
		"body": ["Container(${1:Generic[T_co]})"]},
	"Dict from the typing module": {
		"description": "Dict from the typing module",
		"prefix": "Dict",
		"body": ["Dict(${1:dict}, ${2:MutableMapping[KT}, ${3:VT]})"]},
	"Generator from the typing module": {
		"description": "Generator from the typing module",
		"prefix": "Generator",
		"body": ["Generator(${1:Iterator[T_co]}, ${2:Generic[T_co}, ${3:T_contra}, ${4:V_co]})"]},
	"Generic from the typing module": {
		"description": "Generic from the typing module",
		"prefix": "Generic",
		"body": ["Generic"]},
	"ItemsView from the typing module": {
		"description": "ItemsView from the typing module",
		"prefix": "ItemsView",
		"body": ["ItemsView(${1:MappingView}, ${2:Generic[KT_co}, ${3:VT_co]})"]},
	"Iterable from the typing module": {
		"description": "Iterable from the typing module",
		"prefix": "Iterable",
		"body": ["Iterable(${1:Generic[T_co]})"]},
	"Iterator from the typing module": {
		"description": "Iterator from the typing module",
		"prefix": "Iterator",
		"body": ["Iterator(${1:Iterable[T_co]})"]},
	"KeysView from the typing module": {
		"description": "KeysView from the typing module",
		"prefix": "KeysView",
		"body": ["KeysView(${1:MappingView[KT_co]}, ${2:AbstractSet[KT_co]})"]},
	"List from the typing module": {
		"description": "List from the typing module",
		"prefix": "List",
		"body": ["List(${1:list}, ${2:MutableSequence[T]})"]},
	"Mapping from the typing module": {
		"description": "Mapping from the typing module",
		"prefix": "Mapping",
		"body": ["Mapping(${1:Sized}, ${2:Iterable[KT]}, ${3:Container[KT]}, ${4:Generic[VT_co]})"]},
	"MappingView from the typing module": {
		"description": "MappingView from the typing module",
		"prefix": "MappingView",
		"body": ["MappingView(${1:Sized}, ${2:Iterable[T_co]})"]},
	"MutableMapping from the typing module": {
		"description": "MutableMapping from the typing module",
		"prefix": "MutableMapping",
		"body": ["MutableMapping(${1:Mapping[KT}, ${2:VT]})"]},
	"MutableSequence from the typing module": {
		"description": "MutableSequence from the typing module",
		"prefix": "MutableSequence",
		"body": ["MutableSequence(${1:Sequence[T]})"]},
	"MutableSet from the typing module": {
		"description": "MutableSet from the typing module",
		"prefix": "MutableSet",
		"body": ["MutableSet(${1:AbstractSet[T]})"]},
	"NamedTuple from the typing module": {
		"description": "NamedTuple from the typing module",
		"prefix": "NamedTuple",
		"body": ["NamedTuple(${1:typename}, ${2:fields})"]},
	"Optional from the typing module": {
		"description": "Optional from the typing module",
		"prefix": "Optional",
		"body": ["Optional"]},
	"Reversible from the typing module": {
		"description": "Reversible from the typing module",
		"prefix": "Reversible",
		"body": ["Reversible"]},
	"Sequence from the typing module": {
		"description": "Sequence from the typing module",
		"prefix": "Sequence",
		"body": ["Sequence(${1:Sized}, ${2:Iterable[T_co]}, ${3:Container[T_co]})"]},
	"SupportsAbs from the typing module": {
		"description": "SupportsAbs from the typing module",
		"prefix": "SupportsAbs",
		"body": ["SupportsAbs"]},
	"SupportsFloat from the typing module": {
		"description": "SupportsFloat from the typing module",
		"prefix": "SupportsFloat",
		"body": ["SupportsFloat"]},
	"SupportsInt from the typing module": {
		"description": "SupportsInt from the typing module",
		"prefix": "SupportsInt",
		"body": ["SupportsInt"]},
	"SupportsRound from the typing module": {
		"description": "SupportsRound from the typing module",
		"prefix": "SupportsRound",
		"body": ["SupportsRound"]},
	"Tuple from the typing module": {
		"description": "Tuple from the typing module",
		"prefix": "Tuple",
		"body": ["Tuple"]},
	"TypeVar from the typing module": {
		"description": "TypeVar from the typing module",
		"prefix": "TypeVar",
		"body": ["TypeVar"]},
	"Union from the typing module": {
		"description": "Union from the typing module",
		"prefix": "Union",
		"body": ["Union"]},
	"ValuesView from the typing module": {
		"description": "ValuesView from the typing module",
		"prefix": "ValuesView",
		"body": ["ValuesView(${1:MappingView[VT_co]})"]},
	"cast() from the typing module": {
		"description": "cast() from the typing module",
		"prefix": "cast",
		"body": ["cast(${1:typ}, ${2:val})"]},
	"get_type_hints() from the typing module": {
		"description": "get_type_hints() from the typing module",
		"prefix": "get_type_hints",
		"body": ["get_type_hints(${1:obj})"]},
	"io() from the typing module": {
		"description": "io() from the typing module",
		"prefix": "io",
		"body": ["io()"]},
	"no_type_check() from the typing module": {
		"description": "no_type_check() from the typing module",
		"prefix": "no_type_check",
		"body": ["no_type_check(${1:arg})"]},
	"no_type_check_decorator() from the typing module": {
		"description": "no_type_check_decorator() from the typing module",
		"prefix": "no_type_check_decorator",
		"body": ["no_type_check_decorator(${1:decorator})"]},
	"re() from the typing module": {
		"description": "re() from the typing module",
		"prefix": "re",
		"body": ["re()"]},
// unicodedata completion
	"bidirectional() from the unicodedata module": {
		"description": "bidirectional() from the unicodedata module",
		"prefix": "bidirectional",
		"body": ["bidirectional(${1:chr})"]},
	"category() from the unicodedata module": {
		"description": "category() from the unicodedata module",
		"prefix": "category",
		"body": ["category(${1:chr})"]},
	"combining() from the unicodedata module": {
		"description": "combining() from the unicodedata module",
		"prefix": "combining",
		"body": ["combining(${1:chr})"]},
	"decimal() from the unicodedata module": {
		"description": "decimal() from the unicodedata module",
		"prefix": "decimal",
		"body": ["decimal(${1:chr[}, ${2:default]})"]},
	"decomposition() from the unicodedata module": {
		"description": "decomposition() from the unicodedata module",
		"prefix": "decomposition",
		"body": ["decomposition(${1:chr})"]},
	"digit() from the unicodedata module": {
		"description": "digit() from the unicodedata module",
		"prefix": "digit",
		"body": ["digit(${1:chr[}, ${2:default]})"]},
	"east_asian_width() from the unicodedata module": {
		"description": "east_asian_width() from the unicodedata module",
		"prefix": "east_asian_width",
		"body": ["east_asian_width(${1:chr})"]},
	"lookup() from the unicodedata module": {
		"description": "lookup() from the unicodedata module",
		"prefix": "lookup",
		"body": ["lookup(${1:name})"]},
	"mirrored() from the unicodedata module": {
		"description": "mirrored() from the unicodedata module",
		"prefix": "mirrored",
		"body": ["mirrored(${1:chr})"]},
	"name() from the unicodedata module": {
		"description": "name() from the unicodedata module",
		"prefix": "name",
		"body": ["name(${1:chr[}, ${2:default]})"]},
	"normalize() from the unicodedata module": {
		"description": "normalize() from the unicodedata module",
		"prefix": "normalize",
		"body": ["normalize(${1:form}, ${2:unistr})"]},
	"numeric() from the unicodedata module": {
		"description": "numeric() from the unicodedata module",
		"prefix": "numeric",
		"body": ["numeric(${1:chr[}, ${2:default]})"]},
	"ucd_3_2_0() from the unicodedata module": {
		"description": "ucd_3_2_0() from the unicodedata module",
		"prefix": "ucd_3_2_0",
		"body": ["ucd_3_2_0()"]},
	"unidata_version() from the unicodedata module": {
		"description": "unidata_version() from the unicodedata module",
		"prefix": "unidata_version",
		"body": ["unidata_version()"]},
// unittest completion
	"FunctionTestCase from the unittest module": {
		"description": "FunctionTestCase from the unittest module",
		"prefix": "FunctionTestCase",
		"body": ["FunctionTestCase(${1:testFunc}, ${2:setUp=None}, ${3:tearDown=None}, ${4:description=None})"]},
	"SkipTest from the unittest module": {
		"description": "SkipTest from the unittest module",
		"prefix": "SkipTest",
		"body": ["SkipTest(${1:reason})"]},
	"TestCase from the unittest module": {
		"description": "TestCase from the unittest module",
		"prefix": "TestCase",
		"body": ["TestCase(${1:methodName='runTest'})"]},
	"TestLoader from the unittest module": {
		"description": "TestLoader from the unittest module",
		"prefix": "TestLoader",
		"body": ["TestLoader"]},
	"TestResult from the unittest module": {
		"description": "TestResult from the unittest module",
		"prefix": "TestResult",
		"body": ["TestResult"]},
	"TestSuite from the unittest module": {
		"description": "TestSuite from the unittest module",
		"prefix": "TestSuite",
		"body": ["TestSuite(${1:tests=}, ${2:})"]},
	"TextTestResult from the unittest module": {
		"description": "TextTestResult from the unittest module",
		"prefix": "TextTestResult",
		"body": ["TextTestResult(${1:stream}, ${2:descriptions}, ${3:verbosity})"]},
	"TextTestRunner from the unittest module": {
		"description": "TextTestRunner from the unittest module",
		"prefix": "TextTestRunner",
		"body": ["TextTestRunner(${1:stream=None}, ${2:descriptions=True}, ${3:verbosity=1}, ${4:failfast=False}, ${5:buffer=False}, ${6:resultclass=None}, ${7:warnings=None}, ${8:*}, ${9:tb_locals=False})"]},
	"defaultTestLoader() from the unittest module": {
		"description": "defaultTestLoader() from the unittest module",
		"prefix": "defaultTestLoader",
		"body": ["defaultTestLoader()"]},
	"expectedFailure() from the unittest module": {
		"description": "expectedFailure() from the unittest module",
		"prefix": "expectedFailure",
		"body": ["expectedFailure()"]},
	"installHandler() from the unittest module": {
		"description": "installHandler() from the unittest module",
		"prefix": "installHandler",
		"body": ["installHandler(${1:})"]},
	"main() from the unittest module": {
		"description": "main() from the unittest module",
		"prefix": "main",
		"body": ["main(${1:module='__main__'}, ${2:defaultTest=None}, ${3:argv=None}, ${4:testRunner=None}, ${5:testLoader=unittest.defaultTestLoader}, ${6:exit=True}, ${7:verbosity=1}, ${8:failfast=None}, ${9:catchbreak=None}, ${10:buffer=None}, ${11:warnings=None})"]},
	"registerResult() from the unittest module": {
		"description": "registerResult() from the unittest module",
		"prefix": "registerResult",
		"body": ["registerResult(${1:result})"]},
	"removeHandler() from the unittest module": {
		"description": "removeHandler() from the unittest module",
		"prefix": "removeHandler",
		"body": ["removeHandler(${1:function=None})"]},
	"removeResult() from the unittest module": {
		"description": "removeResult() from the unittest module",
		"prefix": "removeResult",
		"body": ["removeResult(${1:result})"]},
	"skip() from the unittest module": {
		"description": "skip() from the unittest module",
		"prefix": "skip",
		"body": ["skip(${1:reason})"]},
	"skipIf() from the unittest module": {
		"description": "skipIf() from the unittest module",
		"prefix": "skipIf",
		"body": ["skipIf(${1:condition}, ${2:reason})"]},
	"skipUnless() from the unittest module": {
		"description": "skipUnless() from the unittest module",
		"prefix": "skipUnless",
		"body": ["skipUnless(${1:condition,})"]},
// unittest.mock completion
	"ANY from the unittest.mock module": {
		"description": "ANY from the unittest.mock module",
		"prefix": "ANY",
		"body": ["ANY"]},
	"DEFAULT from the unittest.mock module": {
		"description": "DEFAULT from the unittest.mock module",
		"prefix": "DEFAULT",
		"body": ["DEFAULT"]},
	"FILTER_DIR from the unittest.mock module": {
		"description": "FILTER_DIR from the unittest.mock module",
		"prefix": "FILTER_DIR",
		"body": ["FILTER_DIR"]},
	"MagicMock from the unittest.mock module": {
		"description": "MagicMock from the unittest.mock module",
		"prefix": "MagicMock",
		"body": ["MagicMock(${1:*args}, ${2:**kw})"]},
	"Mock from the unittest.mock module": {
		"description": "Mock from the unittest.mock module",
		"prefix": "Mock",
		"body": ["Mock(${1:spec=None}, ${2:side_effect=None}, ${3:return_value=DEFAULT}, ${4:wraps=None}, ${5:name=None}, ${6:spec_set=None}, ${7:unsafe=False}, ${8:**kwargs})"]},
	"NonCallableMagicMock from the unittest.mock module": {
		"description": "NonCallableMagicMock from the unittest.mock module",
		"prefix": "NonCallableMagicMock",
		"body": ["NonCallableMagicMock(${1:*args}, ${2:**kw})"]},
	"NonCallableMock from the unittest.mock module": {
		"description": "NonCallableMock from the unittest.mock module",
		"prefix": "NonCallableMock",
		"body": ["NonCallableMock(${1:spec=None}, ${2:wraps=None}, ${3:name=None}, ${4:spec_set=None}, ${5:**kwargs})"]},
	"PropertyMock from the unittest.mock module": {
		"description": "PropertyMock from the unittest.mock module",
		"prefix": "PropertyMock",
		"body": ["PropertyMock(${1:*args}, ${2:**kwargs})"]},
	"call() from the unittest.mock module": {
		"description": "call() from the unittest.mock module",
		"prefix": "call",
		"body": ["call(${1:*args}, ${2:**kwargs})"]},
	"call_list() from the unittest.mock module": {
		"description": "call_list() from the unittest.mock module",
		"prefix": "call_list",
		"body": ["call_list(${1:})"]},
	"create_autospec() from the unittest.mock module": {
		"description": "create_autospec() from the unittest.mock module",
		"prefix": "create_autospec",
		"body": ["create_autospec(${1:spec}, ${2:spec_set=False}, ${3:instance=False}, ${4:**kwargs})"]},
	"dict() from the unittest.mock module": {
		"description": "dict() from the unittest.mock module",
		"prefix": "dict",
		"body": ["dict(${1:in_dict}, ${2:values=}, ${3:})"]},
	"mock_open() from the unittest.mock module": {
		"description": "mock_open() from the unittest.mock module",
		"prefix": "mock_open",
		"body": ["mock_open(${1:mock=None}, ${2:read_data=None})"]},
	"multiple() from the unittest.mock module": {
		"description": "multiple() from the unittest.mock module",
		"prefix": "multiple",
		"body": ["multiple(${1:target}, ${2:spec=None}, ${3:create=False}, ${4:spec_set=None}, ${5:autospec=None}, ${6:new_callable=None}, ${7:**kwargs})"]},
	"object() from the unittest.mock module": {
		"description": "object() from the unittest.mock module",
		"prefix": "object",
		"body": ["object(${1:target}, ${2:attribute}, ${3:new=DEFAULT}, ${4:spec=None}, ${5:create=False}, ${6:spec_set=None}, ${7:autospec=None}, ${8:new_callable=None}, ${9:**kwargs})"]},
	"patch() from the unittest.mock module": {
		"description": "patch() from the unittest.mock module",
		"prefix": "patch",
		"body": ["patch(${1:target}, ${2:new=DEFAULT}, ${3:spec=None}, ${4:create=False}, ${5:spec_set=None}, ${6:autospec=None}, ${7:new_callable=None}, ${8:**kwargs})"]},
	"sentinel() from the unittest.mock module": {
		"description": "sentinel() from the unittest.mock module",
		"prefix": "sentinel",
		"body": ["sentinel()"]},
	"stopall() from the unittest.mock module": {
		"description": "stopall() from the unittest.mock module",
		"prefix": "stopall",
		"body": ["stopall(${1:})"]},
// urllib.error completion
	"ContentTooShortError from the urllib.error module": {
		"description": "ContentTooShortError from the urllib.error module",
		"prefix": "ContentTooShortError",
		"body": ["ContentTooShortError(${1:msg}, ${2:content})"]},
	"HTTPError from the urllib.error module": {
		"description": "HTTPError from the urllib.error module",
		"prefix": "HTTPError",
		"body": ["HTTPError"]},
	"URLError from the urllib.error module": {
		"description": "URLError from the urllib.error module",
		"prefix": "URLError",
		"body": ["URLError"]},
// urllib.parse completion
	"DefragResult from the urllib.parse module": {
		"description": "DefragResult from the urllib.parse module",
		"prefix": "DefragResult",
		"body": ["DefragResult(${1:url}, ${2:fragment})"]},
	"DefragResultBytes from the urllib.parse module": {
		"description": "DefragResultBytes from the urllib.parse module",
		"prefix": "DefragResultBytes",
		"body": ["DefragResultBytes(${1:url}, ${2:fragment})"]},
	"ParseResult from the urllib.parse module": {
		"description": "ParseResult from the urllib.parse module",
		"prefix": "ParseResult",
		"body": ["ParseResult(${1:scheme}, ${2:netloc}, ${3:path}, ${4:params}, ${5:query}, ${6:fragment})"]},
	"ParseResultBytes from the urllib.parse module": {
		"description": "ParseResultBytes from the urllib.parse module",
		"prefix": "ParseResultBytes",
		"body": ["ParseResultBytes(${1:scheme}, ${2:netloc}, ${3:path}, ${4:params}, ${5:query}, ${6:fragment})"]},
	"SplitResult from the urllib.parse module": {
		"description": "SplitResult from the urllib.parse module",
		"prefix": "SplitResult",
		"body": ["SplitResult(${1:scheme}, ${2:netloc}, ${3:path}, ${4:query}, ${5:fragment})"]},
	"SplitResultBytes from the urllib.parse module": {
		"description": "SplitResultBytes from the urllib.parse module",
		"prefix": "SplitResultBytes",
		"body": ["SplitResultBytes(${1:scheme}, ${2:netloc}, ${3:path}, ${4:query}, ${5:fragment})"]},
	"geturl() from the urllib.parse module": {
		"description": "geturl() from the urllib.parse module",
		"prefix": "geturl",
		"body": ["geturl(${1:})"]},
	"parse_qs() from the urllib.parse module": {
		"description": "parse_qs() from the urllib.parse module",
		"prefix": "parse_qs",
		"body": ["parse_qs(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False}, ${4:encoding='utf-8'}, ${5:errors='replace'})"]},
	"parse_qsl() from the urllib.parse module": {
		"description": "parse_qsl() from the urllib.parse module",
		"prefix": "parse_qsl",
		"body": ["parse_qsl(${1:qs}, ${2:keep_blank_values=False}, ${3:strict_parsing=False}, ${4:encoding='utf-8'}, ${5:errors='replace'})"]},
	"quote() from the urllib.parse module": {
		"description": "quote() from the urllib.parse module",
		"prefix": "quote",
		"body": ["quote(${1:string}, ${2:safe='/'}, ${3:encoding=None}, ${4:errors=None})"]},
	"quote_from_bytes() from the urllib.parse module": {
		"description": "quote_from_bytes() from the urllib.parse module",
		"prefix": "quote_from_bytes",
		"body": ["quote_from_bytes(${1:bytes}, ${2:safe='/'})"]},
	"quote_plus() from the urllib.parse module": {
		"description": "quote_plus() from the urllib.parse module",
		"prefix": "quote_plus",
		"body": ["quote_plus(${1:string}, ${2:safe=''}, ${3:encoding=None}, ${4:errors=None})"]},
	"unquote() from the urllib.parse module": {
		"description": "unquote() from the urllib.parse module",
		"prefix": "unquote",
		"body": ["unquote(${1:string}, ${2:encoding='utf-8'}, ${3:errors='replace'})"]},
	"unquote_plus() from the urllib.parse module": {
		"description": "unquote_plus() from the urllib.parse module",
		"prefix": "unquote_plus",
		"body": ["unquote_plus(${1:string}, ${2:encoding='utf-8'}, ${3:errors='replace'})"]},
	"unquote_to_bytes() from the urllib.parse module": {
		"description": "unquote_to_bytes() from the urllib.parse module",
		"prefix": "unquote_to_bytes",
		"body": ["unquote_to_bytes(${1:string})"]},
	"urldefrag() from the urllib.parse module": {
		"description": "urldefrag() from the urllib.parse module",
		"prefix": "urldefrag",
		"body": ["urldefrag(${1:url})"]},
	"urlencode() from the urllib.parse module": {
		"description": "urlencode() from the urllib.parse module",
		"prefix": "urlencode",
		"body": ["urlencode(${1:query}, ${2:doseq=False}, ${3:safe=''}, ${4:encoding=None}, ${5:errors=None}, ${6:quote_via=quote_plus})"]},
	"urljoin() from the urllib.parse module": {
		"description": "urljoin() from the urllib.parse module",
		"prefix": "urljoin",
		"body": ["urljoin(${1:base}, ${2:url}, ${3:allow_fragments=True})"]},
	"urlparse() from the urllib.parse module": {
		"description": "urlparse() from the urllib.parse module",
		"prefix": "urlparse",
		"body": ["urlparse(${1:urlstring}, ${2:scheme=''}, ${3:allow_fragments=True})"]},
	"urlsplit() from the urllib.parse module": {
		"description": "urlsplit() from the urllib.parse module",
		"prefix": "urlsplit",
		"body": ["urlsplit(${1:urlstring}, ${2:scheme=''}, ${3:allow_fragments=True})"]},
	"urlunparse() from the urllib.parse module": {
		"description": "urlunparse() from the urllib.parse module",
		"prefix": "urlunparse",
		"body": ["urlunparse(${1:parts})"]},
	"urlunsplit() from the urllib.parse module": {
		"description": "urlunsplit() from the urllib.parse module",
		"prefix": "urlunsplit",
		"body": ["urlunsplit(${1:parts})"]},
// urllib.request completion
	"AbstractBasicAuthHandler from the urllib.request module": {
		"description": "AbstractBasicAuthHandler from the urllib.request module",
		"prefix": "AbstractBasicAuthHandler",
		"body": ["AbstractBasicAuthHandler(${1:password_mgr=None})"]},
	"AbstractDigestAuthHandler from the urllib.request module": {
		"description": "AbstractDigestAuthHandler from the urllib.request module",
		"prefix": "AbstractDigestAuthHandler",
		"body": ["AbstractDigestAuthHandler(${1:password_mgr=None})"]},
	"BaseHandler from the urllib.request module": {
		"description": "BaseHandler from the urllib.request module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CacheFTPHandler from the urllib.request module": {
		"description": "CacheFTPHandler from the urllib.request module",
		"prefix": "CacheFTPHandler",
		"body": ["CacheFTPHandler"]},
	"DataHandler from the urllib.request module": {
		"description": "DataHandler from the urllib.request module",
		"prefix": "DataHandler",
		"body": ["DataHandler"]},
	"FTPHandler from the urllib.request module": {
		"description": "FTPHandler from the urllib.request module",
		"prefix": "FTPHandler",
		"body": ["FTPHandler"]},
	"FancyURLopener from the urllib.request module": {
		"description": "FancyURLopener from the urllib.request module",
		"prefix": "FancyURLopener",
		"body": ["FancyURLopener(${1:...})"]},
	"FileHandler from the urllib.request module": {
		"description": "FileHandler from the urllib.request module",
		"prefix": "FileHandler",
		"body": ["FileHandler"]},
	"HTTPBasicAuthHandler from the urllib.request module": {
		"description": "HTTPBasicAuthHandler from the urllib.request module",
		"prefix": "HTTPBasicAuthHandler",
		"body": ["HTTPBasicAuthHandler(${1:password_mgr=None})"]},
	"HTTPCookieProcessor from the urllib.request module": {
		"description": "HTTPCookieProcessor from the urllib.request module",
		"prefix": "HTTPCookieProcessor",
		"body": ["HTTPCookieProcessor(${1:cookiejar=None})"]},
	"HTTPDefaultErrorHandler from the urllib.request module": {
		"description": "HTTPDefaultErrorHandler from the urllib.request module",
		"prefix": "HTTPDefaultErrorHandler",
		"body": ["HTTPDefaultErrorHandler"]},
	"HTTPDigestAuthHandler from the urllib.request module": {
		"description": "HTTPDigestAuthHandler from the urllib.request module",
		"prefix": "HTTPDigestAuthHandler",
		"body": ["HTTPDigestAuthHandler(${1:password_mgr=None})"]},
	"HTTPErrorProcessor from the urllib.request module": {
		"description": "HTTPErrorProcessor from the urllib.request module",
		"prefix": "HTTPErrorProcessor",
		"body": ["HTTPErrorProcessor"]},
	"HTTPHandler from the urllib.request module": {
		"description": "HTTPHandler from the urllib.request module",
		"prefix": "HTTPHandler",
		"body": ["HTTPHandler"]},
	"HTTPPasswordMgr from the urllib.request module": {
		"description": "HTTPPasswordMgr from the urllib.request module",
		"prefix": "HTTPPasswordMgr",
		"body": ["HTTPPasswordMgr"]},
	"HTTPPasswordMgrWithDefaultRealm from the urllib.request module": {
		"description": "HTTPPasswordMgrWithDefaultRealm from the urllib.request module",
		"prefix": "HTTPPasswordMgrWithDefaultRealm",
		"body": ["HTTPPasswordMgrWithDefaultRealm"]},
	"HTTPPasswordMgrWithPriorAuth from the urllib.request module": {
		"description": "HTTPPasswordMgrWithPriorAuth from the urllib.request module",
		"prefix": "HTTPPasswordMgrWithPriorAuth",
		"body": ["HTTPPasswordMgrWithPriorAuth"]},
	"HTTPRedirectHandler from the urllib.request module": {
		"description": "HTTPRedirectHandler from the urllib.request module",
		"prefix": "HTTPRedirectHandler",
		"body": ["HTTPRedirectHandler"]},
	"HTTPSHandler from the urllib.request module": {
		"description": "HTTPSHandler from the urllib.request module",
		"prefix": "HTTPSHandler",
		"body": ["HTTPSHandler(${1:debuglevel=0}, ${2:context=None}, ${3:check_hostname=None})"]},
	"OpenerDirector from the urllib.request module": {
		"description": "OpenerDirector from the urllib.request module",
		"prefix": "OpenerDirector",
		"body": ["OpenerDirector"]},
	"ProxyBasicAuthHandler from the urllib.request module": {
		"description": "ProxyBasicAuthHandler from the urllib.request module",
		"prefix": "ProxyBasicAuthHandler",
		"body": ["ProxyBasicAuthHandler(${1:password_mgr=None})"]},
	"ProxyDigestAuthHandler from the urllib.request module": {
		"description": "ProxyDigestAuthHandler from the urllib.request module",
		"prefix": "ProxyDigestAuthHandler",
		"body": ["ProxyDigestAuthHandler(${1:password_mgr=None})"]},
	"ProxyHandler from the urllib.request module": {
		"description": "ProxyHandler from the urllib.request module",
		"prefix": "ProxyHandler",
		"body": ["ProxyHandler(${1:proxies=None})"]},
	"Request from the urllib.request module": {
		"description": "Request from the urllib.request module",
		"prefix": "Request",
		"body": ["Request(${1:url}, ${2:data=None}, ${3:headers={}}, ${4:origin_req_host=None}, ${5:unverifiable=False}, ${6:method=None})"]},
	"URLopener from the urllib.request module": {
		"description": "URLopener from the urllib.request module",
		"prefix": "URLopener",
		"body": ["URLopener(${1:proxies=None}, ${2:**x509})"]},
	"UnknownHandler from the urllib.request module": {
		"description": "UnknownHandler from the urllib.request module",
		"prefix": "UnknownHandler",
		"body": ["UnknownHandler"]},
	"add_handler() from the urllib.request module": {
		"description": "add_handler() from the urllib.request module",
		"prefix": "add_handler",
		"body": ["add_handler(${1:handler})"]},
	"add_header() from the urllib.request module": {
		"description": "add_header() from the urllib.request module",
		"prefix": "add_header",
		"body": ["add_header(${1:key}, ${2:val})"]},
	"add_parent() from the urllib.request module": {
		"description": "add_parent() from the urllib.request module",
		"prefix": "add_parent",
		"body": ["add_parent(${1:director})"]},
	"add_password() from the urllib.request module": {
		"description": "add_password() from the urllib.request module",
		"prefix": "add_password",
		"body": ["add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd}, ${5:is_authenticated=False})"]},
	"add_password() from the urllib.request module": {
		"description": "add_password() from the urllib.request module",
		"prefix": "add_password",
		"body": ["add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd})"]},
	"add_unredirected_header() from the urllib.request module": {
		"description": "add_unredirected_header() from the urllib.request module",
		"prefix": "add_unredirected_header",
		"body": ["add_unredirected_header(${1:key}, ${2:header})"]},
	"build_opener() from the urllib.request module": {
		"description": "build_opener() from the urllib.request module",
		"prefix": "build_opener",
		"body": ["build_opener(${1:[handler}, ${2:...]})"]},
	"close() from the urllib.request module": {
		"description": "close() from the urllib.request module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"cookiejar() from the urllib.request module": {
		"description": "cookiejar() from the urllib.request module",
		"prefix": "cookiejar",
		"body": ["cookiejar()"]},
	"data() from the urllib.request module": {
		"description": "data() from the urllib.request module",
		"prefix": "data",
		"body": ["data()"]},
	"data_open() from the urllib.request module": {
		"description": "data_open() from the urllib.request module",
		"prefix": "data_open",
		"body": ["data_open(${1:req})"]},
	"default_open() from the urllib.request module": {
		"description": "default_open() from the urllib.request module",
		"prefix": "default_open",
		"body": ["default_open(${1:req})"]},
	"error() from the urllib.request module": {
		"description": "error() from the urllib.request module",
		"prefix": "error",
		"body": ["error(${1:proto}, ${2:*args})"]},
	"file_open() from the urllib.request module": {
		"description": "file_open() from the urllib.request module",
		"prefix": "file_open",
		"body": ["file_open(${1:req})"]},
	"find_user_password() from the urllib.request module": {
		"description": "find_user_password() from the urllib.request module",
		"prefix": "find_user_password",
		"body": ["find_user_password(${1:realm}, ${2:authuri})"]},
	"ftp_open() from the urllib.request module": {
		"description": "ftp_open() from the urllib.request module",
		"prefix": "ftp_open",
		"body": ["ftp_open(${1:req})"]},
	"full_url() from the urllib.request module": {
		"description": "full_url() from the urllib.request module",
		"prefix": "full_url",
		"body": ["full_url()"]},
	"get_full_url() from the urllib.request module": {
		"description": "get_full_url() from the urllib.request module",
		"prefix": "get_full_url",
		"body": ["get_full_url(${1:})"]},
	"get_header() from the urllib.request module": {
		"description": "get_header() from the urllib.request module",
		"prefix": "get_header",
		"body": ["get_header(${1:header_name}, ${2:default=None})"]},
	"get_method() from the urllib.request module": {
		"description": "get_method() from the urllib.request module",
		"prefix": "get_method",
		"body": ["get_method(${1:})"]},
	"getproxies() from the urllib.request module": {
		"description": "getproxies() from the urllib.request module",
		"prefix": "getproxies",
		"body": ["getproxies(${1:})"]},
	"has_header() from the urllib.request module": {
		"description": "has_header() from the urllib.request module",
		"prefix": "has_header",
		"body": ["has_header(${1:header})"]},
	"header_items() from the urllib.request module": {
		"description": "header_items() from the urllib.request module",
		"prefix": "header_items",
		"body": ["header_items(${1:})"]},
	"host() from the urllib.request module": {
		"description": "host() from the urllib.request module",
		"prefix": "host",
		"body": ["host()"]},
	"http_error_301() from the urllib.request module": {
		"description": "http_error_301() from the urllib.request module",
		"prefix": "http_error_301",
		"body": ["http_error_301(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_302() from the urllib.request module": {
		"description": "http_error_302() from the urllib.request module",
		"prefix": "http_error_302",
		"body": ["http_error_302(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_303() from the urllib.request module": {
		"description": "http_error_303() from the urllib.request module",
		"prefix": "http_error_303",
		"body": ["http_error_303(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_307() from the urllib.request module": {
		"description": "http_error_307() from the urllib.request module",
		"prefix": "http_error_307",
		"body": ["http_error_307(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_401() from the urllib.request module": {
		"description": "http_error_401() from the urllib.request module",
		"prefix": "http_error_401",
		"body": ["http_error_401(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_407() from the urllib.request module": {
		"description": "http_error_407() from the urllib.request module",
		"prefix": "http_error_407",
		"body": ["http_error_407(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_auth_reqed() from the urllib.request module": {
		"description": "http_error_auth_reqed() from the urllib.request module",
		"prefix": "http_error_auth_reqed",
		"body": ["http_error_auth_reqed(${1:authreq}, ${2:host}, ${3:req}, ${4:headers})"]},
	"http_error_default() from the urllib.request module": {
		"description": "http_error_default() from the urllib.request module",
		"prefix": "http_error_default",
		"body": ["http_error_default(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_nnn() from the urllib.request module": {
		"description": "http_error_nnn() from the urllib.request module",
		"prefix": "http_error_nnn",
		"body": ["http_error_nnn(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_open() from the urllib.request module": {
		"description": "http_open() from the urllib.request module",
		"prefix": "http_open",
		"body": ["http_open(${1:req})"]},
	"http_response() from the urllib.request module": {
		"description": "http_response() from the urllib.request module",
		"prefix": "http_response",
		"body": ["http_response(${1:})"]},
	"https_open() from the urllib.request module": {
		"description": "https_open() from the urllib.request module",
		"prefix": "https_open",
		"body": ["https_open(${1:req})"]},
	"https_response() from the urllib.request module": {
		"description": "https_response() from the urllib.request module",
		"prefix": "https_response",
		"body": ["https_response(${1:})"]},
	"install_opener() from the urllib.request module": {
		"description": "install_opener() from the urllib.request module",
		"prefix": "install_opener",
		"body": ["install_opener(${1:opener})"]},
	"is_authenticated() from the urllib.request module": {
		"description": "is_authenticated() from the urllib.request module",
		"prefix": "is_authenticated",
		"body": ["is_authenticated(${1:self}, ${2:authuri})"]},
	"method() from the urllib.request module": {
		"description": "method() from the urllib.request module",
		"prefix": "method",
		"body": ["method()"]},
	"open() from the urllib.request module": {
		"description": "open() from the urllib.request module",
		"prefix": "open",
		"body": ["open(${1:url}, ${2:data=None[}, ${3:timeout]})"]},
	"origin_req_host() from the urllib.request module": {
		"description": "origin_req_host() from the urllib.request module",
		"prefix": "origin_req_host",
		"body": ["origin_req_host()"]},
	"parent() from the urllib.request module": {
		"description": "parent() from the urllib.request module",
		"prefix": "parent",
		"body": ["parent()"]},
	"pathname2url() from the urllib.request module": {
		"description": "pathname2url() from the urllib.request module",
		"prefix": "pathname2url",
		"body": ["pathname2url(${1:path})"]},
	"protocol_open() from the urllib.request module": {
		"description": "protocol_open() from the urllib.request module",
		"prefix": "protocol_open",
		"body": ["protocol_open(${1:request})"]},
	"protocol_request() from the urllib.request module": {
		"description": "protocol_request() from the urllib.request module",
		"prefix": "protocol_request",
		"body": ["protocol_request(${1:req})"]},
	"protocol_response() from the urllib.request module": {
		"description": "protocol_response() from the urllib.request module",
		"prefix": "protocol_response",
		"body": ["protocol_response(${1:req}, ${2:response})"]},
	"redirect_request() from the urllib.request module": {
		"description": "redirect_request() from the urllib.request module",
		"prefix": "redirect_request",
		"body": ["redirect_request(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs}, ${6:newurl})"]},
	"remove_header() from the urllib.request module": {
		"description": "remove_header() from the urllib.request module",
		"prefix": "remove_header",
		"body": ["remove_header(${1:header})"]},
	"selector() from the urllib.request module": {
		"description": "selector() from the urllib.request module",
		"prefix": "selector",
		"body": ["selector()"]},
	"setMaxConns() from the urllib.request module": {
		"description": "setMaxConns() from the urllib.request module",
		"prefix": "setMaxConns",
		"body": ["setMaxConns(${1:m})"]},
	"setTimeout() from the urllib.request module": {
		"description": "setTimeout() from the urllib.request module",
		"prefix": "setTimeout",
		"body": ["setTimeout(${1:t})"]},
	"set_proxy() from the urllib.request module": {
		"description": "set_proxy() from the urllib.request module",
		"prefix": "set_proxy",
		"body": ["set_proxy(${1:host}, ${2:type})"]},
	"type() from the urllib.request module": {
		"description": "type() from the urllib.request module",
		"prefix": "type",
		"body": ["type()"]},
	"unknown_open() from the urllib.request module": {
		"description": "unknown_open() from the urllib.request module",
		"prefix": "unknown_open",
		"body": ["unknown_open(${1:req})"]},
	"unknown_open() from the urllib.request module": {
		"description": "unknown_open() from the urllib.request module",
		"prefix": "unknown_open",
		"body": ["unknown_open(${1:})"]},
	"unverifiable() from the urllib.request module": {
		"description": "unverifiable() from the urllib.request module",
		"prefix": "unverifiable",
		"body": ["unverifiable()"]},
	"update_authenticated() from the urllib.request module": {
		"description": "update_authenticated() from the urllib.request module",
		"prefix": "update_authenticated",
		"body": ["update_authenticated(${1:self}, ${2:uri}, ${3:is_authenticated=False})"]},
	"url2pathname() from the urllib.request module": {
		"description": "url2pathname() from the urllib.request module",
		"prefix": "url2pathname",
		"body": ["url2pathname(${1:path})"]},
	"urlcleanup() from the urllib.request module": {
		"description": "urlcleanup() from the urllib.request module",
		"prefix": "urlcleanup",
		"body": ["urlcleanup(${1:})"]},
	"urlopen() from the urllib.request module": {
		"description": "urlopen() from the urllib.request module",
		"prefix": "urlopen",
		"body": ["urlopen(${1:url}, ${2:data=None}, ${3:[timeout}, ${4:]*}, ${5:cafile=None}, ${6:capath=None}, ${7:cadefault=False}, ${8:context=None})"]},
	"urlretrieve() from the urllib.request module": {
		"description": "urlretrieve() from the urllib.request module",
		"prefix": "urlretrieve",
		"body": ["urlretrieve(${1:url,})"]},
// urllib.response completion
	"AbstractBasicAuthHandler from the urllib.response module": {
		"description": "AbstractBasicAuthHandler from the urllib.response module",
		"prefix": "AbstractBasicAuthHandler",
		"body": ["AbstractBasicAuthHandler(${1:password_mgr=None})"]},
	"AbstractDigestAuthHandler from the urllib.response module": {
		"description": "AbstractDigestAuthHandler from the urllib.response module",
		"prefix": "AbstractDigestAuthHandler",
		"body": ["AbstractDigestAuthHandler(${1:password_mgr=None})"]},
	"BaseHandler from the urllib.response module": {
		"description": "BaseHandler from the urllib.response module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CacheFTPHandler from the urllib.response module": {
		"description": "CacheFTPHandler from the urllib.response module",
		"prefix": "CacheFTPHandler",
		"body": ["CacheFTPHandler"]},
	"DataHandler from the urllib.response module": {
		"description": "DataHandler from the urllib.response module",
		"prefix": "DataHandler",
		"body": ["DataHandler"]},
	"FTPHandler from the urllib.response module": {
		"description": "FTPHandler from the urllib.response module",
		"prefix": "FTPHandler",
		"body": ["FTPHandler"]},
	"FancyURLopener from the urllib.response module": {
		"description": "FancyURLopener from the urllib.response module",
		"prefix": "FancyURLopener",
		"body": ["FancyURLopener(${1:...})"]},
	"FileHandler from the urllib.response module": {
		"description": "FileHandler from the urllib.response module",
		"prefix": "FileHandler",
		"body": ["FileHandler"]},
	"HTTPBasicAuthHandler from the urllib.response module": {
		"description": "HTTPBasicAuthHandler from the urllib.response module",
		"prefix": "HTTPBasicAuthHandler",
		"body": ["HTTPBasicAuthHandler(${1:password_mgr=None})"]},
	"HTTPCookieProcessor from the urllib.response module": {
		"description": "HTTPCookieProcessor from the urllib.response module",
		"prefix": "HTTPCookieProcessor",
		"body": ["HTTPCookieProcessor(${1:cookiejar=None})"]},
	"HTTPDefaultErrorHandler from the urllib.response module": {
		"description": "HTTPDefaultErrorHandler from the urllib.response module",
		"prefix": "HTTPDefaultErrorHandler",
		"body": ["HTTPDefaultErrorHandler"]},
	"HTTPDigestAuthHandler from the urllib.response module": {
		"description": "HTTPDigestAuthHandler from the urllib.response module",
		"prefix": "HTTPDigestAuthHandler",
		"body": ["HTTPDigestAuthHandler(${1:password_mgr=None})"]},
	"HTTPErrorProcessor from the urllib.response module": {
		"description": "HTTPErrorProcessor from the urllib.response module",
		"prefix": "HTTPErrorProcessor",
		"body": ["HTTPErrorProcessor"]},
	"HTTPHandler from the urllib.response module": {
		"description": "HTTPHandler from the urllib.response module",
		"prefix": "HTTPHandler",
		"body": ["HTTPHandler"]},
	"HTTPPasswordMgr from the urllib.response module": {
		"description": "HTTPPasswordMgr from the urllib.response module",
		"prefix": "HTTPPasswordMgr",
		"body": ["HTTPPasswordMgr"]},
	"HTTPPasswordMgrWithDefaultRealm from the urllib.response module": {
		"description": "HTTPPasswordMgrWithDefaultRealm from the urllib.response module",
		"prefix": "HTTPPasswordMgrWithDefaultRealm",
		"body": ["HTTPPasswordMgrWithDefaultRealm"]},
	"HTTPPasswordMgrWithPriorAuth from the urllib.response module": {
		"description": "HTTPPasswordMgrWithPriorAuth from the urllib.response module",
		"prefix": "HTTPPasswordMgrWithPriorAuth",
		"body": ["HTTPPasswordMgrWithPriorAuth"]},
	"HTTPRedirectHandler from the urllib.response module": {
		"description": "HTTPRedirectHandler from the urllib.response module",
		"prefix": "HTTPRedirectHandler",
		"body": ["HTTPRedirectHandler"]},
	"HTTPSHandler from the urllib.response module": {
		"description": "HTTPSHandler from the urllib.response module",
		"prefix": "HTTPSHandler",
		"body": ["HTTPSHandler(${1:debuglevel=0}, ${2:context=None}, ${3:check_hostname=None})"]},
	"OpenerDirector from the urllib.response module": {
		"description": "OpenerDirector from the urllib.response module",
		"prefix": "OpenerDirector",
		"body": ["OpenerDirector"]},
	"ProxyBasicAuthHandler from the urllib.response module": {
		"description": "ProxyBasicAuthHandler from the urllib.response module",
		"prefix": "ProxyBasicAuthHandler",
		"body": ["ProxyBasicAuthHandler(${1:password_mgr=None})"]},
	"ProxyDigestAuthHandler from the urllib.response module": {
		"description": "ProxyDigestAuthHandler from the urllib.response module",
		"prefix": "ProxyDigestAuthHandler",
		"body": ["ProxyDigestAuthHandler(${1:password_mgr=None})"]},
	"ProxyHandler from the urllib.response module": {
		"description": "ProxyHandler from the urllib.response module",
		"prefix": "ProxyHandler",
		"body": ["ProxyHandler(${1:proxies=None})"]},
	"Request from the urllib.response module": {
		"description": "Request from the urllib.response module",
		"prefix": "Request",
		"body": ["Request(${1:url}, ${2:data=None}, ${3:headers={}}, ${4:origin_req_host=None}, ${5:unverifiable=False}, ${6:method=None})"]},
	"URLopener from the urllib.response module": {
		"description": "URLopener from the urllib.response module",
		"prefix": "URLopener",
		"body": ["URLopener(${1:proxies=None}, ${2:**x509})"]},
	"UnknownHandler from the urllib.response module": {
		"description": "UnknownHandler from the urllib.response module",
		"prefix": "UnknownHandler",
		"body": ["UnknownHandler"]},
	"add_handler() from the urllib.response module": {
		"description": "add_handler() from the urllib.response module",
		"prefix": "add_handler",
		"body": ["add_handler(${1:handler})"]},
	"add_header() from the urllib.response module": {
		"description": "add_header() from the urllib.response module",
		"prefix": "add_header",
		"body": ["add_header(${1:key}, ${2:val})"]},
	"add_parent() from the urllib.response module": {
		"description": "add_parent() from the urllib.response module",
		"prefix": "add_parent",
		"body": ["add_parent(${1:director})"]},
	"add_password() from the urllib.response module": {
		"description": "add_password() from the urllib.response module",
		"prefix": "add_password",
		"body": ["add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd}, ${5:is_authenticated=False})"]},
	"add_password() from the urllib.response module": {
		"description": "add_password() from the urllib.response module",
		"prefix": "add_password",
		"body": ["add_password(${1:realm}, ${2:uri}, ${3:user}, ${4:passwd})"]},
	"add_unredirected_header() from the urllib.response module": {
		"description": "add_unredirected_header() from the urllib.response module",
		"prefix": "add_unredirected_header",
		"body": ["add_unredirected_header(${1:key}, ${2:header})"]},
	"build_opener() from the urllib.response module": {
		"description": "build_opener() from the urllib.response module",
		"prefix": "build_opener",
		"body": ["build_opener(${1:[handler}, ${2:...]})"]},
	"close() from the urllib.response module": {
		"description": "close() from the urllib.response module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"cookiejar() from the urllib.response module": {
		"description": "cookiejar() from the urllib.response module",
		"prefix": "cookiejar",
		"body": ["cookiejar()"]},
	"data() from the urllib.response module": {
		"description": "data() from the urllib.response module",
		"prefix": "data",
		"body": ["data()"]},
	"data_open() from the urllib.response module": {
		"description": "data_open() from the urllib.response module",
		"prefix": "data_open",
		"body": ["data_open(${1:req})"]},
	"default_open() from the urllib.response module": {
		"description": "default_open() from the urllib.response module",
		"prefix": "default_open",
		"body": ["default_open(${1:req})"]},
	"error() from the urllib.response module": {
		"description": "error() from the urllib.response module",
		"prefix": "error",
		"body": ["error(${1:proto}, ${2:*args})"]},
	"file_open() from the urllib.response module": {
		"description": "file_open() from the urllib.response module",
		"prefix": "file_open",
		"body": ["file_open(${1:req})"]},
	"find_user_password() from the urllib.response module": {
		"description": "find_user_password() from the urllib.response module",
		"prefix": "find_user_password",
		"body": ["find_user_password(${1:realm}, ${2:authuri})"]},
	"find_user_password() from the urllib.response module": {
		"description": "find_user_password() from the urllib.response module",
		"prefix": "find_user_password",
		"body": ["find_user_password(${1:realm}, ${2:authuri})"]},
	"ftp_open() from the urllib.response module": {
		"description": "ftp_open() from the urllib.response module",
		"prefix": "ftp_open",
		"body": ["ftp_open(${1:req})"]},
	"full_url() from the urllib.response module": {
		"description": "full_url() from the urllib.response module",
		"prefix": "full_url",
		"body": ["full_url()"]},
	"get_full_url() from the urllib.response module": {
		"description": "get_full_url() from the urllib.response module",
		"prefix": "get_full_url",
		"body": ["get_full_url(${1:})"]},
	"get_header() from the urllib.response module": {
		"description": "get_header() from the urllib.response module",
		"prefix": "get_header",
		"body": ["get_header(${1:header_name}, ${2:default=None})"]},
	"get_method() from the urllib.response module": {
		"description": "get_method() from the urllib.response module",
		"prefix": "get_method",
		"body": ["get_method(${1:})"]},
	"getproxies() from the urllib.response module": {
		"description": "getproxies() from the urllib.response module",
		"prefix": "getproxies",
		"body": ["getproxies(${1:})"]},
	"has_header() from the urllib.response module": {
		"description": "has_header() from the urllib.response module",
		"prefix": "has_header",
		"body": ["has_header(${1:header})"]},
	"header_items() from the urllib.response module": {
		"description": "header_items() from the urllib.response module",
		"prefix": "header_items",
		"body": ["header_items(${1:})"]},
	"host() from the urllib.response module": {
		"description": "host() from the urllib.response module",
		"prefix": "host",
		"body": ["host()"]},
	"http_error_301() from the urllib.response module": {
		"description": "http_error_301() from the urllib.response module",
		"prefix": "http_error_301",
		"body": ["http_error_301(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_302() from the urllib.response module": {
		"description": "http_error_302() from the urllib.response module",
		"prefix": "http_error_302",
		"body": ["http_error_302(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_303() from the urllib.response module": {
		"description": "http_error_303() from the urllib.response module",
		"prefix": "http_error_303",
		"body": ["http_error_303(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_307() from the urllib.response module": {
		"description": "http_error_307() from the urllib.response module",
		"prefix": "http_error_307",
		"body": ["http_error_307(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_401() from the urllib.response module": {
		"description": "http_error_401() from the urllib.response module",
		"prefix": "http_error_401",
		"body": ["http_error_401(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_407() from the urllib.response module": {
		"description": "http_error_407() from the urllib.response module",
		"prefix": "http_error_407",
		"body": ["http_error_407(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_auth_reqed() from the urllib.response module": {
		"description": "http_error_auth_reqed() from the urllib.response module",
		"prefix": "http_error_auth_reqed",
		"body": ["http_error_auth_reqed(${1:authreq}, ${2:host}, ${3:req}, ${4:headers})"]},
	"http_error_default() from the urllib.response module": {
		"description": "http_error_default() from the urllib.response module",
		"prefix": "http_error_default",
		"body": ["http_error_default(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_error_nnn() from the urllib.response module": {
		"description": "http_error_nnn() from the urllib.response module",
		"prefix": "http_error_nnn",
		"body": ["http_error_nnn(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs})"]},
	"http_open() from the urllib.response module": {
		"description": "http_open() from the urllib.response module",
		"prefix": "http_open",
		"body": ["http_open(${1:req})"]},
	"http_response() from the urllib.response module": {
		"description": "http_response() from the urllib.response module",
		"prefix": "http_response",
		"body": ["http_response(${1:})"]},
	"https_open() from the urllib.response module": {
		"description": "https_open() from the urllib.response module",
		"prefix": "https_open",
		"body": ["https_open(${1:req})"]},
	"https_response() from the urllib.response module": {
		"description": "https_response() from the urllib.response module",
		"prefix": "https_response",
		"body": ["https_response(${1:})"]},
	"install_opener() from the urllib.response module": {
		"description": "install_opener() from the urllib.response module",
		"prefix": "install_opener",
		"body": ["install_opener(${1:opener})"]},
	"is_authenticated() from the urllib.response module": {
		"description": "is_authenticated() from the urllib.response module",
		"prefix": "is_authenticated",
		"body": ["is_authenticated(${1:self}, ${2:authuri})"]},
	"method() from the urllib.response module": {
		"description": "method() from the urllib.response module",
		"prefix": "method",
		"body": ["method()"]},
	"open() from the urllib.response module": {
		"description": "open() from the urllib.response module",
		"prefix": "open",
		"body": ["open(${1:url}, ${2:data=None[}, ${3:timeout]})"]},
	"origin_req_host() from the urllib.response module": {
		"description": "origin_req_host() from the urllib.response module",
		"prefix": "origin_req_host",
		"body": ["origin_req_host()"]},
	"parent() from the urllib.response module": {
		"description": "parent() from the urllib.response module",
		"prefix": "parent",
		"body": ["parent()"]},
	"pathname2url() from the urllib.response module": {
		"description": "pathname2url() from the urllib.response module",
		"prefix": "pathname2url",
		"body": ["pathname2url(${1:path})"]},
	"protocol_open() from the urllib.response module": {
		"description": "protocol_open() from the urllib.response module",
		"prefix": "protocol_open",
		"body": ["protocol_open(${1:req})"]},
	"protocol_open() from the urllib.response module": {
		"description": "protocol_open() from the urllib.response module",
		"prefix": "protocol_open",
		"body": ["protocol_open(${1:request})"]},
	"protocol_request() from the urllib.response module": {
		"description": "protocol_request() from the urllib.response module",
		"prefix": "protocol_request",
		"body": ["protocol_request(${1:req})"]},
	"protocol_response() from the urllib.response module": {
		"description": "protocol_response() from the urllib.response module",
		"prefix": "protocol_response",
		"body": ["protocol_response(${1:req}, ${2:response})"]},
	"redirect_request() from the urllib.response module": {
		"description": "redirect_request() from the urllib.response module",
		"prefix": "redirect_request",
		"body": ["redirect_request(${1:req}, ${2:fp}, ${3:code}, ${4:msg}, ${5:hdrs}, ${6:newurl})"]},
	"remove_header() from the urllib.response module": {
		"description": "remove_header() from the urllib.response module",
		"prefix": "remove_header",
		"body": ["remove_header(${1:header})"]},
	"selector() from the urllib.response module": {
		"description": "selector() from the urllib.response module",
		"prefix": "selector",
		"body": ["selector()"]},
	"setMaxConns() from the urllib.response module": {
		"description": "setMaxConns() from the urllib.response module",
		"prefix": "setMaxConns",
		"body": ["setMaxConns(${1:m})"]},
	"setTimeout() from the urllib.response module": {
		"description": "setTimeout() from the urllib.response module",
		"prefix": "setTimeout",
		"body": ["setTimeout(${1:t})"]},
	"set_proxy() from the urllib.response module": {
		"description": "set_proxy() from the urllib.response module",
		"prefix": "set_proxy",
		"body": ["set_proxy(${1:host}, ${2:type})"]},
	"type() from the urllib.response module": {
		"description": "type() from the urllib.response module",
		"prefix": "type",
		"body": ["type()"]},
	"unknown_open() from the urllib.response module": {
		"description": "unknown_open() from the urllib.response module",
		"prefix": "unknown_open",
		"body": ["unknown_open(${1:req})"]},
	"unknown_open() from the urllib.response module": {
		"description": "unknown_open() from the urllib.response module",
		"prefix": "unknown_open",
		"body": ["unknown_open(${1:})"]},
	"unverifiable() from the urllib.response module": {
		"description": "unverifiable() from the urllib.response module",
		"prefix": "unverifiable",
		"body": ["unverifiable()"]},
	"update_authenticated() from the urllib.response module": {
		"description": "update_authenticated() from the urllib.response module",
		"prefix": "update_authenticated",
		"body": ["update_authenticated(${1:self}, ${2:uri}, ${3:is_authenticated=False})"]},
	"url2pathname() from the urllib.response module": {
		"description": "url2pathname() from the urllib.response module",
		"prefix": "url2pathname",
		"body": ["url2pathname(${1:path})"]},
	"urlcleanup() from the urllib.response module": {
		"description": "urlcleanup() from the urllib.response module",
		"prefix": "urlcleanup",
		"body": ["urlcleanup(${1:})"]},
	"urlopen() from the urllib.response module": {
		"description": "urlopen() from the urllib.response module",
		"prefix": "urlopen",
		"body": ["urlopen(${1:url}, ${2:data=None}, ${3:[timeout}, ${4:]*}, ${5:cafile=None}, ${6:capath=None}, ${7:cadefault=False}, ${8:context=None})"]},
	"urlretrieve() from the urllib.response module": {
		"description": "urlretrieve() from the urllib.response module",
		"prefix": "urlretrieve",
		"body": ["urlretrieve(${1:url,})"]},
// urllib.robotparser completion
	"RobotFileParser from the urllib.robotparser module": {
		"description": "RobotFileParser from the urllib.robotparser module",
		"prefix": "RobotFileParser",
		"body": ["RobotFileParser(${1:url=''})"]},
// uu completion
	"Error from the uu module": {
		"description": "Error from the uu module",
		"prefix": "Error",
		"body": ["Error"]},
	"decode() from the uu module": {
		"description": "decode() from the uu module",
		"prefix": "decode",
		"body": ["decode(${1:in_file}, ${2:out_file=None}, ${3:mode=None}, ${4:quiet=False})"]},
	"encode() from the uu module": {
		"description": "encode() from the uu module",
		"prefix": "encode",
		"body": ["encode(${1:in_file,})"]},
// uuid completion
	"NAMESPACE_DNS from the uuid module": {
		"description": "NAMESPACE_DNS from the uuid module",
		"prefix": "NAMESPACE_DNS",
		"body": ["NAMESPACE_DNS"]},
	"NAMESPACE_OID from the uuid module": {
		"description": "NAMESPACE_OID from the uuid module",
		"prefix": "NAMESPACE_OID",
		"body": ["NAMESPACE_OID"]},
	"NAMESPACE_URL from the uuid module": {
		"description": "NAMESPACE_URL from the uuid module",
		"prefix": "NAMESPACE_URL",
		"body": ["NAMESPACE_URL"]},
	"NAMESPACE_X500 from the uuid module": {
		"description": "NAMESPACE_X500 from the uuid module",
		"prefix": "NAMESPACE_X500",
		"body": ["NAMESPACE_X500"]},
	"RESERVED_FUTURE from the uuid module": {
		"description": "RESERVED_FUTURE from the uuid module",
		"prefix": "RESERVED_FUTURE",
		"body": ["RESERVED_FUTURE"]},
	"RESERVED_MICROSOFT from the uuid module": {
		"description": "RESERVED_MICROSOFT from the uuid module",
		"prefix": "RESERVED_MICROSOFT",
		"body": ["RESERVED_MICROSOFT"]},
	"RESERVED_NCS from the uuid module": {
		"description": "RESERVED_NCS from the uuid module",
		"prefix": "RESERVED_NCS",
		"body": ["RESERVED_NCS"]},
	"RFC_4122 from the uuid module": {
		"description": "RFC_4122 from the uuid module",
		"prefix": "RFC_4122",
		"body": ["RFC_4122"]},
	"UUID from the uuid module": {
		"description": "UUID from the uuid module",
		"prefix": "UUID",
		"body": ["UUID(${1:hex=None}, ${2:bytes=None}, ${3:bytes_le=None}, ${4:fields=None}, ${5:int=None}, ${6:version=None})"]},
	"bytes() from the uuid module": {
		"description": "bytes() from the uuid module",
		"prefix": "bytes",
		"body": ["bytes()"]},
	"bytes_le() from the uuid module": {
		"description": "bytes_le() from the uuid module",
		"prefix": "bytes_le",
		"body": ["bytes_le()"]},
	"fields() from the uuid module": {
		"description": "fields() from the uuid module",
		"prefix": "fields",
		"body": ["fields()"]},
	"getnode() from the uuid module": {
		"description": "getnode() from the uuid module",
		"prefix": "getnode",
		"body": ["getnode(${1:})"]},
	"hex() from the uuid module": {
		"description": "hex() from the uuid module",
		"prefix": "hex",
		"body": ["hex()"]},
	"int() from the uuid module": {
		"description": "int() from the uuid module",
		"prefix": "int",
		"body": ["int()"]},
	"urn() from the uuid module": {
		"description": "urn() from the uuid module",
		"prefix": "urn",
		"body": ["urn()"]},
	"uuid1() from the uuid module": {
		"description": "uuid1() from the uuid module",
		"prefix": "uuid1",
		"body": ["uuid1(${1:node=None}, ${2:clock_seq=None})"]},
	"uuid3() from the uuid module": {
		"description": "uuid3() from the uuid module",
		"prefix": "uuid3",
		"body": ["uuid3(${1:namespace}, ${2:name})"]},
	"uuid4() from the uuid module": {
		"description": "uuid4() from the uuid module",
		"prefix": "uuid4",
		"body": ["uuid4(${1:})"]},
	"uuid5() from the uuid module": {
		"description": "uuid5() from the uuid module",
		"prefix": "uuid5",
		"body": ["uuid5(${1:namespace}, ${2:name})"]},
	"variant() from the uuid module": {
		"description": "variant() from the uuid module",
		"prefix": "variant",
		"body": ["variant()"]},
	"version() from the uuid module": {
		"description": "version() from the uuid module",
		"prefix": "version",
		"body": ["version()"]},
// venv completion
	"EnvBuilder from the venv module": {
		"description": "EnvBuilder from the venv module",
		"prefix": "EnvBuilder",
		"body": ["EnvBuilder(${1:system_site_packages=False}, ${2:clear=False}, ${3:symlinks=False}, ${4:upgrade=False}, ${5:with_pip=False})"]},
	"create() from the venv module": {
		"description": "create() from the venv module",
		"prefix": "create",
		"body": ["create(${1:env_dir,})"]},
// warnings completion
	"catch_warnings() from the warnings module": {
		"description": "catch_warnings() from the warnings module",
		"prefix": "catch_warnings",
		"body": ["catch_warnings(${1:*}, ${2:record=False}, ${3:module=None})"]},
	"filterwarnings() from the warnings module": {
		"description": "filterwarnings() from the warnings module",
		"prefix": "filterwarnings",
		"body": ["filterwarnings(${1:action}, ${2:message=''}, ${3:category=Warning}, ${4:module=''}, ${5:lineno=0}, ${6:append=False})"]},
	"formatwarning() from the warnings module": {
		"description": "formatwarning() from the warnings module",
		"prefix": "formatwarning",
		"body": ["formatwarning(${1:message}, ${2:category}, ${3:filename}, ${4:lineno}, ${5:line=None})"]},
	"resetwarnings() from the warnings module": {
		"description": "resetwarnings() from the warnings module",
		"prefix": "resetwarnings",
		"body": ["resetwarnings(${1:})"]},
	"showwarning() from the warnings module": {
		"description": "showwarning() from the warnings module",
		"prefix": "showwarning",
		"body": ["showwarning(${1:message}, ${2:category}, ${3:filename}, ${4:lineno}, ${5:file=None}, ${6:line=None})"]},
	"simplefilter() from the warnings module": {
		"description": "simplefilter() from the warnings module",
		"prefix": "simplefilter",
		"body": ["simplefilter(${1:action}, ${2:category=Warning}, ${3:lineno=0}, ${4:append=False})"]},
	"warn() from the warnings module": {
		"description": "warn() from the warnings module",
		"prefix": "warn",
		"body": ["warn(${1:message}, ${2:category=None}, ${3:stacklevel=1})"]},
	"warn_explicit() from the warnings module": {
		"description": "warn_explicit() from the warnings module",
		"prefix": "warn_explicit",
		"body": ["warn_explicit(${1:message,})"]},
// wave completion
	"Error from the wave module": {
		"description": "Error from the wave module",
		"prefix": "Error",
		"body": ["Error"]},
	"close() from the wave module": {
		"description": "close() from the wave module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"getcompname() from the wave module": {
		"description": "getcompname() from the wave module",
		"prefix": "getcompname",
		"body": ["getcompname(${1:})"]},
	"getcomptype() from the wave module": {
		"description": "getcomptype() from the wave module",
		"prefix": "getcomptype",
		"body": ["getcomptype(${1:})"]},
	"getframerate() from the wave module": {
		"description": "getframerate() from the wave module",
		"prefix": "getframerate",
		"body": ["getframerate(${1:})"]},
	"getmark() from the wave module": {
		"description": "getmark() from the wave module",
		"prefix": "getmark",
		"body": ["getmark(${1:id})"]},
	"getmarkers() from the wave module": {
		"description": "getmarkers() from the wave module",
		"prefix": "getmarkers",
		"body": ["getmarkers(${1:})"]},
	"getnchannels() from the wave module": {
		"description": "getnchannels() from the wave module",
		"prefix": "getnchannels",
		"body": ["getnchannels(${1:})"]},
	"getnframes() from the wave module": {
		"description": "getnframes() from the wave module",
		"prefix": "getnframes",
		"body": ["getnframes(${1:})"]},
	"getparams() from the wave module": {
		"description": "getparams() from the wave module",
		"prefix": "getparams",
		"body": ["getparams(${1:})"]},
	"getsampwidth() from the wave module": {
		"description": "getsampwidth() from the wave module",
		"prefix": "getsampwidth",
		"body": ["getsampwidth(${1:})"]},
	"open() from the wave module": {
		"description": "open() from the wave module",
		"prefix": "open",
		"body": ["open(${1:file}, ${2:mode=None})"]},
	"openfp() from the wave module": {
		"description": "openfp() from the wave module",
		"prefix": "openfp",
		"body": ["openfp(${1:file}, ${2:mode})"]},
	"readframes() from the wave module": {
		"description": "readframes() from the wave module",
		"prefix": "readframes",
		"body": ["readframes(${1:n})"]},
	"rewind() from the wave module": {
		"description": "rewind() from the wave module",
		"prefix": "rewind",
		"body": ["rewind(${1:})"]},
	"setcomptype() from the wave module": {
		"description": "setcomptype() from the wave module",
		"prefix": "setcomptype",
		"body": ["setcomptype(${1:type}, ${2:name})"]},
	"setframerate() from the wave module": {
		"description": "setframerate() from the wave module",
		"prefix": "setframerate",
		"body": ["setframerate(${1:n})"]},
	"setnchannels() from the wave module": {
		"description": "setnchannels() from the wave module",
		"prefix": "setnchannels",
		"body": ["setnchannels(${1:n})"]},
	"setnframes() from the wave module": {
		"description": "setnframes() from the wave module",
		"prefix": "setnframes",
		"body": ["setnframes(${1:n})"]},
	"setparams() from the wave module": {
		"description": "setparams() from the wave module",
		"prefix": "setparams",
		"body": ["setparams(${1:tuple})"]},
	"setpos() from the wave module": {
		"description": "setpos() from the wave module",
		"prefix": "setpos",
		"body": ["setpos(${1:pos})"]},
	"setsampwidth() from the wave module": {
		"description": "setsampwidth() from the wave module",
		"prefix": "setsampwidth",
		"body": ["setsampwidth(${1:n})"]},
	"tell() from the wave module": {
		"description": "tell() from the wave module",
		"prefix": "tell",
		"body": ["tell(${1:})"]},
	"writeframes() from the wave module": {
		"description": "writeframes() from the wave module",
		"prefix": "writeframes",
		"body": ["writeframes(${1:data})"]},
	"writeframesraw() from the wave module": {
		"description": "writeframesraw() from the wave module",
		"prefix": "writeframesraw",
		"body": ["writeframesraw(${1:data})"]},
// weakref completion
	"CallableProxyType from the weakref module": {
		"description": "CallableProxyType from the weakref module",
		"prefix": "CallableProxyType",
		"body": ["CallableProxyType"]},
	"ProxyType from the weakref module": {
		"description": "ProxyType from the weakref module",
		"prefix": "ProxyType",
		"body": ["ProxyType"]},
	"ProxyTypes from the weakref module": {
		"description": "ProxyTypes from the weakref module",
		"prefix": "ProxyTypes",
		"body": ["ProxyTypes"]},
	"ReferenceError from the weakref module": {
		"description": "ReferenceError from the weakref module",
		"prefix": "ReferenceError",
		"body": ["ReferenceError"]},
	"ReferenceType from the weakref module": {
		"description": "ReferenceType from the weakref module",
		"prefix": "ReferenceType",
		"body": ["ReferenceType"]},
	"WeakKeyDictionary from the weakref module": {
		"description": "WeakKeyDictionary from the weakref module",
		"prefix": "WeakKeyDictionary",
		"body": ["WeakKeyDictionary(${1:[dict]})"]},
	"WeakMethod from the weakref module": {
		"description": "WeakMethod from the weakref module",
		"prefix": "WeakMethod",
		"body": ["WeakMethod(${1:method})"]},
	"WeakSet from the weakref module": {
		"description": "WeakSet from the weakref module",
		"prefix": "WeakSet",
		"body": ["WeakSet(${1:[elements]})"]},
	"WeakValueDictionary from the weakref module": {
		"description": "WeakValueDictionary from the weakref module",
		"prefix": "WeakValueDictionary",
		"body": ["WeakValueDictionary(${1:[dict]})"]},
	"finalize() from the weakref module": {
		"description": "finalize() from the weakref module",
		"prefix": "finalize",
		"body": ["finalize(${1:obj}, ${2:func}, ${3:*args}, ${4:**kwargs})"]},
	"getweakrefcount() from the weakref module": {
		"description": "getweakrefcount() from the weakref module",
		"prefix": "getweakrefcount",
		"body": ["getweakrefcount(${1:object})"]},
	"getweakrefs() from the weakref module": {
		"description": "getweakrefs() from the weakref module",
		"prefix": "getweakrefs",
		"body": ["getweakrefs(${1:object})"]},
	"keyrefs() from the weakref module": {
		"description": "keyrefs() from the weakref module",
		"prefix": "keyrefs",
		"body": ["keyrefs(${1:})"]},
	"proxy() from the weakref module": {
		"description": "proxy() from the weakref module",
		"prefix": "proxy",
		"body": ["proxy(${1:object[}, ${2:callback]})"]},
	"ref() from the weakref module": {
		"description": "ref() from the weakref module",
		"prefix": "ref",
		"body": ["ref(${1:object[}, ${2:callback]})"]},
	"valuerefs() from the weakref module": {
		"description": "valuerefs() from the weakref module",
		"prefix": "valuerefs",
		"body": ["valuerefs(${1:})"]},
// webbrowser completion
	"Error from the webbrowser module": {
		"description": "Error from the webbrowser module",
		"prefix": "Error",
		"body": ["Error"]},
	"get() from the webbrowser module": {
		"description": "get() from the webbrowser module",
		"prefix": "get",
		"body": ["get(${1:using=None})"]},
	"open() from the webbrowser module": {
		"description": "open() from the webbrowser module",
		"prefix": "open",
		"body": ["open(${1:url}, ${2:new=0}, ${3:autoraise=True})"]},
	"open_new() from the webbrowser module": {
		"description": "open_new() from the webbrowser module",
		"prefix": "open_new",
		"body": ["open_new(${1:url})"]},
	"open_new_tab() from the webbrowser module": {
		"description": "open_new_tab() from the webbrowser module",
		"prefix": "open_new_tab",
		"body": ["open_new_tab(${1:url})"]},
	"register() from the webbrowser module": {
		"description": "register() from the webbrowser module",
		"prefix": "register",
		"body": ["register(${1:name,})"]},
// winreg completion
	"Close from the winreg module": {
		"description": "Close from the winreg module",
		"prefix": "Close",
		"body": ["Close(${1:})"]},
	"CloseKey from the winreg module": {
		"description": "CloseKey from the winreg module",
		"prefix": "CloseKey",
		"body": ["CloseKey(${1:hkey})"]},
	"ConnectRegistry from the winreg module": {
		"description": "ConnectRegistry from the winreg module",
		"prefix": "ConnectRegistry",
		"body": ["ConnectRegistry(${1:computer_name}, ${2:key})"]},
	"CreateKey from the winreg module": {
		"description": "CreateKey from the winreg module",
		"prefix": "CreateKey",
		"body": ["CreateKey(${1:key}, ${2:sub_key})"]},
	"CreateKeyEx from the winreg module": {
		"description": "CreateKeyEx from the winreg module",
		"prefix": "CreateKeyEx",
		"body": ["CreateKeyEx(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_WRITE})"]},
	"DeleteKey from the winreg module": {
		"description": "DeleteKey from the winreg module",
		"prefix": "DeleteKey",
		"body": ["DeleteKey(${1:key}, ${2:sub_key})"]},
	"DeleteKeyEx from the winreg module": {
		"description": "DeleteKeyEx from the winreg module",
		"prefix": "DeleteKeyEx",
		"body": ["DeleteKeyEx(${1:key}, ${2:sub_key}, ${3:access=KEY_WOW64_64KEY}, ${4:reserved=0})"]},
	"DeleteValue from the winreg module": {
		"description": "DeleteValue from the winreg module",
		"prefix": "DeleteValue",
		"body": ["DeleteValue(${1:key}, ${2:value})"]},
	"Detach from the winreg module": {
		"description": "Detach from the winreg module",
		"prefix": "Detach",
		"body": ["Detach(${1:})"]},
	"DisableReflectionKey from the winreg module": {
		"description": "DisableReflectionKey from the winreg module",
		"prefix": "DisableReflectionKey",
		"body": ["DisableReflectionKey(${1:key})"]},
	"EnableReflectionKey from the winreg module": {
		"description": "EnableReflectionKey from the winreg module",
		"prefix": "EnableReflectionKey",
		"body": ["EnableReflectionKey(${1:key})"]},
	"EnumKey from the winreg module": {
		"description": "EnumKey from the winreg module",
		"prefix": "EnumKey",
		"body": ["EnumKey(${1:key}, ${2:index})"]},
	"EnumValue from the winreg module": {
		"description": "EnumValue from the winreg module",
		"prefix": "EnumValue",
		"body": ["EnumValue(${1:key}, ${2:index})"]},
	"ExpandEnvironmentStrings from the winreg module": {
		"description": "ExpandEnvironmentStrings from the winreg module",
		"prefix": "ExpandEnvironmentStrings",
		"body": ["ExpandEnvironmentStrings(${1:str})"]},
	"FlushKey from the winreg module": {
		"description": "FlushKey from the winreg module",
		"prefix": "FlushKey",
		"body": ["FlushKey(${1:key})"]},
	"HKEY_CLASSES_ROOT from the winreg module": {
		"description": "HKEY_CLASSES_ROOT from the winreg module",
		"prefix": "HKEY_CLASSES_ROOT",
		"body": ["HKEY_CLASSES_ROOT"]},
	"HKEY_CURRENT_CONFIG from the winreg module": {
		"description": "HKEY_CURRENT_CONFIG from the winreg module",
		"prefix": "HKEY_CURRENT_CONFIG",
		"body": ["HKEY_CURRENT_CONFIG"]},
	"HKEY_CURRENT_USER from the winreg module": {
		"description": "HKEY_CURRENT_USER from the winreg module",
		"prefix": "HKEY_CURRENT_USER",
		"body": ["HKEY_CURRENT_USER"]},
	"HKEY_DYN_DATA from the winreg module": {
		"description": "HKEY_DYN_DATA from the winreg module",
		"prefix": "HKEY_DYN_DATA",
		"body": ["HKEY_DYN_DATA"]},
	"HKEY_LOCAL_MACHINE from the winreg module": {
		"description": "HKEY_LOCAL_MACHINE from the winreg module",
		"prefix": "HKEY_LOCAL_MACHINE",
		"body": ["HKEY_LOCAL_MACHINE"]},
	"HKEY_PERFORMANCE_DATA from the winreg module": {
		"description": "HKEY_PERFORMANCE_DATA from the winreg module",
		"prefix": "HKEY_PERFORMANCE_DATA",
		"body": ["HKEY_PERFORMANCE_DATA"]},
	"HKEY_USERS from the winreg module": {
		"description": "HKEY_USERS from the winreg module",
		"prefix": "HKEY_USERS",
		"body": ["HKEY_USERS"]},
	"KEY_ALL_ACCESS from the winreg module": {
		"description": "KEY_ALL_ACCESS from the winreg module",
		"prefix": "KEY_ALL_ACCESS",
		"body": ["KEY_ALL_ACCESS"]},
	"KEY_CREATE_LINK from the winreg module": {
		"description": "KEY_CREATE_LINK from the winreg module",
		"prefix": "KEY_CREATE_LINK",
		"body": ["KEY_CREATE_LINK"]},
	"KEY_CREATE_SUB_KEY from the winreg module": {
		"description": "KEY_CREATE_SUB_KEY from the winreg module",
		"prefix": "KEY_CREATE_SUB_KEY",
		"body": ["KEY_CREATE_SUB_KEY"]},
	"KEY_ENUMERATE_SUB_KEYS from the winreg module": {
		"description": "KEY_ENUMERATE_SUB_KEYS from the winreg module",
		"prefix": "KEY_ENUMERATE_SUB_KEYS",
		"body": ["KEY_ENUMERATE_SUB_KEYS"]},
	"KEY_EXECUTE from the winreg module": {
		"description": "KEY_EXECUTE from the winreg module",
		"prefix": "KEY_EXECUTE",
		"body": ["KEY_EXECUTE"]},
	"KEY_NOTIFY from the winreg module": {
		"description": "KEY_NOTIFY from the winreg module",
		"prefix": "KEY_NOTIFY",
		"body": ["KEY_NOTIFY"]},
	"KEY_QUERY_VALUE from the winreg module": {
		"description": "KEY_QUERY_VALUE from the winreg module",
		"prefix": "KEY_QUERY_VALUE",
		"body": ["KEY_QUERY_VALUE"]},
	"KEY_READ from the winreg module": {
		"description": "KEY_READ from the winreg module",
		"prefix": "KEY_READ",
		"body": ["KEY_READ"]},
	"KEY_SET_VALUE from the winreg module": {
		"description": "KEY_SET_VALUE from the winreg module",
		"prefix": "KEY_SET_VALUE",
		"body": ["KEY_SET_VALUE"]},
	"KEY_WOW64_32KEY from the winreg module": {
		"description": "KEY_WOW64_32KEY from the winreg module",
		"prefix": "KEY_WOW64_32KEY",
		"body": ["KEY_WOW64_32KEY"]},
	"KEY_WOW64_64KEY from the winreg module": {
		"description": "KEY_WOW64_64KEY from the winreg module",
		"prefix": "KEY_WOW64_64KEY",
		"body": ["KEY_WOW64_64KEY"]},
	"KEY_WRITE from the winreg module": {
		"description": "KEY_WRITE from the winreg module",
		"prefix": "KEY_WRITE",
		"body": ["KEY_WRITE"]},
	"LoadKey from the winreg module": {
		"description": "LoadKey from the winreg module",
		"prefix": "LoadKey",
		"body": ["LoadKey(${1:key}, ${2:sub_key}, ${3:file_name})"]},
	"OpenKey from the winreg module": {
		"description": "OpenKey from the winreg module",
		"prefix": "OpenKey",
		"body": ["OpenKey(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_READ})"]},
	"OpenKeyEx from the winreg module": {
		"description": "OpenKeyEx from the winreg module",
		"prefix": "OpenKeyEx",
		"body": ["OpenKeyEx(${1:key}, ${2:sub_key}, ${3:reserved=0}, ${4:access=KEY_READ})"]},
	"QueryInfoKey from the winreg module": {
		"description": "QueryInfoKey from the winreg module",
		"prefix": "QueryInfoKey",
		"body": ["QueryInfoKey(${1:key})"]},
	"QueryReflectionKey from the winreg module": {
		"description": "QueryReflectionKey from the winreg module",
		"prefix": "QueryReflectionKey",
		"body": ["QueryReflectionKey(${1:key})"]},
	"QueryValue from the winreg module": {
		"description": "QueryValue from the winreg module",
		"prefix": "QueryValue",
		"body": ["QueryValue(${1:key}, ${2:sub_key})"]},
	"QueryValueEx from the winreg module": {
		"description": "QueryValueEx from the winreg module",
		"prefix": "QueryValueEx",
		"body": ["QueryValueEx(${1:key}, ${2:value_name})"]},
	"REG_BINARY from the winreg module": {
		"description": "REG_BINARY from the winreg module",
		"prefix": "REG_BINARY",
		"body": ["REG_BINARY"]},
	"REG_DWORD from the winreg module": {
		"description": "REG_DWORD from the winreg module",
		"prefix": "REG_DWORD",
		"body": ["REG_DWORD"]},
	"REG_DWORD_BIG_ENDIAN from the winreg module": {
		"description": "REG_DWORD_BIG_ENDIAN from the winreg module",
		"prefix": "REG_DWORD_BIG_ENDIAN",
		"body": ["REG_DWORD_BIG_ENDIAN"]},
	"REG_DWORD_LITTLE_ENDIAN from the winreg module": {
		"description": "REG_DWORD_LITTLE_ENDIAN from the winreg module",
		"prefix": "REG_DWORD_LITTLE_ENDIAN",
		"body": ["REG_DWORD_LITTLE_ENDIAN"]},
	"REG_EXPAND_SZ from the winreg module": {
		"description": "REG_EXPAND_SZ from the winreg module",
		"prefix": "REG_EXPAND_SZ",
		"body": ["REG_EXPAND_SZ"]},
	"REG_FULL_RESOURCE_DESCRIPTOR from the winreg module": {
		"description": "REG_FULL_RESOURCE_DESCRIPTOR from the winreg module",
		"prefix": "REG_FULL_RESOURCE_DESCRIPTOR",
		"body": ["REG_FULL_RESOURCE_DESCRIPTOR"]},
	"REG_LINK from the winreg module": {
		"description": "REG_LINK from the winreg module",
		"prefix": "REG_LINK",
		"body": ["REG_LINK"]},
	"REG_MULTI_SZ from the winreg module": {
		"description": "REG_MULTI_SZ from the winreg module",
		"prefix": "REG_MULTI_SZ",
		"body": ["REG_MULTI_SZ"]},
	"REG_NONE from the winreg module": {
		"description": "REG_NONE from the winreg module",
		"prefix": "REG_NONE",
		"body": ["REG_NONE"]},
	"REG_RESOURCE_LIST from the winreg module": {
		"description": "REG_RESOURCE_LIST from the winreg module",
		"prefix": "REG_RESOURCE_LIST",
		"body": ["REG_RESOURCE_LIST"]},
	"REG_RESOURCE_REQUIREMENTS_LIST from the winreg module": {
		"description": "REG_RESOURCE_REQUIREMENTS_LIST from the winreg module",
		"prefix": "REG_RESOURCE_REQUIREMENTS_LIST",
		"body": ["REG_RESOURCE_REQUIREMENTS_LIST"]},
	"REG_SZ from the winreg module": {
		"description": "REG_SZ from the winreg module",
		"prefix": "REG_SZ",
		"body": ["REG_SZ"]},
	"SaveKey from the winreg module": {
		"description": "SaveKey from the winreg module",
		"prefix": "SaveKey",
		"body": ["SaveKey(${1:key}, ${2:file_name})"]},
	"SetValue from the winreg module": {
		"description": "SetValue from the winreg module",
		"prefix": "SetValue",
		"body": ["SetValue(${1:key}, ${2:sub_key}, ${3:type}, ${4:value})"]},
	"SetValueEx from the winreg module": {
		"description": "SetValueEx from the winreg module",
		"prefix": "SetValueEx",
		"body": ["SetValueEx(${1:key}, ${2:value_name}, ${3:reserved}, ${4:type}, ${5:value})"]},
	"__enter__() from the winreg module": {
		"description": "__enter__() from the winreg module",
		"prefix": "__enter__",
		"body": ["__enter__(${1:})"]},
	"__exit__() from the winreg module": {
		"description": "__exit__() from the winreg module",
		"prefix": "__exit__",
		"body": ["__exit__(${1:*exc_info})"]},
// winsound completion
	"Beep from the winsound module": {
		"description": "Beep from the winsound module",
		"prefix": "Beep",
		"body": ["Beep(${1:frequency}, ${2:duration})"]},
	"MB_ICONASTERISK from the winsound module": {
		"description": "MB_ICONASTERISK from the winsound module",
		"prefix": "MB_ICONASTERISK",
		"body": ["MB_ICONASTERISK"]},
	"MB_ICONEXCLAMATION from the winsound module": {
		"description": "MB_ICONEXCLAMATION from the winsound module",
		"prefix": "MB_ICONEXCLAMATION",
		"body": ["MB_ICONEXCLAMATION"]},
	"MB_ICONHAND from the winsound module": {
		"description": "MB_ICONHAND from the winsound module",
		"prefix": "MB_ICONHAND",
		"body": ["MB_ICONHAND"]},
	"MB_ICONQUESTION from the winsound module": {
		"description": "MB_ICONQUESTION from the winsound module",
		"prefix": "MB_ICONQUESTION",
		"body": ["MB_ICONQUESTION"]},
	"MB_OK from the winsound module": {
		"description": "MB_OK from the winsound module",
		"prefix": "MB_OK",
		"body": ["MB_OK"]},
	"MessageBeep from the winsound module": {
		"description": "MessageBeep from the winsound module",
		"prefix": "MessageBeep",
		"body": ["MessageBeep(${1:type=MB_OK})"]},
	"PlaySound from the winsound module": {
		"description": "PlaySound from the winsound module",
		"prefix": "PlaySound",
		"body": ["PlaySound(${1:sound}, ${2:flags})"]},
	"SND_ALIAS from the winsound module": {
		"description": "SND_ALIAS from the winsound module",
		"prefix": "SND_ALIAS",
		"body": ["SND_ALIAS"]},
	"SND_ASYNC from the winsound module": {
		"description": "SND_ASYNC from the winsound module",
		"prefix": "SND_ASYNC",
		"body": ["SND_ASYNC"]},
	"SND_FILENAME from the winsound module": {
		"description": "SND_FILENAME from the winsound module",
		"prefix": "SND_FILENAME",
		"body": ["SND_FILENAME"]},
	"SND_LOOP from the winsound module": {
		"description": "SND_LOOP from the winsound module",
		"prefix": "SND_LOOP",
		"body": ["SND_LOOP"]},
	"SND_MEMORY from the winsound module": {
		"description": "SND_MEMORY from the winsound module",
		"prefix": "SND_MEMORY",
		"body": ["SND_MEMORY"]},
	"SND_NODEFAULT from the winsound module": {
		"description": "SND_NODEFAULT from the winsound module",
		"prefix": "SND_NODEFAULT",
		"body": ["SND_NODEFAULT"]},
	"SND_NOSTOP from the winsound module": {
		"description": "SND_NOSTOP from the winsound module",
		"prefix": "SND_NOSTOP",
		"body": ["SND_NOSTOP"]},
	"SND_NOWAIT from the winsound module": {
		"description": "SND_NOWAIT from the winsound module",
		"prefix": "SND_NOWAIT",
		"body": ["SND_NOWAIT"]},
	"SND_PURGE from the winsound module": {
		"description": "SND_PURGE from the winsound module",
		"prefix": "SND_PURGE",
		"body": ["SND_PURGE"]},
// wsgiref completion
	"BaseCGIHandler from the wsgiref module": {
		"description": "BaseCGIHandler from the wsgiref module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref module": {
		"description": "BaseHandler from the wsgiref module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref module": {
		"description": "CGIHandler from the wsgiref module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref module": {
		"description": "FileWrapper from the wsgiref module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref module": {
		"description": "Headers from the wsgiref module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref module": {
		"description": "IISCGIHandler from the wsgiref module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref module": {
		"description": "SimpleHandler from the wsgiref module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref module": {
		"description": "WSGIRequestHandler from the wsgiref module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref module": {
		"description": "WSGIServer from the wsgiref module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref module": {
		"description": "application_uri() from the wsgiref module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref module": {
		"description": "demo_app() from the wsgiref module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref module": {
		"description": "guess_scheme() from the wsgiref module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref module": {
		"description": "is_hop_by_hop() from the wsgiref module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref module": {
		"description": "make_server() from the wsgiref module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref module": {
		"description": "read_environ() from the wsgiref module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref module": {
		"description": "request_uri() from the wsgiref module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref module": {
		"description": "setup_testing_defaults() from the wsgiref module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref module": {
		"description": "shift_path_info() from the wsgiref module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref module": {
		"description": "validator() from the wsgiref module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// wsgiref.handlers completion
	"BaseCGIHandler from the wsgiref.handlers module": {
		"description": "BaseCGIHandler from the wsgiref.handlers module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref.handlers module": {
		"description": "BaseHandler from the wsgiref.handlers module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref.handlers module": {
		"description": "CGIHandler from the wsgiref.handlers module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref.handlers module": {
		"description": "FileWrapper from the wsgiref.handlers module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref.handlers module": {
		"description": "Headers from the wsgiref.handlers module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref.handlers module": {
		"description": "IISCGIHandler from the wsgiref.handlers module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref.handlers module": {
		"description": "SimpleHandler from the wsgiref.handlers module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref.handlers module": {
		"description": "WSGIRequestHandler from the wsgiref.handlers module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref.handlers module": {
		"description": "WSGIServer from the wsgiref.handlers module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref.handlers module": {
		"description": "application_uri() from the wsgiref.handlers module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref.handlers module": {
		"description": "demo_app() from the wsgiref.handlers module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref.handlers module": {
		"description": "guess_scheme() from the wsgiref.handlers module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref.handlers module": {
		"description": "is_hop_by_hop() from the wsgiref.handlers module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref.handlers module": {
		"description": "make_server() from the wsgiref.handlers module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref.handlers module": {
		"description": "read_environ() from the wsgiref.handlers module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref.handlers module": {
		"description": "request_uri() from the wsgiref.handlers module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref.handlers module": {
		"description": "setup_testing_defaults() from the wsgiref.handlers module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref.handlers module": {
		"description": "shift_path_info() from the wsgiref.handlers module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref.handlers module": {
		"description": "validator() from the wsgiref.handlers module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// wsgiref.headers completion
	"BaseCGIHandler from the wsgiref.headers module": {
		"description": "BaseCGIHandler from the wsgiref.headers module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref.headers module": {
		"description": "BaseHandler from the wsgiref.headers module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref.headers module": {
		"description": "CGIHandler from the wsgiref.headers module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref.headers module": {
		"description": "FileWrapper from the wsgiref.headers module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref.headers module": {
		"description": "Headers from the wsgiref.headers module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref.headers module": {
		"description": "IISCGIHandler from the wsgiref.headers module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref.headers module": {
		"description": "SimpleHandler from the wsgiref.headers module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref.headers module": {
		"description": "WSGIRequestHandler from the wsgiref.headers module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref.headers module": {
		"description": "WSGIServer from the wsgiref.headers module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref.headers module": {
		"description": "application_uri() from the wsgiref.headers module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref.headers module": {
		"description": "demo_app() from the wsgiref.headers module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref.headers module": {
		"description": "guess_scheme() from the wsgiref.headers module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref.headers module": {
		"description": "is_hop_by_hop() from the wsgiref.headers module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref.headers module": {
		"description": "make_server() from the wsgiref.headers module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref.headers module": {
		"description": "read_environ() from the wsgiref.headers module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref.headers module": {
		"description": "request_uri() from the wsgiref.headers module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref.headers module": {
		"description": "setup_testing_defaults() from the wsgiref.headers module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref.headers module": {
		"description": "shift_path_info() from the wsgiref.headers module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref.headers module": {
		"description": "validator() from the wsgiref.headers module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// wsgiref.simple_server completion
	"BaseCGIHandler from the wsgiref.simple_server module": {
		"description": "BaseCGIHandler from the wsgiref.simple_server module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref.simple_server module": {
		"description": "BaseHandler from the wsgiref.simple_server module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref.simple_server module": {
		"description": "CGIHandler from the wsgiref.simple_server module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref.simple_server module": {
		"description": "FileWrapper from the wsgiref.simple_server module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref.simple_server module": {
		"description": "Headers from the wsgiref.simple_server module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref.simple_server module": {
		"description": "IISCGIHandler from the wsgiref.simple_server module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref.simple_server module": {
		"description": "SimpleHandler from the wsgiref.simple_server module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref.simple_server module": {
		"description": "WSGIRequestHandler from the wsgiref.simple_server module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref.simple_server module": {
		"description": "WSGIServer from the wsgiref.simple_server module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref.simple_server module": {
		"description": "application_uri() from the wsgiref.simple_server module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref.simple_server module": {
		"description": "demo_app() from the wsgiref.simple_server module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref.simple_server module": {
		"description": "guess_scheme() from the wsgiref.simple_server module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref.simple_server module": {
		"description": "is_hop_by_hop() from the wsgiref.simple_server module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref.simple_server module": {
		"description": "make_server() from the wsgiref.simple_server module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref.simple_server module": {
		"description": "read_environ() from the wsgiref.simple_server module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref.simple_server module": {
		"description": "request_uri() from the wsgiref.simple_server module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref.simple_server module": {
		"description": "setup_testing_defaults() from the wsgiref.simple_server module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref.simple_server module": {
		"description": "shift_path_info() from the wsgiref.simple_server module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref.simple_server module": {
		"description": "validator() from the wsgiref.simple_server module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// wsgiref.util completion
	"BaseCGIHandler from the wsgiref.util module": {
		"description": "BaseCGIHandler from the wsgiref.util module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref.util module": {
		"description": "BaseHandler from the wsgiref.util module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref.util module": {
		"description": "CGIHandler from the wsgiref.util module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref.util module": {
		"description": "FileWrapper from the wsgiref.util module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref.util module": {
		"description": "Headers from the wsgiref.util module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref.util module": {
		"description": "IISCGIHandler from the wsgiref.util module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref.util module": {
		"description": "SimpleHandler from the wsgiref.util module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref.util module": {
		"description": "WSGIRequestHandler from the wsgiref.util module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref.util module": {
		"description": "WSGIServer from the wsgiref.util module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref.util module": {
		"description": "application_uri() from the wsgiref.util module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref.util module": {
		"description": "demo_app() from the wsgiref.util module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref.util module": {
		"description": "guess_scheme() from the wsgiref.util module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref.util module": {
		"description": "is_hop_by_hop() from the wsgiref.util module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref.util module": {
		"description": "make_server() from the wsgiref.util module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref.util module": {
		"description": "read_environ() from the wsgiref.util module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref.util module": {
		"description": "request_uri() from the wsgiref.util module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref.util module": {
		"description": "setup_testing_defaults() from the wsgiref.util module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref.util module": {
		"description": "shift_path_info() from the wsgiref.util module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref.util module": {
		"description": "validator() from the wsgiref.util module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// wsgiref.validate completion
	"BaseCGIHandler from the wsgiref.validate module": {
		"description": "BaseCGIHandler from the wsgiref.validate module",
		"prefix": "BaseCGIHandler",
		"body": ["BaseCGIHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"BaseHandler from the wsgiref.validate module": {
		"description": "BaseHandler from the wsgiref.validate module",
		"prefix": "BaseHandler",
		"body": ["BaseHandler"]},
	"CGIHandler from the wsgiref.validate module": {
		"description": "CGIHandler from the wsgiref.validate module",
		"prefix": "CGIHandler",
		"body": ["CGIHandler"]},
	"FileWrapper from the wsgiref.validate module": {
		"description": "FileWrapper from the wsgiref.validate module",
		"prefix": "FileWrapper",
		"body": ["FileWrapper(${1:filelike}, ${2:blksize=8192})"]},
	"Headers from the wsgiref.validate module": {
		"description": "Headers from the wsgiref.validate module",
		"prefix": "Headers",
		"body": ["Headers(${1:[headers]})"]},
	"IISCGIHandler from the wsgiref.validate module": {
		"description": "IISCGIHandler from the wsgiref.validate module",
		"prefix": "IISCGIHandler",
		"body": ["IISCGIHandler"]},
	"SimpleHandler from the wsgiref.validate module": {
		"description": "SimpleHandler from the wsgiref.validate module",
		"prefix": "SimpleHandler",
		"body": ["SimpleHandler(${1:stdin}, ${2:stdout}, ${3:stderr}, ${4:environ}, ${5:multithread=True}, ${6:multiprocess=False})"]},
	"WSGIRequestHandler from the wsgiref.validate module": {
		"description": "WSGIRequestHandler from the wsgiref.validate module",
		"prefix": "WSGIRequestHandler",
		"body": ["WSGIRequestHandler(${1:request}, ${2:client_address}, ${3:server})"]},
	"WSGIServer from the wsgiref.validate module": {
		"description": "WSGIServer from the wsgiref.validate module",
		"prefix": "WSGIServer",
		"body": ["WSGIServer(${1:server_address}, ${2:RequestHandlerClass})"]},
	"application_uri() from the wsgiref.validate module": {
		"description": "application_uri() from the wsgiref.validate module",
		"prefix": "application_uri",
		"body": ["application_uri(${1:environ})"]},
	"demo_app() from the wsgiref.validate module": {
		"description": "demo_app() from the wsgiref.validate module",
		"prefix": "demo_app",
		"body": ["demo_app(${1:environ}, ${2:start_response})"]},
	"guess_scheme() from the wsgiref.validate module": {
		"description": "guess_scheme() from the wsgiref.validate module",
		"prefix": "guess_scheme",
		"body": ["guess_scheme(${1:environ})"]},
	"is_hop_by_hop() from the wsgiref.validate module": {
		"description": "is_hop_by_hop() from the wsgiref.validate module",
		"prefix": "is_hop_by_hop",
		"body": ["is_hop_by_hop(${1:header_name})"]},
	"make_server() from the wsgiref.validate module": {
		"description": "make_server() from the wsgiref.validate module",
		"prefix": "make_server",
		"body": ["make_server(${1:host}, ${2:port}, ${3:app}, ${4:server_class=WSGIServer}, ${5:handler_class=WSGIRequestHandler})"]},
	"read_environ() from the wsgiref.validate module": {
		"description": "read_environ() from the wsgiref.validate module",
		"prefix": "read_environ",
		"body": ["read_environ(${1:})"]},
	"request_uri() from the wsgiref.validate module": {
		"description": "request_uri() from the wsgiref.validate module",
		"prefix": "request_uri",
		"body": ["request_uri(${1:environ}, ${2:include_query=True})"]},
	"setup_testing_defaults() from the wsgiref.validate module": {
		"description": "setup_testing_defaults() from the wsgiref.validate module",
		"prefix": "setup_testing_defaults",
		"body": ["setup_testing_defaults(${1:environ})"]},
	"shift_path_info() from the wsgiref.validate module": {
		"description": "shift_path_info() from the wsgiref.validate module",
		"prefix": "shift_path_info",
		"body": ["shift_path_info(${1:environ})"]},
	"validator() from the wsgiref.validate module": {
		"description": "validator() from the wsgiref.validate module",
		"prefix": "validator",
		"body": ["validator(${1:application})"]},
// xdrlib completion
	"ConversionError from the xdrlib module": {
		"description": "ConversionError from the xdrlib module",
		"prefix": "ConversionError",
		"body": ["ConversionError"]},
	"Error from the xdrlib module": {
		"description": "Error from the xdrlib module",
		"prefix": "Error",
		"body": ["Error"]},
	"Packer from the xdrlib module": {
		"description": "Packer from the xdrlib module",
		"prefix": "Packer",
		"body": ["Packer"]},
	"Unpacker from the xdrlib module": {
		"description": "Unpacker from the xdrlib module",
		"prefix": "Unpacker",
		"body": ["Unpacker(${1:data})"]},
	"done() from the xdrlib module": {
		"description": "done() from the xdrlib module",
		"prefix": "done",
		"body": ["done(${1:})"]},
	"get_buffer() from the xdrlib module": {
		"description": "get_buffer() from the xdrlib module",
		"prefix": "get_buffer",
		"body": ["get_buffer(${1:})"]},
	"get_position() from the xdrlib module": {
		"description": "get_position() from the xdrlib module",
		"prefix": "get_position",
		"body": ["get_position(${1:})"]},
	"pack_array() from the xdrlib module": {
		"description": "pack_array() from the xdrlib module",
		"prefix": "pack_array",
		"body": ["pack_array(${1:list}, ${2:pack_item})"]},
	"pack_bytes() from the xdrlib module": {
		"description": "pack_bytes() from the xdrlib module",
		"prefix": "pack_bytes",
		"body": ["pack_bytes(${1:bytes})"]},
	"pack_double() from the xdrlib module": {
		"description": "pack_double() from the xdrlib module",
		"prefix": "pack_double",
		"body": ["pack_double(${1:value})"]},
	"pack_farray() from the xdrlib module": {
		"description": "pack_farray() from the xdrlib module",
		"prefix": "pack_farray",
		"body": ["pack_farray(${1:n}, ${2:array}, ${3:pack_item})"]},
	"pack_float() from the xdrlib module": {
		"description": "pack_float() from the xdrlib module",
		"prefix": "pack_float",
		"body": ["pack_float(${1:value})"]},
	"pack_fopaque() from the xdrlib module": {
		"description": "pack_fopaque() from the xdrlib module",
		"prefix": "pack_fopaque",
		"body": ["pack_fopaque(${1:n}, ${2:data})"]},
	"pack_fstring() from the xdrlib module": {
		"description": "pack_fstring() from the xdrlib module",
		"prefix": "pack_fstring",
		"body": ["pack_fstring(${1:n}, ${2:s})"]},
	"pack_list() from the xdrlib module": {
		"description": "pack_list() from the xdrlib module",
		"prefix": "pack_list",
		"body": ["pack_list(${1:list}, ${2:pack_item})"]},
	"pack_opaque() from the xdrlib module": {
		"description": "pack_opaque() from the xdrlib module",
		"prefix": "pack_opaque",
		"body": ["pack_opaque(${1:data})"]},
	"pack_string() from the xdrlib module": {
		"description": "pack_string() from the xdrlib module",
		"prefix": "pack_string",
		"body": ["pack_string(${1:s})"]},
	"reset() from the xdrlib module": {
		"description": "reset() from the xdrlib module",
		"prefix": "reset",
		"body": ["reset(${1:data})"]},
	"reset() from the xdrlib module": {
		"description": "reset() from the xdrlib module",
		"prefix": "reset",
		"body": ["reset(${1:})"]},
	"set_position() from the xdrlib module": {
		"description": "set_position() from the xdrlib module",
		"prefix": "set_position",
		"body": ["set_position(${1:position})"]},
	"unpack_array() from the xdrlib module": {
		"description": "unpack_array() from the xdrlib module",
		"prefix": "unpack_array",
		"body": ["unpack_array(${1:unpack_item})"]},
	"unpack_bytes() from the xdrlib module": {
		"description": "unpack_bytes() from the xdrlib module",
		"prefix": "unpack_bytes",
		"body": ["unpack_bytes(${1:})"]},
	"unpack_double() from the xdrlib module": {
		"description": "unpack_double() from the xdrlib module",
		"prefix": "unpack_double",
		"body": ["unpack_double(${1:})"]},
	"unpack_farray() from the xdrlib module": {
		"description": "unpack_farray() from the xdrlib module",
		"prefix": "unpack_farray",
		"body": ["unpack_farray(${1:n}, ${2:unpack_item})"]},
	"unpack_float() from the xdrlib module": {
		"description": "unpack_float() from the xdrlib module",
		"prefix": "unpack_float",
		"body": ["unpack_float(${1:})"]},
	"unpack_fopaque() from the xdrlib module": {
		"description": "unpack_fopaque() from the xdrlib module",
		"prefix": "unpack_fopaque",
		"body": ["unpack_fopaque(${1:n})"]},
	"unpack_fstring() from the xdrlib module": {
		"description": "unpack_fstring() from the xdrlib module",
		"prefix": "unpack_fstring",
		"body": ["unpack_fstring(${1:n})"]},
	"unpack_list() from the xdrlib module": {
		"description": "unpack_list() from the xdrlib module",
		"prefix": "unpack_list",
		"body": ["unpack_list(${1:unpack_item})"]},
	"unpack_opaque() from the xdrlib module": {
		"description": "unpack_opaque() from the xdrlib module",
		"prefix": "unpack_opaque",
		"body": ["unpack_opaque(${1:})"]},
	"unpack_string() from the xdrlib module": {
		"description": "unpack_string() from the xdrlib module",
		"prefix": "unpack_string",
		"body": ["unpack_string(${1:})"]},
// xml.dom completion
	"DOMException from the xml.dom module": {
		"description": "DOMException from the xml.dom module",
		"prefix": "DOMException",
		"body": ["DOMException"]},
	"DomstringSizeErr from the xml.dom module": {
		"description": "DomstringSizeErr from the xml.dom module",
		"prefix": "DomstringSizeErr",
		"body": ["DomstringSizeErr"]},
	"EMPTY_NAMESPACE from the xml.dom module": {
		"description": "EMPTY_NAMESPACE from the xml.dom module",
		"prefix": "EMPTY_NAMESPACE",
		"body": ["EMPTY_NAMESPACE"]},
	"HierarchyRequestErr from the xml.dom module": {
		"description": "HierarchyRequestErr from the xml.dom module",
		"prefix": "HierarchyRequestErr",
		"body": ["HierarchyRequestErr"]},
	"IndexSizeErr from the xml.dom module": {
		"description": "IndexSizeErr from the xml.dom module",
		"prefix": "IndexSizeErr",
		"body": ["IndexSizeErr"]},
	"InuseAttributeErr from the xml.dom module": {
		"description": "InuseAttributeErr from the xml.dom module",
		"prefix": "InuseAttributeErr",
		"body": ["InuseAttributeErr"]},
	"InvalidAccessErr from the xml.dom module": {
		"description": "InvalidAccessErr from the xml.dom module",
		"prefix": "InvalidAccessErr",
		"body": ["InvalidAccessErr"]},
	"InvalidCharacterErr from the xml.dom module": {
		"description": "InvalidCharacterErr from the xml.dom module",
		"prefix": "InvalidCharacterErr",
		"body": ["InvalidCharacterErr"]},
	"InvalidModificationErr from the xml.dom module": {
		"description": "InvalidModificationErr from the xml.dom module",
		"prefix": "InvalidModificationErr",
		"body": ["InvalidModificationErr"]},
	"InvalidStateErr from the xml.dom module": {
		"description": "InvalidStateErr from the xml.dom module",
		"prefix": "InvalidStateErr",
		"body": ["InvalidStateErr"]},
	"NamespaceErr from the xml.dom module": {
		"description": "NamespaceErr from the xml.dom module",
		"prefix": "NamespaceErr",
		"body": ["NamespaceErr"]},
	"NoDataAllowedErr from the xml.dom module": {
		"description": "NoDataAllowedErr from the xml.dom module",
		"prefix": "NoDataAllowedErr",
		"body": ["NoDataAllowedErr"]},
	"NoModificationAllowedErr from the xml.dom module": {
		"description": "NoModificationAllowedErr from the xml.dom module",
		"prefix": "NoModificationAllowedErr",
		"body": ["NoModificationAllowedErr"]},
	"NotFoundErr from the xml.dom module": {
		"description": "NotFoundErr from the xml.dom module",
		"prefix": "NotFoundErr",
		"body": ["NotFoundErr"]},
	"NotSupportedErr from the xml.dom module": {
		"description": "NotSupportedErr from the xml.dom module",
		"prefix": "NotSupportedErr",
		"body": ["NotSupportedErr"]},
	"SyntaxErr from the xml.dom module": {
		"description": "SyntaxErr from the xml.dom module",
		"prefix": "SyntaxErr",
		"body": ["SyntaxErr"]},
	"WrongDocumentErr from the xml.dom module": {
		"description": "WrongDocumentErr from the xml.dom module",
		"prefix": "WrongDocumentErr",
		"body": ["WrongDocumentErr"]},
	"XHTML_NAMESPACE from the xml.dom module": {
		"description": "XHTML_NAMESPACE from the xml.dom module",
		"prefix": "XHTML_NAMESPACE",
		"body": ["XHTML_NAMESPACE"]},
	"XMLNS_NAMESPACE from the xml.dom module": {
		"description": "XMLNS_NAMESPACE from the xml.dom module",
		"prefix": "XMLNS_NAMESPACE",
		"body": ["XMLNS_NAMESPACE"]},
	"XML_NAMESPACE from the xml.dom module": {
		"description": "XML_NAMESPACE from the xml.dom module",
		"prefix": "XML_NAMESPACE",
		"body": ["XML_NAMESPACE"]},
	"appendChild() from the xml.dom module": {
		"description": "appendChild() from the xml.dom module",
		"prefix": "appendChild",
		"body": ["appendChild(${1:newChild})"]},
	"attributes() from the xml.dom module": {
		"description": "attributes() from the xml.dom module",
		"prefix": "attributes",
		"body": ["attributes()"]},
	"childNodes() from the xml.dom module": {
		"description": "childNodes() from the xml.dom module",
		"prefix": "childNodes",
		"body": ["childNodes()"]},
	"cloneNode() from the xml.dom module": {
		"description": "cloneNode() from the xml.dom module",
		"prefix": "cloneNode",
		"body": ["cloneNode(${1:deep})"]},
	"createAttribute() from the xml.dom module": {
		"description": "createAttribute() from the xml.dom module",
		"prefix": "createAttribute",
		"body": ["createAttribute(${1:name})"]},
	"createAttributeNS() from the xml.dom module": {
		"description": "createAttributeNS() from the xml.dom module",
		"prefix": "createAttributeNS",
		"body": ["createAttributeNS(${1:namespaceURI}, ${2:qualifiedName})"]},
	"createComment() from the xml.dom module": {
		"description": "createComment() from the xml.dom module",
		"prefix": "createComment",
		"body": ["createComment(${1:data})"]},
	"createDocument() from the xml.dom module": {
		"description": "createDocument() from the xml.dom module",
		"prefix": "createDocument",
		"body": ["createDocument(${1:namespaceUri}, ${2:qualifiedName}, ${3:doctype})"]},
	"createDocumentType() from the xml.dom module": {
		"description": "createDocumentType() from the xml.dom module",
		"prefix": "createDocumentType",
		"body": ["createDocumentType(${1:qualifiedName}, ${2:publicId}, ${3:systemId})"]},
	"createElement() from the xml.dom module": {
		"description": "createElement() from the xml.dom module",
		"prefix": "createElement",
		"body": ["createElement(${1:tagName})"]},
	"createElementNS() from the xml.dom module": {
		"description": "createElementNS() from the xml.dom module",
		"prefix": "createElementNS",
		"body": ["createElementNS(${1:namespaceURI}, ${2:tagName})"]},
	"createProcessingInstruction() from the xml.dom module": {
		"description": "createProcessingInstruction() from the xml.dom module",
		"prefix": "createProcessingInstruction",
		"body": ["createProcessingInstruction(${1:target}, ${2:data})"]},
	"createTextNode() from the xml.dom module": {
		"description": "createTextNode() from the xml.dom module",
		"prefix": "createTextNode",
		"body": ["createTextNode(${1:data})"]},
	"data() from the xml.dom module": {
		"description": "data() from the xml.dom module",
		"prefix": "data",
		"body": ["data()"]},
	"documentElement() from the xml.dom module": {
		"description": "documentElement() from the xml.dom module",
		"prefix": "documentElement",
		"body": ["documentElement()"]},
	"entities() from the xml.dom module": {
		"description": "entities() from the xml.dom module",
		"prefix": "entities",
		"body": ["entities()"]},
	"firstChild() from the xml.dom module": {
		"description": "firstChild() from the xml.dom module",
		"prefix": "firstChild",
		"body": ["firstChild()"]},
	"getAttribute() from the xml.dom module": {
		"description": "getAttribute() from the xml.dom module",
		"prefix": "getAttribute",
		"body": ["getAttribute(${1:name})"]},
	"getAttributeNS() from the xml.dom module": {
		"description": "getAttributeNS() from the xml.dom module",
		"prefix": "getAttributeNS",
		"body": ["getAttributeNS(${1:namespaceURI}, ${2:localName})"]},
	"getAttributeNode() from the xml.dom module": {
		"description": "getAttributeNode() from the xml.dom module",
		"prefix": "getAttributeNode",
		"body": ["getAttributeNode(${1:attrname})"]},
	"getAttributeNodeNS() from the xml.dom module": {
		"description": "getAttributeNodeNS() from the xml.dom module",
		"prefix": "getAttributeNodeNS",
		"body": ["getAttributeNodeNS(${1:namespaceURI}, ${2:localName})"]},
	"getDOMImplementation() from the xml.dom module": {
		"description": "getDOMImplementation() from the xml.dom module",
		"prefix": "getDOMImplementation",
		"body": ["getDOMImplementation(${1:name=None}, ${2:features=}, ${3:})"]},
	"getElementsByTagName() from the xml.dom module": {
		"description": "getElementsByTagName() from the xml.dom module",
		"prefix": "getElementsByTagName",
		"body": ["getElementsByTagName(${1:tagName})"]},
	"getElementsByTagNameNS() from the xml.dom module": {
		"description": "getElementsByTagNameNS() from the xml.dom module",
		"prefix": "getElementsByTagNameNS",
		"body": ["getElementsByTagNameNS(${1:namespaceURI}, ${2:localName})"]},
	"hasAttribute() from the xml.dom module": {
		"description": "hasAttribute() from the xml.dom module",
		"prefix": "hasAttribute",
		"body": ["hasAttribute(${1:name})"]},
	"hasAttributeNS() from the xml.dom module": {
		"description": "hasAttributeNS() from the xml.dom module",
		"prefix": "hasAttributeNS",
		"body": ["hasAttributeNS(${1:namespaceURI}, ${2:localName})"]},
	"hasAttributes() from the xml.dom module": {
		"description": "hasAttributes() from the xml.dom module",
		"prefix": "hasAttributes",
		"body": ["hasAttributes(${1:})"]},
	"hasChildNodes() from the xml.dom module": {
		"description": "hasChildNodes() from the xml.dom module",
		"prefix": "hasChildNodes",
		"body": ["hasChildNodes(${1:})"]},
	"hasFeature() from the xml.dom module": {
		"description": "hasFeature() from the xml.dom module",
		"prefix": "hasFeature",
		"body": ["hasFeature(${1:feature}, ${2:version})"]},
	"insertBefore() from the xml.dom module": {
		"description": "insertBefore() from the xml.dom module",
		"prefix": "insertBefore",
		"body": ["insertBefore(${1:newChild}, ${2:refChild})"]},
	"internalSubset() from the xml.dom module": {
		"description": "internalSubset() from the xml.dom module",
		"prefix": "internalSubset",
		"body": ["internalSubset()"]},
	"isSameNode() from the xml.dom module": {
		"description": "isSameNode() from the xml.dom module",
		"prefix": "isSameNode",
		"body": ["isSameNode(${1:other})"]},
	"item() from the xml.dom module": {
		"description": "item() from the xml.dom module",
		"prefix": "item",
		"body": ["item(${1:i})"]},
	"item() from the xml.dom module": {
		"description": "item() from the xml.dom module",
		"prefix": "item",
		"body": ["item(${1:index})"]},
	"lastChild() from the xml.dom module": {
		"description": "lastChild() from the xml.dom module",
		"prefix": "lastChild",
		"body": ["lastChild()"]},
	"length() from the xml.dom module": {
		"description": "length() from the xml.dom module",
		"prefix": "length",
		"body": ["length()"]},
	"localName() from the xml.dom module": {
		"description": "localName() from the xml.dom module",
		"prefix": "localName",
		"body": ["localName()"]},
	"name() from the xml.dom module": {
		"description": "name() from the xml.dom module",
		"prefix": "name",
		"body": ["name()"]},
	"namespaceURI() from the xml.dom module": {
		"description": "namespaceURI() from the xml.dom module",
		"prefix": "namespaceURI",
		"body": ["namespaceURI()"]},
	"nextSibling() from the xml.dom module": {
		"description": "nextSibling() from the xml.dom module",
		"prefix": "nextSibling",
		"body": ["nextSibling()"]},
	"nodeName() from the xml.dom module": {
		"description": "nodeName() from the xml.dom module",
		"prefix": "nodeName",
		"body": ["nodeName()"]},
	"nodeType() from the xml.dom module": {
		"description": "nodeType() from the xml.dom module",
		"prefix": "nodeType",
		"body": ["nodeType()"]},
	"nodeValue() from the xml.dom module": {
		"description": "nodeValue() from the xml.dom module",
		"prefix": "nodeValue",
		"body": ["nodeValue()"]},
	"normalize() from the xml.dom module": {
		"description": "normalize() from the xml.dom module",
		"prefix": "normalize",
		"body": ["normalize(${1:})"]},
	"notations() from the xml.dom module": {
		"description": "notations() from the xml.dom module",
		"prefix": "notations",
		"body": ["notations()"]},
	"parentNode() from the xml.dom module": {
		"description": "parentNode() from the xml.dom module",
		"prefix": "parentNode",
		"body": ["parentNode()"]},
	"prefix() from the xml.dom module": {
		"description": "prefix() from the xml.dom module",
		"prefix": "prefix",
		"body": ["prefix()"]},
	"previousSibling() from the xml.dom module": {
		"description": "previousSibling() from the xml.dom module",
		"prefix": "previousSibling",
		"body": ["previousSibling()"]},
	"publicId() from the xml.dom module": {
		"description": "publicId() from the xml.dom module",
		"prefix": "publicId",
		"body": ["publicId()"]},
	"registerDOMImplementation() from the xml.dom module": {
		"description": "registerDOMImplementation() from the xml.dom module",
		"prefix": "registerDOMImplementation",
		"body": ["registerDOMImplementation(${1:name}, ${2:factory})"]},
	"removeAttribute() from the xml.dom module": {
		"description": "removeAttribute() from the xml.dom module",
		"prefix": "removeAttribute",
		"body": ["removeAttribute(${1:name})"]},
	"removeAttributeNS() from the xml.dom module": {
		"description": "removeAttributeNS() from the xml.dom module",
		"prefix": "removeAttributeNS",
		"body": ["removeAttributeNS(${1:namespaceURI}, ${2:localName})"]},
	"removeAttributeNode() from the xml.dom module": {
		"description": "removeAttributeNode() from the xml.dom module",
		"prefix": "removeAttributeNode",
		"body": ["removeAttributeNode(${1:oldAttr})"]},
	"removeChild() from the xml.dom module": {
		"description": "removeChild() from the xml.dom module",
		"prefix": "removeChild",
		"body": ["removeChild(${1:oldChild})"]},
	"replaceChild() from the xml.dom module": {
		"description": "replaceChild() from the xml.dom module",
		"prefix": "replaceChild",
		"body": ["replaceChild(${1:newChild}, ${2:oldChild})"]},
	"setAttribute() from the xml.dom module": {
		"description": "setAttribute() from the xml.dom module",
		"prefix": "setAttribute",
		"body": ["setAttribute(${1:name}, ${2:value})"]},
	"setAttributeNS() from the xml.dom module": {
		"description": "setAttributeNS() from the xml.dom module",
		"prefix": "setAttributeNS",
		"body": ["setAttributeNS(${1:namespaceURI}, ${2:qname}, ${3:value})"]},
	"setAttributeNode() from the xml.dom module": {
		"description": "setAttributeNode() from the xml.dom module",
		"prefix": "setAttributeNode",
		"body": ["setAttributeNode(${1:newAttr})"]},
	"setAttributeNodeNS() from the xml.dom module": {
		"description": "setAttributeNodeNS() from the xml.dom module",
		"prefix": "setAttributeNodeNS",
		"body": ["setAttributeNodeNS(${1:newAttr})"]},
	"systemId() from the xml.dom module": {
		"description": "systemId() from the xml.dom module",
		"prefix": "systemId",
		"body": ["systemId()"]},
	"tagName() from the xml.dom module": {
		"description": "tagName() from the xml.dom module",
		"prefix": "tagName",
		"body": ["tagName()"]},
	"target() from the xml.dom module": {
		"description": "target() from the xml.dom module",
		"prefix": "target",
		"body": ["target()"]},
	"value() from the xml.dom module": {
		"description": "value() from the xml.dom module",
		"prefix": "value",
		"body": ["value()"]},
// xml.dom.minidom completion
	"parse() from the xml.dom.minidom module": {
		"description": "parse() from the xml.dom.minidom module",
		"prefix": "parse",
		"body": ["parse(${1:filename_or_file}, ${2:parser=None}, ${3:bufsize=None})"]},
	"parseString() from the xml.dom.minidom module": {
		"description": "parseString() from the xml.dom.minidom module",
		"prefix": "parseString",
		"body": ["parseString(${1:string}, ${2:parser=None})"]},
	"toprettyxml() from the xml.dom.minidom module": {
		"description": "toprettyxml() from the xml.dom.minidom module",
		"prefix": "toprettyxml",
		"body": ["toprettyxml(${1:indent=\"\"}, ${2:newl=\"\"}, ${3:encoding=\"\"})"]},
	"toxml() from the xml.dom.minidom module": {
		"description": "toxml() from the xml.dom.minidom module",
		"prefix": "toxml",
		"body": ["toxml(${1:encoding=None})"]},
	"unlink() from the xml.dom.minidom module": {
		"description": "unlink() from the xml.dom.minidom module",
		"prefix": "unlink",
		"body": ["unlink(${1:})"]},
	"writexml() from the xml.dom.minidom module": {
		"description": "writexml() from the xml.dom.minidom module",
		"prefix": "writexml",
		"body": ["writexml(${1:writer,})"]},
// xml.dom.pulldom completion
	"DOMEventStream from the xml.dom.pulldom module": {
		"description": "DOMEventStream from the xml.dom.pulldom module",
		"prefix": "DOMEventStream",
		"body": ["DOMEventStream(${1:stream}, ${2:parser}, ${3:bufsize})"]},
	"PullDom from the xml.dom.pulldom module": {
		"description": "PullDom from the xml.dom.pulldom module",
		"prefix": "PullDom",
		"body": ["PullDom(${1:documentFactory=None})"]},
	"SAX2DOM from the xml.dom.pulldom module": {
		"description": "SAX2DOM from the xml.dom.pulldom module",
		"prefix": "SAX2DOM",
		"body": ["SAX2DOM(${1:documentFactory=None})"]},
	"default_bufsize() from the xml.dom.pulldom module": {
		"description": "default_bufsize() from the xml.dom.pulldom module",
		"prefix": "default_bufsize",
		"body": ["default_bufsize()"]},
	"parse() from the xml.dom.pulldom module": {
		"description": "parse() from the xml.dom.pulldom module",
		"prefix": "parse",
		"body": ["parse(${1:stream_or_string}, ${2:parser=None}, ${3:bufsize=None})"]},
	"parseString() from the xml.dom.pulldom module": {
		"description": "parseString() from the xml.dom.pulldom module",
		"prefix": "parseString",
		"body": ["parseString(${1:string,})"]},
// xml.etree.ElementTree completion
	"Comment from the xml.etree.ElementTree module": {
		"description": "Comment from the xml.etree.ElementTree module",
		"prefix": "Comment",
		"body": ["Comment(${1:text=None})"]},
	"Element from the xml.etree.ElementTree module": {
		"description": "Element from the xml.etree.ElementTree module",
		"prefix": "Element",
		"body": ["Element(${1:tag}, ${2:attrib={}}, ${3:**extra})"]},
	"ElementTree from the xml.etree.ElementTree module": {
		"description": "ElementTree from the xml.etree.ElementTree module",
		"prefix": "ElementTree",
		"body": ["ElementTree(${1:element=None}, ${2:file=None})"]},
	"ParseError from the xml.etree.ElementTree module": {
		"description": "ParseError from the xml.etree.ElementTree module",
		"prefix": "ParseError",
		"body": ["ParseError"]},
	"ProcessingInstruction from the xml.etree.ElementTree module": {
		"description": "ProcessingInstruction from the xml.etree.ElementTree module",
		"prefix": "ProcessingInstruction",
		"body": ["ProcessingInstruction(${1:target}, ${2:text=None})"]},
	"QName from the xml.etree.ElementTree module": {
		"description": "QName from the xml.etree.ElementTree module",
		"prefix": "QName",
		"body": ["QName(${1:text_or_uri}, ${2:tag=None})"]},
	"SubElement from the xml.etree.ElementTree module": {
		"description": "SubElement from the xml.etree.ElementTree module",
		"prefix": "SubElement",
		"body": ["SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})"]},
	"TreeBuilder from the xml.etree.ElementTree module": {
		"description": "TreeBuilder from the xml.etree.ElementTree module",
		"prefix": "TreeBuilder",
		"body": ["TreeBuilder(${1:element_factory=None})"]},
	"XML from the xml.etree.ElementTree module": {
		"description": "XML from the xml.etree.ElementTree module",
		"prefix": "XML",
		"body": ["XML(${1:text}, ${2:parser=None})"]},
	"XMLID from the xml.etree.ElementTree module": {
		"description": "XMLID from the xml.etree.ElementTree module",
		"prefix": "XMLID",
		"body": ["XMLID(${1:text}, ${2:parser=None})"]},
	"XMLParser from the xml.etree.ElementTree module": {
		"description": "XMLParser from the xml.etree.ElementTree module",
		"prefix": "XMLParser",
		"body": ["XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})"]},
	"XMLPullParser from the xml.etree.ElementTree module": {
		"description": "XMLPullParser from the xml.etree.ElementTree module",
		"prefix": "XMLPullParser",
		"body": ["XMLPullParser(${1:events=None})"]},
	"dump() from the xml.etree.ElementTree module": {
		"description": "dump() from the xml.etree.ElementTree module",
		"prefix": "dump",
		"body": ["dump(${1:elem})"]},
	"fromstring() from the xml.etree.ElementTree module": {
		"description": "fromstring() from the xml.etree.ElementTree module",
		"prefix": "fromstring",
		"body": ["fromstring(${1:text})"]},
	"fromstringlist() from the xml.etree.ElementTree module": {
		"description": "fromstringlist() from the xml.etree.ElementTree module",
		"prefix": "fromstringlist",
		"body": ["fromstringlist(${1:sequence}, ${2:parser=None})"]},
	"iselement() from the xml.etree.ElementTree module": {
		"description": "iselement() from the xml.etree.ElementTree module",
		"prefix": "iselement",
		"body": ["iselement(${1:element})"]},
	"iterparse() from the xml.etree.ElementTree module": {
		"description": "iterparse() from the xml.etree.ElementTree module",
		"prefix": "iterparse",
		"body": ["iterparse(${1:source}, ${2:events=None}, ${3:parser=None})"]},
	"parse() from the xml.etree.ElementTree module": {
		"description": "parse() from the xml.etree.ElementTree module",
		"prefix": "parse",
		"body": ["parse(${1:source}, ${2:parser=None})"]},
	"register_namespace() from the xml.etree.ElementTree module": {
		"description": "register_namespace() from the xml.etree.ElementTree module",
		"prefix": "register_namespace",
		"body": ["register_namespace(${1:prefix}, ${2:uri})"]},
	"tostring() from the xml.etree.ElementTree module": {
		"description": "tostring() from the xml.etree.ElementTree module",
		"prefix": "tostring",
		"body": ["tostring(${1:element}, ${2:encoding=\"us-ascii\"}, ${3:method=\"xml\"}, ${4:*}, ${5:short_empty_elements=True})"]},
	"tostringlist() from the xml.etree.ElementTree module": {
		"description": "tostringlist() from the xml.etree.ElementTree module",
		"prefix": "tostringlist",
		"body": ["tostringlist(${1:element,})"]},
// xml.parsers.expat completion
	"Comment from the xml.parsers.expat module": {
		"description": "Comment from the xml.parsers.expat module",
		"prefix": "Comment",
		"body": ["Comment(${1:text=None})"]},
	"Element from the xml.parsers.expat module": {
		"description": "Element from the xml.parsers.expat module",
		"prefix": "Element",
		"body": ["Element(${1:tag}, ${2:attrib={}}, ${3:**extra})"]},
	"ElementTree from the xml.parsers.expat module": {
		"description": "ElementTree from the xml.parsers.expat module",
		"prefix": "ElementTree",
		"body": ["ElementTree(${1:element=None}, ${2:file=None})"]},
	"ParseError from the xml.parsers.expat module": {
		"description": "ParseError from the xml.parsers.expat module",
		"prefix": "ParseError",
		"body": ["ParseError"]},
	"ProcessingInstruction from the xml.parsers.expat module": {
		"description": "ProcessingInstruction from the xml.parsers.expat module",
		"prefix": "ProcessingInstruction",
		"body": ["ProcessingInstruction(${1:target}, ${2:text=None})"]},
	"QName from the xml.parsers.expat module": {
		"description": "QName from the xml.parsers.expat module",
		"prefix": "QName",
		"body": ["QName(${1:text_or_uri}, ${2:tag=None})"]},
	"SubElement from the xml.parsers.expat module": {
		"description": "SubElement from the xml.parsers.expat module",
		"prefix": "SubElement",
		"body": ["SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})"]},
	"TreeBuilder from the xml.parsers.expat module": {
		"description": "TreeBuilder from the xml.parsers.expat module",
		"prefix": "TreeBuilder",
		"body": ["TreeBuilder(${1:element_factory=None})"]},
	"XML from the xml.parsers.expat module": {
		"description": "XML from the xml.parsers.expat module",
		"prefix": "XML",
		"body": ["XML(${1:text}, ${2:parser=None})"]},
	"XMLID from the xml.parsers.expat module": {
		"description": "XMLID from the xml.parsers.expat module",
		"prefix": "XMLID",
		"body": ["XMLID(${1:text}, ${2:parser=None})"]},
	"XMLParser from the xml.parsers.expat module": {
		"description": "XMLParser from the xml.parsers.expat module",
		"prefix": "XMLParser",
		"body": ["XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})"]},
	"XMLPullParser from the xml.parsers.expat module": {
		"description": "XMLPullParser from the xml.parsers.expat module",
		"prefix": "XMLPullParser",
		"body": ["XMLPullParser(${1:events=None})"]},
	"dump() from the xml.parsers.expat module": {
		"description": "dump() from the xml.parsers.expat module",
		"prefix": "dump",
		"body": ["dump(${1:elem})"]},
	"fromstring() from the xml.parsers.expat module": {
		"description": "fromstring() from the xml.parsers.expat module",
		"prefix": "fromstring",
		"body": ["fromstring(${1:text})"]},
	"fromstringlist() from the xml.parsers.expat module": {
		"description": "fromstringlist() from the xml.parsers.expat module",
		"prefix": "fromstringlist",
		"body": ["fromstringlist(${1:sequence}, ${2:parser=None})"]},
	"iselement() from the xml.parsers.expat module": {
		"description": "iselement() from the xml.parsers.expat module",
		"prefix": "iselement",
		"body": ["iselement(${1:element})"]},
	"iterparse() from the xml.parsers.expat module": {
		"description": "iterparse() from the xml.parsers.expat module",
		"prefix": "iterparse",
		"body": ["iterparse(${1:source}, ${2:events=None}, ${3:parser=None})"]},
	"parse() from the xml.parsers.expat module": {
		"description": "parse() from the xml.parsers.expat module",
		"prefix": "parse",
		"body": ["parse(${1:source}, ${2:parser=None})"]},
	"register_namespace() from the xml.parsers.expat module": {
		"description": "register_namespace() from the xml.parsers.expat module",
		"prefix": "register_namespace",
		"body": ["register_namespace(${1:prefix}, ${2:uri})"]},
	"tostring() from the xml.parsers.expat module": {
		"description": "tostring() from the xml.parsers.expat module",
		"prefix": "tostring",
		"body": ["tostring(${1:element}, ${2:encoding=\"us-ascii\"}, ${3:method=\"xml\"}, ${4:*}, ${5:short_empty_elements=True})"]},
	"tostringlist() from the xml.parsers.expat module": {
		"description": "tostringlist() from the xml.parsers.expat module",
		"prefix": "tostringlist",
		"body": ["tostringlist(${1:element,})"]},
// xml.parsers.expat.errors completion
	"Comment from the xml.parsers.expat.errors module": {
		"description": "Comment from the xml.parsers.expat.errors module",
		"prefix": "Comment",
		"body": ["Comment(${1:text=None})"]},
	"Element from the xml.parsers.expat.errors module": {
		"description": "Element from the xml.parsers.expat.errors module",
		"prefix": "Element",
		"body": ["Element(${1:tag}, ${2:attrib={}}, ${3:**extra})"]},
	"ElementTree from the xml.parsers.expat.errors module": {
		"description": "ElementTree from the xml.parsers.expat.errors module",
		"prefix": "ElementTree",
		"body": ["ElementTree(${1:element=None}, ${2:file=None})"]},
	"ParseError from the xml.parsers.expat.errors module": {
		"description": "ParseError from the xml.parsers.expat.errors module",
		"prefix": "ParseError",
		"body": ["ParseError"]},
	"ProcessingInstruction from the xml.parsers.expat.errors module": {
		"description": "ProcessingInstruction from the xml.parsers.expat.errors module",
		"prefix": "ProcessingInstruction",
		"body": ["ProcessingInstruction(${1:target}, ${2:text=None})"]},
	"QName from the xml.parsers.expat.errors module": {
		"description": "QName from the xml.parsers.expat.errors module",
		"prefix": "QName",
		"body": ["QName(${1:text_or_uri}, ${2:tag=None})"]},
	"SubElement from the xml.parsers.expat.errors module": {
		"description": "SubElement from the xml.parsers.expat.errors module",
		"prefix": "SubElement",
		"body": ["SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})"]},
	"TreeBuilder from the xml.parsers.expat.errors module": {
		"description": "TreeBuilder from the xml.parsers.expat.errors module",
		"prefix": "TreeBuilder",
		"body": ["TreeBuilder(${1:element_factory=None})"]},
	"XML from the xml.parsers.expat.errors module": {
		"description": "XML from the xml.parsers.expat.errors module",
		"prefix": "XML",
		"body": ["XML(${1:text}, ${2:parser=None})"]},
	"XMLID from the xml.parsers.expat.errors module": {
		"description": "XMLID from the xml.parsers.expat.errors module",
		"prefix": "XMLID",
		"body": ["XMLID(${1:text}, ${2:parser=None})"]},
	"XMLParser from the xml.parsers.expat.errors module": {
		"description": "XMLParser from the xml.parsers.expat.errors module",
		"prefix": "XMLParser",
		"body": ["XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})"]},
	"XMLPullParser from the xml.parsers.expat.errors module": {
		"description": "XMLPullParser from the xml.parsers.expat.errors module",
		"prefix": "XMLPullParser",
		"body": ["XMLPullParser(${1:events=None})"]},
	"dump() from the xml.parsers.expat.errors module": {
		"description": "dump() from the xml.parsers.expat.errors module",
		"prefix": "dump",
		"body": ["dump(${1:elem})"]},
	"fromstring() from the xml.parsers.expat.errors module": {
		"description": "fromstring() from the xml.parsers.expat.errors module",
		"prefix": "fromstring",
		"body": ["fromstring(${1:text})"]},
	"fromstringlist() from the xml.parsers.expat.errors module": {
		"description": "fromstringlist() from the xml.parsers.expat.errors module",
		"prefix": "fromstringlist",
		"body": ["fromstringlist(${1:sequence}, ${2:parser=None})"]},
	"iselement() from the xml.parsers.expat.errors module": {
		"description": "iselement() from the xml.parsers.expat.errors module",
		"prefix": "iselement",
		"body": ["iselement(${1:element})"]},
	"iterparse() from the xml.parsers.expat.errors module": {
		"description": "iterparse() from the xml.parsers.expat.errors module",
		"prefix": "iterparse",
		"body": ["iterparse(${1:source}, ${2:events=None}, ${3:parser=None})"]},
	"parse() from the xml.parsers.expat.errors module": {
		"description": "parse() from the xml.parsers.expat.errors module",
		"prefix": "parse",
		"body": ["parse(${1:source}, ${2:parser=None})"]},
	"register_namespace() from the xml.parsers.expat.errors module": {
		"description": "register_namespace() from the xml.parsers.expat.errors module",
		"prefix": "register_namespace",
		"body": ["register_namespace(${1:prefix}, ${2:uri})"]},
	"tostring() from the xml.parsers.expat.errors module": {
		"description": "tostring() from the xml.parsers.expat.errors module",
		"prefix": "tostring",
		"body": ["tostring(${1:element}, ${2:encoding=\"us-ascii\"}, ${3:method=\"xml\"}, ${4:*}, ${5:short_empty_elements=True})"]},
	"tostringlist() from the xml.parsers.expat.errors module": {
		"description": "tostringlist() from the xml.parsers.expat.errors module",
		"prefix": "tostringlist",
		"body": ["tostringlist(${1:element,})"]},
// xml.parsers.expat.model completion
	"Comment from the xml.parsers.expat.model module": {
		"description": "Comment from the xml.parsers.expat.model module",
		"prefix": "Comment",
		"body": ["Comment(${1:text=None})"]},
	"Element from the xml.parsers.expat.model module": {
		"description": "Element from the xml.parsers.expat.model module",
		"prefix": "Element",
		"body": ["Element(${1:tag}, ${2:attrib={}}, ${3:**extra})"]},
	"ElementTree from the xml.parsers.expat.model module": {
		"description": "ElementTree from the xml.parsers.expat.model module",
		"prefix": "ElementTree",
		"body": ["ElementTree(${1:element=None}, ${2:file=None})"]},
	"ParseError from the xml.parsers.expat.model module": {
		"description": "ParseError from the xml.parsers.expat.model module",
		"prefix": "ParseError",
		"body": ["ParseError"]},
	"ProcessingInstruction from the xml.parsers.expat.model module": {
		"description": "ProcessingInstruction from the xml.parsers.expat.model module",
		"prefix": "ProcessingInstruction",
		"body": ["ProcessingInstruction(${1:target}, ${2:text=None})"]},
	"QName from the xml.parsers.expat.model module": {
		"description": "QName from the xml.parsers.expat.model module",
		"prefix": "QName",
		"body": ["QName(${1:text_or_uri}, ${2:tag=None})"]},
	"SubElement from the xml.parsers.expat.model module": {
		"description": "SubElement from the xml.parsers.expat.model module",
		"prefix": "SubElement",
		"body": ["SubElement(${1:parent}, ${2:tag}, ${3:attrib={}}, ${4:**extra})"]},
	"TreeBuilder from the xml.parsers.expat.model module": {
		"description": "TreeBuilder from the xml.parsers.expat.model module",
		"prefix": "TreeBuilder",
		"body": ["TreeBuilder(${1:element_factory=None})"]},
	"XML from the xml.parsers.expat.model module": {
		"description": "XML from the xml.parsers.expat.model module",
		"prefix": "XML",
		"body": ["XML(${1:text}, ${2:parser=None})"]},
	"XMLID from the xml.parsers.expat.model module": {
		"description": "XMLID from the xml.parsers.expat.model module",
		"prefix": "XMLID",
		"body": ["XMLID(${1:text}, ${2:parser=None})"]},
	"XMLParser from the xml.parsers.expat.model module": {
		"description": "XMLParser from the xml.parsers.expat.model module",
		"prefix": "XMLParser",
		"body": ["XMLParser(${1:html=0}, ${2:target=None}, ${3:encoding=None})"]},
	"XMLPullParser from the xml.parsers.expat.model module": {
		"description": "XMLPullParser from the xml.parsers.expat.model module",
		"prefix": "XMLPullParser",
		"body": ["XMLPullParser(${1:events=None})"]},
	"dump() from the xml.parsers.expat.model module": {
		"description": "dump() from the xml.parsers.expat.model module",
		"prefix": "dump",
		"body": ["dump(${1:elem})"]},
	"fromstring() from the xml.parsers.expat.model module": {
		"description": "fromstring() from the xml.parsers.expat.model module",
		"prefix": "fromstring",
		"body": ["fromstring(${1:text})"]},
	"fromstringlist() from the xml.parsers.expat.model module": {
		"description": "fromstringlist() from the xml.parsers.expat.model module",
		"prefix": "fromstringlist",
		"body": ["fromstringlist(${1:sequence}, ${2:parser=None})"]},
	"iselement() from the xml.parsers.expat.model module": {
		"description": "iselement() from the xml.parsers.expat.model module",
		"prefix": "iselement",
		"body": ["iselement(${1:element})"]},
	"iterparse() from the xml.parsers.expat.model module": {
		"description": "iterparse() from the xml.parsers.expat.model module",
		"prefix": "iterparse",
		"body": ["iterparse(${1:source}, ${2:events=None}, ${3:parser=None})"]},
	"parse() from the xml.parsers.expat.model module": {
		"description": "parse() from the xml.parsers.expat.model module",
		"prefix": "parse",
		"body": ["parse(${1:source}, ${2:parser=None})"]},
	"register_namespace() from the xml.parsers.expat.model module": {
		"description": "register_namespace() from the xml.parsers.expat.model module",
		"prefix": "register_namespace",
		"body": ["register_namespace(${1:prefix}, ${2:uri})"]},
	"tostring() from the xml.parsers.expat.model module": {
		"description": "tostring() from the xml.parsers.expat.model module",
		"prefix": "tostring",
		"body": ["tostring(${1:element}, ${2:encoding=\"us-ascii\"}, ${3:method=\"xml\"}, ${4:*}, ${5:short_empty_elements=True})"]},
	"tostringlist() from the xml.parsers.expat.model module": {
		"description": "tostringlist() from the xml.parsers.expat.model module",
		"prefix": "tostringlist",
		"body": ["tostringlist(${1:element,})"]},
// xml.sax completion
	"SAXException from the xml.sax module": {
		"description": "SAXException from the xml.sax module",
		"prefix": "SAXException",
		"body": ["SAXException(${1:msg}, ${2:exception=None})"]},
	"SAXNotRecognizedException from the xml.sax module": {
		"description": "SAXNotRecognizedException from the xml.sax module",
		"prefix": "SAXNotRecognizedException",
		"body": ["SAXNotRecognizedException(${1:msg}, ${2:exception=None})"]},
	"SAXNotSupportedException from the xml.sax module": {
		"description": "SAXNotSupportedException from the xml.sax module",
		"prefix": "SAXNotSupportedException",
		"body": ["SAXNotSupportedException(${1:msg}, ${2:exception=None})"]},
	"SAXParseException from the xml.sax module": {
		"description": "SAXParseException from the xml.sax module",
		"prefix": "SAXParseException",
		"body": ["SAXParseException(${1:msg}, ${2:exception}, ${3:locator})"]},
	"getException() from the xml.sax module": {
		"description": "getException() from the xml.sax module",
		"prefix": "getException",
		"body": ["getException(${1:})"]},
	"getMessage() from the xml.sax module": {
		"description": "getMessage() from the xml.sax module",
		"prefix": "getMessage",
		"body": ["getMessage(${1:})"]},
	"make_parser() from the xml.sax module": {
		"description": "make_parser() from the xml.sax module",
		"prefix": "make_parser",
		"body": ["make_parser(${1:parser_list=[]})"]},
	"parse() from the xml.sax module": {
		"description": "parse() from the xml.sax module",
		"prefix": "parse",
		"body": ["parse(${1:filename_or_stream}, ${2:handler}, ${3:error_handler=handler.ErrorHandler}, ${4:})"]},
	"parseString() from the xml.sax module": {
		"description": "parseString() from the xml.sax module",
		"prefix": "parseString",
		"body": ["parseString(${1:string,})"]},
// xml.sax.handler completion
	"ContentHandler from the xml.sax.handler module": {
		"description": "ContentHandler from the xml.sax.handler module",
		"prefix": "ContentHandler",
		"body": ["ContentHandler"]},
	"DTDHandler from the xml.sax.handler module": {
		"description": "DTDHandler from the xml.sax.handler module",
		"prefix": "DTDHandler",
		"body": ["DTDHandler"]},
	"EntityResolver from the xml.sax.handler module": {
		"description": "EntityResolver from the xml.sax.handler module",
		"prefix": "EntityResolver",
		"body": ["EntityResolver"]},
	"ErrorHandler from the xml.sax.handler module": {
		"description": "ErrorHandler from the xml.sax.handler module",
		"prefix": "ErrorHandler",
		"body": ["ErrorHandler"]},
	"all_features() from the xml.sax.handler module": {
		"description": "all_features() from the xml.sax.handler module",
		"prefix": "all_features",
		"body": ["all_features()"]},
	"all_properties() from the xml.sax.handler module": {
		"description": "all_properties() from the xml.sax.handler module",
		"prefix": "all_properties",
		"body": ["all_properties()"]},
	"characters() from the xml.sax.handler module": {
		"description": "characters() from the xml.sax.handler module",
		"prefix": "characters",
		"body": ["characters(${1:content})"]},
	"endDocument() from the xml.sax.handler module": {
		"description": "endDocument() from the xml.sax.handler module",
		"prefix": "endDocument",
		"body": ["endDocument(${1:})"]},
	"endElement() from the xml.sax.handler module": {
		"description": "endElement() from the xml.sax.handler module",
		"prefix": "endElement",
		"body": ["endElement(${1:name})"]},
	"endElementNS() from the xml.sax.handler module": {
		"description": "endElementNS() from the xml.sax.handler module",
		"prefix": "endElementNS",
		"body": ["endElementNS(${1:name}, ${2:qname})"]},
	"endPrefixMapping() from the xml.sax.handler module": {
		"description": "endPrefixMapping() from the xml.sax.handler module",
		"prefix": "endPrefixMapping",
		"body": ["endPrefixMapping(${1:prefix})"]},
	"error() from the xml.sax.handler module": {
		"description": "error() from the xml.sax.handler module",
		"prefix": "error",
		"body": ["error(${1:exception})"]},
	"fatalError() from the xml.sax.handler module": {
		"description": "fatalError() from the xml.sax.handler module",
		"prefix": "fatalError",
		"body": ["fatalError(${1:exception})"]},
	"feature_external_ges() from the xml.sax.handler module": {
		"description": "feature_external_ges() from the xml.sax.handler module",
		"prefix": "feature_external_ges",
		"body": ["feature_external_ges()"]},
	"feature_external_pes() from the xml.sax.handler module": {
		"description": "feature_external_pes() from the xml.sax.handler module",
		"prefix": "feature_external_pes",
		"body": ["feature_external_pes()"]},
	"feature_namespace_prefixes() from the xml.sax.handler module": {
		"description": "feature_namespace_prefixes() from the xml.sax.handler module",
		"prefix": "feature_namespace_prefixes",
		"body": ["feature_namespace_prefixes()"]},
	"feature_namespaces() from the xml.sax.handler module": {
		"description": "feature_namespaces() from the xml.sax.handler module",
		"prefix": "feature_namespaces",
		"body": ["feature_namespaces()"]},
	"feature_string_interning() from the xml.sax.handler module": {
		"description": "feature_string_interning() from the xml.sax.handler module",
		"prefix": "feature_string_interning",
		"body": ["feature_string_interning()"]},
	"feature_validation() from the xml.sax.handler module": {
		"description": "feature_validation() from the xml.sax.handler module",
		"prefix": "feature_validation",
		"body": ["feature_validation()"]},
	"ignorableWhitespace() from the xml.sax.handler module": {
		"description": "ignorableWhitespace() from the xml.sax.handler module",
		"prefix": "ignorableWhitespace",
		"body": ["ignorableWhitespace(${1:whitespace})"]},
	"notationDecl() from the xml.sax.handler module": {
		"description": "notationDecl() from the xml.sax.handler module",
		"prefix": "notationDecl",
		"body": ["notationDecl(${1:name}, ${2:publicId}, ${3:systemId})"]},
	"processingInstruction() from the xml.sax.handler module": {
		"description": "processingInstruction() from the xml.sax.handler module",
		"prefix": "processingInstruction",
		"body": ["processingInstruction(${1:target}, ${2:data})"]},
	"property_declaration_handler() from the xml.sax.handler module": {
		"description": "property_declaration_handler() from the xml.sax.handler module",
		"prefix": "property_declaration_handler",
		"body": ["property_declaration_handler()"]},
	"property_dom_node() from the xml.sax.handler module": {
		"description": "property_dom_node() from the xml.sax.handler module",
		"prefix": "property_dom_node",
		"body": ["property_dom_node()"]},
	"property_lexical_handler() from the xml.sax.handler module": {
		"description": "property_lexical_handler() from the xml.sax.handler module",
		"prefix": "property_lexical_handler",
		"body": ["property_lexical_handler()"]},
	"property_xml_string() from the xml.sax.handler module": {
		"description": "property_xml_string() from the xml.sax.handler module",
		"prefix": "property_xml_string",
		"body": ["property_xml_string()"]},
	"resolveEntity() from the xml.sax.handler module": {
		"description": "resolveEntity() from the xml.sax.handler module",
		"prefix": "resolveEntity",
		"body": ["resolveEntity(${1:publicId}, ${2:systemId})"]},
	"setDocumentLocator() from the xml.sax.handler module": {
		"description": "setDocumentLocator() from the xml.sax.handler module",
		"prefix": "setDocumentLocator",
		"body": ["setDocumentLocator(${1:locator})"]},
	"skippedEntity() from the xml.sax.handler module": {
		"description": "skippedEntity() from the xml.sax.handler module",
		"prefix": "skippedEntity",
		"body": ["skippedEntity(${1:name})"]},
	"startDocument() from the xml.sax.handler module": {
		"description": "startDocument() from the xml.sax.handler module",
		"prefix": "startDocument",
		"body": ["startDocument(${1:})"]},
	"startElement() from the xml.sax.handler module": {
		"description": "startElement() from the xml.sax.handler module",
		"prefix": "startElement",
		"body": ["startElement(${1:name}, ${2:attrs})"]},
	"startElementNS() from the xml.sax.handler module": {
		"description": "startElementNS() from the xml.sax.handler module",
		"prefix": "startElementNS",
		"body": ["startElementNS(${1:name}, ${2:qname}, ${3:attrs})"]},
	"startPrefixMapping() from the xml.sax.handler module": {
		"description": "startPrefixMapping() from the xml.sax.handler module",
		"prefix": "startPrefixMapping",
		"body": ["startPrefixMapping(${1:prefix}, ${2:uri})"]},
	"unparsedEntityDecl() from the xml.sax.handler module": {
		"description": "unparsedEntityDecl() from the xml.sax.handler module",
		"prefix": "unparsedEntityDecl",
		"body": ["unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})"]},
	"warning() from the xml.sax.handler module": {
		"description": "warning() from the xml.sax.handler module",
		"prefix": "warning",
		"body": ["warning(${1:exception})"]},
// xml.sax.saxutils completion
	"ContentHandler from the xml.sax.saxutils module": {
		"description": "ContentHandler from the xml.sax.saxutils module",
		"prefix": "ContentHandler",
		"body": ["ContentHandler"]},
	"DTDHandler from the xml.sax.saxutils module": {
		"description": "DTDHandler from the xml.sax.saxutils module",
		"prefix": "DTDHandler",
		"body": ["DTDHandler"]},
	"EntityResolver from the xml.sax.saxutils module": {
		"description": "EntityResolver from the xml.sax.saxutils module",
		"prefix": "EntityResolver",
		"body": ["EntityResolver"]},
	"ErrorHandler from the xml.sax.saxutils module": {
		"description": "ErrorHandler from the xml.sax.saxutils module",
		"prefix": "ErrorHandler",
		"body": ["ErrorHandler"]},
	"all_features() from the xml.sax.saxutils module": {
		"description": "all_features() from the xml.sax.saxutils module",
		"prefix": "all_features",
		"body": ["all_features()"]},
	"all_properties() from the xml.sax.saxutils module": {
		"description": "all_properties() from the xml.sax.saxutils module",
		"prefix": "all_properties",
		"body": ["all_properties()"]},
	"characters() from the xml.sax.saxutils module": {
		"description": "characters() from the xml.sax.saxutils module",
		"prefix": "characters",
		"body": ["characters(${1:content})"]},
	"endDocument() from the xml.sax.saxutils module": {
		"description": "endDocument() from the xml.sax.saxutils module",
		"prefix": "endDocument",
		"body": ["endDocument(${1:})"]},
	"endElement() from the xml.sax.saxutils module": {
		"description": "endElement() from the xml.sax.saxutils module",
		"prefix": "endElement",
		"body": ["endElement(${1:name})"]},
	"endElementNS() from the xml.sax.saxutils module": {
		"description": "endElementNS() from the xml.sax.saxutils module",
		"prefix": "endElementNS",
		"body": ["endElementNS(${1:name}, ${2:qname})"]},
	"endPrefixMapping() from the xml.sax.saxutils module": {
		"description": "endPrefixMapping() from the xml.sax.saxutils module",
		"prefix": "endPrefixMapping",
		"body": ["endPrefixMapping(${1:prefix})"]},
	"error() from the xml.sax.saxutils module": {
		"description": "error() from the xml.sax.saxutils module",
		"prefix": "error",
		"body": ["error(${1:exception})"]},
	"fatalError() from the xml.sax.saxutils module": {
		"description": "fatalError() from the xml.sax.saxutils module",
		"prefix": "fatalError",
		"body": ["fatalError(${1:exception})"]},
	"feature_external_ges() from the xml.sax.saxutils module": {
		"description": "feature_external_ges() from the xml.sax.saxutils module",
		"prefix": "feature_external_ges",
		"body": ["feature_external_ges()"]},
	"feature_external_pes() from the xml.sax.saxutils module": {
		"description": "feature_external_pes() from the xml.sax.saxutils module",
		"prefix": "feature_external_pes",
		"body": ["feature_external_pes()"]},
	"feature_namespace_prefixes() from the xml.sax.saxutils module": {
		"description": "feature_namespace_prefixes() from the xml.sax.saxutils module",
		"prefix": "feature_namespace_prefixes",
		"body": ["feature_namespace_prefixes()"]},
	"feature_namespaces() from the xml.sax.saxutils module": {
		"description": "feature_namespaces() from the xml.sax.saxutils module",
		"prefix": "feature_namespaces",
		"body": ["feature_namespaces()"]},
	"feature_string_interning() from the xml.sax.saxutils module": {
		"description": "feature_string_interning() from the xml.sax.saxutils module",
		"prefix": "feature_string_interning",
		"body": ["feature_string_interning()"]},
	"feature_validation() from the xml.sax.saxutils module": {
		"description": "feature_validation() from the xml.sax.saxutils module",
		"prefix": "feature_validation",
		"body": ["feature_validation()"]},
	"ignorableWhitespace() from the xml.sax.saxutils module": {
		"description": "ignorableWhitespace() from the xml.sax.saxutils module",
		"prefix": "ignorableWhitespace",
		"body": ["ignorableWhitespace(${1:whitespace})"]},
	"notationDecl() from the xml.sax.saxutils module": {
		"description": "notationDecl() from the xml.sax.saxutils module",
		"prefix": "notationDecl",
		"body": ["notationDecl(${1:name}, ${2:publicId}, ${3:systemId})"]},
	"processingInstruction() from the xml.sax.saxutils module": {
		"description": "processingInstruction() from the xml.sax.saxutils module",
		"prefix": "processingInstruction",
		"body": ["processingInstruction(${1:target}, ${2:data})"]},
	"property_declaration_handler() from the xml.sax.saxutils module": {
		"description": "property_declaration_handler() from the xml.sax.saxutils module",
		"prefix": "property_declaration_handler",
		"body": ["property_declaration_handler()"]},
	"property_dom_node() from the xml.sax.saxutils module": {
		"description": "property_dom_node() from the xml.sax.saxutils module",
		"prefix": "property_dom_node",
		"body": ["property_dom_node()"]},
	"property_lexical_handler() from the xml.sax.saxutils module": {
		"description": "property_lexical_handler() from the xml.sax.saxutils module",
		"prefix": "property_lexical_handler",
		"body": ["property_lexical_handler()"]},
	"property_xml_string() from the xml.sax.saxutils module": {
		"description": "property_xml_string() from the xml.sax.saxutils module",
		"prefix": "property_xml_string",
		"body": ["property_xml_string()"]},
	"resolveEntity() from the xml.sax.saxutils module": {
		"description": "resolveEntity() from the xml.sax.saxutils module",
		"prefix": "resolveEntity",
		"body": ["resolveEntity(${1:publicId}, ${2:systemId})"]},
	"setDocumentLocator() from the xml.sax.saxutils module": {
		"description": "setDocumentLocator() from the xml.sax.saxutils module",
		"prefix": "setDocumentLocator",
		"body": ["setDocumentLocator(${1:locator})"]},
	"skippedEntity() from the xml.sax.saxutils module": {
		"description": "skippedEntity() from the xml.sax.saxutils module",
		"prefix": "skippedEntity",
		"body": ["skippedEntity(${1:name})"]},
	"startDocument() from the xml.sax.saxutils module": {
		"description": "startDocument() from the xml.sax.saxutils module",
		"prefix": "startDocument",
		"body": ["startDocument(${1:})"]},
	"startElement() from the xml.sax.saxutils module": {
		"description": "startElement() from the xml.sax.saxutils module",
		"prefix": "startElement",
		"body": ["startElement(${1:name}, ${2:attrs})"]},
	"startElementNS() from the xml.sax.saxutils module": {
		"description": "startElementNS() from the xml.sax.saxutils module",
		"prefix": "startElementNS",
		"body": ["startElementNS(${1:name}, ${2:qname}, ${3:attrs})"]},
	"startPrefixMapping() from the xml.sax.saxutils module": {
		"description": "startPrefixMapping() from the xml.sax.saxutils module",
		"prefix": "startPrefixMapping",
		"body": ["startPrefixMapping(${1:prefix}, ${2:uri})"]},
	"unparsedEntityDecl() from the xml.sax.saxutils module": {
		"description": "unparsedEntityDecl() from the xml.sax.saxutils module",
		"prefix": "unparsedEntityDecl",
		"body": ["unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})"]},
	"warning() from the xml.sax.saxutils module": {
		"description": "warning() from the xml.sax.saxutils module",
		"prefix": "warning",
		"body": ["warning(${1:exception})"]},
// xml.sax.xmlreader completion
	"ContentHandler from the xml.sax.xmlreader module": {
		"description": "ContentHandler from the xml.sax.xmlreader module",
		"prefix": "ContentHandler",
		"body": ["ContentHandler"]},
	"DTDHandler from the xml.sax.xmlreader module": {
		"description": "DTDHandler from the xml.sax.xmlreader module",
		"prefix": "DTDHandler",
		"body": ["DTDHandler"]},
	"EntityResolver from the xml.sax.xmlreader module": {
		"description": "EntityResolver from the xml.sax.xmlreader module",
		"prefix": "EntityResolver",
		"body": ["EntityResolver"]},
	"ErrorHandler from the xml.sax.xmlreader module": {
		"description": "ErrorHandler from the xml.sax.xmlreader module",
		"prefix": "ErrorHandler",
		"body": ["ErrorHandler"]},
	"all_features() from the xml.sax.xmlreader module": {
		"description": "all_features() from the xml.sax.xmlreader module",
		"prefix": "all_features",
		"body": ["all_features()"]},
	"all_properties() from the xml.sax.xmlreader module": {
		"description": "all_properties() from the xml.sax.xmlreader module",
		"prefix": "all_properties",
		"body": ["all_properties()"]},
	"characters() from the xml.sax.xmlreader module": {
		"description": "characters() from the xml.sax.xmlreader module",
		"prefix": "characters",
		"body": ["characters(${1:content})"]},
	"endDocument() from the xml.sax.xmlreader module": {
		"description": "endDocument() from the xml.sax.xmlreader module",
		"prefix": "endDocument",
		"body": ["endDocument(${1:})"]},
	"endElement() from the xml.sax.xmlreader module": {
		"description": "endElement() from the xml.sax.xmlreader module",
		"prefix": "endElement",
		"body": ["endElement(${1:name})"]},
	"endElementNS() from the xml.sax.xmlreader module": {
		"description": "endElementNS() from the xml.sax.xmlreader module",
		"prefix": "endElementNS",
		"body": ["endElementNS(${1:name}, ${2:qname})"]},
	"endPrefixMapping() from the xml.sax.xmlreader module": {
		"description": "endPrefixMapping() from the xml.sax.xmlreader module",
		"prefix": "endPrefixMapping",
		"body": ["endPrefixMapping(${1:prefix})"]},
	"error() from the xml.sax.xmlreader module": {
		"description": "error() from the xml.sax.xmlreader module",
		"prefix": "error",
		"body": ["error(${1:exception})"]},
	"fatalError() from the xml.sax.xmlreader module": {
		"description": "fatalError() from the xml.sax.xmlreader module",
		"prefix": "fatalError",
		"body": ["fatalError(${1:exception})"]},
	"feature_external_ges() from the xml.sax.xmlreader module": {
		"description": "feature_external_ges() from the xml.sax.xmlreader module",
		"prefix": "feature_external_ges",
		"body": ["feature_external_ges()"]},
	"feature_external_pes() from the xml.sax.xmlreader module": {
		"description": "feature_external_pes() from the xml.sax.xmlreader module",
		"prefix": "feature_external_pes",
		"body": ["feature_external_pes()"]},
	"feature_namespace_prefixes() from the xml.sax.xmlreader module": {
		"description": "feature_namespace_prefixes() from the xml.sax.xmlreader module",
		"prefix": "feature_namespace_prefixes",
		"body": ["feature_namespace_prefixes()"]},
	"feature_namespaces() from the xml.sax.xmlreader module": {
		"description": "feature_namespaces() from the xml.sax.xmlreader module",
		"prefix": "feature_namespaces",
		"body": ["feature_namespaces()"]},
	"feature_string_interning() from the xml.sax.xmlreader module": {
		"description": "feature_string_interning() from the xml.sax.xmlreader module",
		"prefix": "feature_string_interning",
		"body": ["feature_string_interning()"]},
	"feature_validation() from the xml.sax.xmlreader module": {
		"description": "feature_validation() from the xml.sax.xmlreader module",
		"prefix": "feature_validation",
		"body": ["feature_validation()"]},
	"ignorableWhitespace() from the xml.sax.xmlreader module": {
		"description": "ignorableWhitespace() from the xml.sax.xmlreader module",
		"prefix": "ignorableWhitespace",
		"body": ["ignorableWhitespace(${1:whitespace})"]},
	"notationDecl() from the xml.sax.xmlreader module": {
		"description": "notationDecl() from the xml.sax.xmlreader module",
		"prefix": "notationDecl",
		"body": ["notationDecl(${1:name}, ${2:publicId}, ${3:systemId})"]},
	"processingInstruction() from the xml.sax.xmlreader module": {
		"description": "processingInstruction() from the xml.sax.xmlreader module",
		"prefix": "processingInstruction",
		"body": ["processingInstruction(${1:target}, ${2:data})"]},
	"property_declaration_handler() from the xml.sax.xmlreader module": {
		"description": "property_declaration_handler() from the xml.sax.xmlreader module",
		"prefix": "property_declaration_handler",
		"body": ["property_declaration_handler()"]},
	"property_dom_node() from the xml.sax.xmlreader module": {
		"description": "property_dom_node() from the xml.sax.xmlreader module",
		"prefix": "property_dom_node",
		"body": ["property_dom_node()"]},
	"property_lexical_handler() from the xml.sax.xmlreader module": {
		"description": "property_lexical_handler() from the xml.sax.xmlreader module",
		"prefix": "property_lexical_handler",
		"body": ["property_lexical_handler()"]},
	"property_xml_string() from the xml.sax.xmlreader module": {
		"description": "property_xml_string() from the xml.sax.xmlreader module",
		"prefix": "property_xml_string",
		"body": ["property_xml_string()"]},
	"resolveEntity() from the xml.sax.xmlreader module": {
		"description": "resolveEntity() from the xml.sax.xmlreader module",
		"prefix": "resolveEntity",
		"body": ["resolveEntity(${1:publicId}, ${2:systemId})"]},
	"setDocumentLocator() from the xml.sax.xmlreader module": {
		"description": "setDocumentLocator() from the xml.sax.xmlreader module",
		"prefix": "setDocumentLocator",
		"body": ["setDocumentLocator(${1:locator})"]},
	"skippedEntity() from the xml.sax.xmlreader module": {
		"description": "skippedEntity() from the xml.sax.xmlreader module",
		"prefix": "skippedEntity",
		"body": ["skippedEntity(${1:name})"]},
	"startDocument() from the xml.sax.xmlreader module": {
		"description": "startDocument() from the xml.sax.xmlreader module",
		"prefix": "startDocument",
		"body": ["startDocument(${1:})"]},
	"startElement() from the xml.sax.xmlreader module": {
		"description": "startElement() from the xml.sax.xmlreader module",
		"prefix": "startElement",
		"body": ["startElement(${1:name}, ${2:attrs})"]},
	"startElementNS() from the xml.sax.xmlreader module": {
		"description": "startElementNS() from the xml.sax.xmlreader module",
		"prefix": "startElementNS",
		"body": ["startElementNS(${1:name}, ${2:qname}, ${3:attrs})"]},
	"startPrefixMapping() from the xml.sax.xmlreader module": {
		"description": "startPrefixMapping() from the xml.sax.xmlreader module",
		"prefix": "startPrefixMapping",
		"body": ["startPrefixMapping(${1:prefix}, ${2:uri})"]},
	"unparsedEntityDecl() from the xml.sax.xmlreader module": {
		"description": "unparsedEntityDecl() from the xml.sax.xmlreader module",
		"prefix": "unparsedEntityDecl",
		"body": ["unparsedEntityDecl(${1:name}, ${2:publicId}, ${3:systemId}, ${4:ndata})"]},
	"warning() from the xml.sax.xmlreader module": {
		"description": "warning() from the xml.sax.xmlreader module",
		"prefix": "warning",
		"body": ["warning(${1:exception})"]},
// xmlrpc.client completion
	"MultiCall from the xmlrpc.client module": {
		"description": "MultiCall from the xmlrpc.client module",
		"prefix": "MultiCall",
		"body": ["MultiCall(${1:server})"]},
	"ServerProxy from the xmlrpc.client module": {
		"description": "ServerProxy from the xmlrpc.client module",
		"prefix": "ServerProxy",
		"body": ["ServerProxy(${1:uri}, ${2:transport=None}, ${3:encoding=None}, ${4:verbose=False}, ${5:allow_none=False}, ${6:use_datetime=False}, ${7:use_builtin_types=False}, ${8:*}, ${9:context=None})"]},
	"data() from the xmlrpc.client module": {
		"description": "data() from the xmlrpc.client module",
		"prefix": "data",
		"body": ["data()"]},
	"decode() from the xmlrpc.client module": {
		"description": "decode() from the xmlrpc.client module",
		"prefix": "decode",
		"body": ["decode(${1:bytes})"]},
	"decode() from the xmlrpc.client module": {
		"description": "decode() from the xmlrpc.client module",
		"prefix": "decode",
		"body": ["decode(${1:string})"]},
	"dumps() from the xmlrpc.client module": {
		"description": "dumps() from the xmlrpc.client module",
		"prefix": "dumps",
		"body": ["dumps(${1:params}, ${2:methodname=None}, ${3:methodresponse=None}, ${4:encoding=None}, ${5:allow_none=False})"]},
	"encode() from the xmlrpc.client module": {
		"description": "encode() from the xmlrpc.client module",
		"prefix": "encode",
		"body": ["encode(${1:out})"]},
	"errcode() from the xmlrpc.client module": {
		"description": "errcode() from the xmlrpc.client module",
		"prefix": "errcode",
		"body": ["errcode()"]},
	"errmsg() from the xmlrpc.client module": {
		"description": "errmsg() from the xmlrpc.client module",
		"prefix": "errmsg",
		"body": ["errmsg()"]},
	"faultCode() from the xmlrpc.client module": {
		"description": "faultCode() from the xmlrpc.client module",
		"prefix": "faultCode",
		"body": ["faultCode()"]},
	"faultString() from the xmlrpc.client module": {
		"description": "faultString() from the xmlrpc.client module",
		"prefix": "faultString",
		"body": ["faultString()"]},
	"headers() from the xmlrpc.client module": {
		"description": "headers() from the xmlrpc.client module",
		"prefix": "headers",
		"body": ["headers()"]},
	"listMethods() from the xmlrpc.client module": {
		"description": "listMethods() from the xmlrpc.client module",
		"prefix": "listMethods",
		"body": ["listMethods(${1:})"]},
	"loads() from the xmlrpc.client module": {
		"description": "loads() from the xmlrpc.client module",
		"prefix": "loads",
		"body": ["loads(${1:data}, ${2:use_datetime=False}, ${3:use_builtin_types=False})"]},
	"methodHelp() from the xmlrpc.client module": {
		"description": "methodHelp() from the xmlrpc.client module",
		"prefix": "methodHelp",
		"body": ["methodHelp(${1:name})"]},
	"methodSignature() from the xmlrpc.client module": {
		"description": "methodSignature() from the xmlrpc.client module",
		"prefix": "methodSignature",
		"body": ["methodSignature(${1:name})"]},
	"url() from the xmlrpc.client module": {
		"description": "url() from the xmlrpc.client module",
		"prefix": "url",
		"body": ["url()"]},
// xmlrpc.server completion
	"CGIXMLRPCRequestHandler from the xmlrpc.server module": {
		"description": "CGIXMLRPCRequestHandler from the xmlrpc.server module",
		"prefix": "CGIXMLRPCRequestHandler",
		"body": ["CGIXMLRPCRequestHandler(${1:allow_none=False}, ${2:encoding=None}, ${3:use_builtin_types=False})"]},
	"DocCGIXMLRPCRequestHandler from the xmlrpc.server module": {
		"description": "DocCGIXMLRPCRequestHandler from the xmlrpc.server module",
		"prefix": "DocCGIXMLRPCRequestHandler",
		"body": ["DocCGIXMLRPCRequestHandler"]},
	"DocXMLRPCRequestHandler from the xmlrpc.server module": {
		"description": "DocXMLRPCRequestHandler from the xmlrpc.server module",
		"prefix": "DocXMLRPCRequestHandler",
		"body": ["DocXMLRPCRequestHandler"]},
	"DocXMLRPCServer from the xmlrpc.server module": {
		"description": "DocXMLRPCServer from the xmlrpc.server module",
		"prefix": "DocXMLRPCServer",
		"body": ["DocXMLRPCServer(${1:addr}, ${2:requestHandler=DocXMLRPCRequestHandler}, ${3:logRequests=True}, ${4:allow_none=False}, ${5:encoding=None}, ${6:bind_and_activate=True}, ${7:use_builtin_types=True})"]},
	"SimpleXMLRPCRequestHandler from the xmlrpc.server module": {
		"description": "SimpleXMLRPCRequestHandler from the xmlrpc.server module",
		"prefix": "SimpleXMLRPCRequestHandler",
		"body": ["SimpleXMLRPCRequestHandler"]},
	"SimpleXMLRPCServer from the xmlrpc.server module": {
		"description": "SimpleXMLRPCServer from the xmlrpc.server module",
		"prefix": "SimpleXMLRPCServer",
		"body": ["SimpleXMLRPCServer(${1:addr}, ${2:requestHandler=SimpleXMLRPCRequestHandler}, ${3:logRequests=True}, ${4:allow_none=False}, ${5:encoding=None}, ${6:bind_and_activate=True}, ${7:use_builtin_types=False})"]},
	"handle_request() from the xmlrpc.server module": {
		"description": "handle_request() from the xmlrpc.server module",
		"prefix": "handle_request",
		"body": ["handle_request(${1:request_text=None})"]},
	"register_function() from the xmlrpc.server module": {
		"description": "register_function() from the xmlrpc.server module",
		"prefix": "register_function",
		"body": ["register_function(${1:function}, ${2:name=None})"]},
	"register_instance() from the xmlrpc.server module": {
		"description": "register_instance() from the xmlrpc.server module",
		"prefix": "register_instance",
		"body": ["register_instance(${1:instance}, ${2:allow_dotted_names=False})"]},
	"register_instance() from the xmlrpc.server module": {
		"description": "register_instance() from the xmlrpc.server module",
		"prefix": "register_instance",
		"body": ["register_instance(${1:instance})"]},
	"register_introspection_functions() from the xmlrpc.server module": {
		"description": "register_introspection_functions() from the xmlrpc.server module",
		"prefix": "register_introspection_functions",
		"body": ["register_introspection_functions(${1:})"]},
	"register_multicall_functions() from the xmlrpc.server module": {
		"description": "register_multicall_functions() from the xmlrpc.server module",
		"prefix": "register_multicall_functions",
		"body": ["register_multicall_functions(${1:})"]},
	"rpc_paths() from the xmlrpc.server module": {
		"description": "rpc_paths() from the xmlrpc.server module",
		"prefix": "rpc_paths",
		"body": ["rpc_paths()"]},
	"set_server_documentation() from the xmlrpc.server module": {
		"description": "set_server_documentation() from the xmlrpc.server module",
		"prefix": "set_server_documentation",
		"body": ["set_server_documentation(${1:server_documentation})"]},
	"set_server_name() from the xmlrpc.server module": {
		"description": "set_server_name() from the xmlrpc.server module",
		"prefix": "set_server_name",
		"body": ["set_server_name(${1:server_name})"]},
	"set_server_title() from the xmlrpc.server module": {
		"description": "set_server_title() from the xmlrpc.server module",
		"prefix": "set_server_title",
		"body": ["set_server_title(${1:server_title})"]},
// zipapp completion
	"create_archive() from the zipapp module": {
		"description": "create_archive() from the zipapp module",
		"prefix": "create_archive",
		"body": ["create_archive(${1:source}, ${2:target=None}, ${3:interpreter=None}, ${4:main=None})"]},
	"get_interpreter() from the zipapp module": {
		"description": "get_interpreter() from the zipapp module",
		"prefix": "get_interpreter",
		"body": ["get_interpreter(${1:archive})"]},
// zipfile completion
	"BadZipFile from the zipfile module": {
		"description": "BadZipFile from the zipfile module",
		"prefix": "BadZipFile",
		"body": ["BadZipFile"]},
	"BadZipfile from the zipfile module": {
		"description": "BadZipfile from the zipfile module",
		"prefix": "BadZipfile",
		"body": ["BadZipfile"]},
	"CRC from the zipfile module": {
		"description": "CRC from the zipfile module",
		"prefix": "CRC",
		"body": ["CRC"]},
	"LargeZipFile from the zipfile module": {
		"description": "LargeZipFile from the zipfile module",
		"prefix": "LargeZipFile",
		"body": ["LargeZipFile"]},
	"PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo from the zipfile module": {
		"description": "PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo from the zipfile module",
		"prefix": "PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo",
		"body": ["PyZipFile Class for creating ZIP archives containing Python libraries.     class zipfile.ZipInfo(${1:filename='NoName'}, ${2:date_time=}, ${3:1980}, ${4:1}, ${4:1}, ${6:0}, ${6:0}, ${8:0})"]},
	"PyZipFile from the zipfile module": {
		"description": "PyZipFile from the zipfile module",
		"prefix": "PyZipFile",
		"body": ["PyZipFile(${1:file}, ${2:mode='r'}, ${3:compression=ZIP_STORED}, ${4:allowZip64=True}, ${5:optimize=-1})"]},
	"ZIP_BZIP2 from the zipfile module": {
		"description": "ZIP_BZIP2 from the zipfile module",
		"prefix": "ZIP_BZIP2",
		"body": ["ZIP_BZIP2"]},
	"ZIP_DEFLATED from the zipfile module": {
		"description": "ZIP_DEFLATED from the zipfile module",
		"prefix": "ZIP_DEFLATED",
		"body": ["ZIP_DEFLATED"]},
	"ZIP_LZMA from the zipfile module": {
		"description": "ZIP_LZMA from the zipfile module",
		"prefix": "ZIP_LZMA",
		"body": ["ZIP_LZMA"]},
	"ZIP_STORED from the zipfile module": {
		"description": "ZIP_STORED from the zipfile module",
		"prefix": "ZIP_STORED",
		"body": ["ZIP_STORED"]},
	"ZipFile The class for reading and writing ZIP files.  See section  from the zipfile module": {
		"description": "ZipFile The class for reading and writing ZIP files.  See section  from the zipfile module",
		"prefix": "ZipFile The class for reading and writing ZIP files.  See section ",
		"body": ["ZipFile The class for reading and writing ZIP files.  See section "]},
	"ZipFile from the zipfile module": {
		"description": "ZipFile from the zipfile module",
		"prefix": "ZipFile",
		"body": ["ZipFile(${1:file}, ${2:mode='r'}, ${3:compression=ZIP_STORED}, ${4:allowZip64=True})"]},
	"close() from the zipfile module": {
		"description": "close() from the zipfile module",
		"prefix": "close",
		"body": ["close(${1:})"]},
	"comment() from the zipfile module": {
		"description": "comment() from the zipfile module",
		"prefix": "comment",
		"body": ["comment()"]},
	"compress_size() from the zipfile module": {
		"description": "compress_size() from the zipfile module",
		"prefix": "compress_size",
		"body": ["compress_size()"]},
	"compress_type() from the zipfile module": {
		"description": "compress_type() from the zipfile module",
		"prefix": "compress_type",
		"body": ["compress_type()"]},
	"create_system() from the zipfile module": {
		"description": "create_system() from the zipfile module",
		"prefix": "create_system",
		"body": ["create_system()"]},
	"create_version() from the zipfile module": {
		"description": "create_version() from the zipfile module",
		"prefix": "create_version",
		"body": ["create_version()"]},
	"date_time() from the zipfile module": {
		"description": "date_time() from the zipfile module",
		"prefix": "date_time",
		"body": ["date_time()"]},
	"debug() from the zipfile module": {
		"description": "debug() from the zipfile module",
		"prefix": "debug",
		"body": ["debug()"]},
	"external_attr() from the zipfile module": {
		"description": "external_attr() from the zipfile module",
		"prefix": "external_attr",
		"body": ["external_attr()"]},
	"extra() from the zipfile module": {
		"description": "extra() from the zipfile module",
		"prefix": "extra",
		"body": ["extra()"]},
	"extract() from the zipfile module": {
		"description": "extract() from the zipfile module",
		"prefix": "extract",
		"body": ["extract(${1:member}, ${2:path=None}, ${3:pwd=None})"]},
	"extract_version() from the zipfile module": {
		"description": "extract_version() from the zipfile module",
		"prefix": "extract_version",
		"body": ["extract_version()"]},
	"extractall() from the zipfile module": {
		"description": "extractall() from the zipfile module",
		"prefix": "extractall",
		"body": ["extractall(${1:path=None}, ${2:members=None}, ${3:pwd=None})"]},
	"file_size() from the zipfile module": {
		"description": "file_size() from the zipfile module",
		"prefix": "file_size",
		"body": ["file_size()"]},
	"filename() from the zipfile module": {
		"description": "filename() from the zipfile module",
		"prefix": "filename",
		"body": ["filename()"]},
	"flag_bits() from the zipfile module": {
		"description": "flag_bits() from the zipfile module",
		"prefix": "flag_bits",
		"body": ["flag_bits()"]},
	"getinfo() from the zipfile module": {
		"description": "getinfo() from the zipfile module",
		"prefix": "getinfo",
		"body": ["getinfo(${1:name})"]},
	"header_offset() from the zipfile module": {
		"description": "header_offset() from the zipfile module",
		"prefix": "header_offset",
		"body": ["header_offset()"]},
	"infolist() from the zipfile module": {
		"description": "infolist() from the zipfile module",
		"prefix": "infolist",
		"body": ["infolist(${1:})"]},
	"internal_attr() from the zipfile module": {
		"description": "internal_attr() from the zipfile module",
		"prefix": "internal_attr",
		"body": ["internal_attr()"]},
	"is_zipfile() from the zipfile module": {
		"description": "is_zipfile() from the zipfile module",
		"prefix": "is_zipfile",
		"body": ["is_zipfile(${1:filename})"]},
	"namelist() from the zipfile module": {
		"description": "namelist() from the zipfile module",
		"prefix": "namelist",
		"body": ["namelist(${1:})"]},
	"open() from the zipfile module": {
		"description": "open() from the zipfile module",
		"prefix": "open",
		"body": ["open(${1:name}, ${2:mode='r'}, ${3:pwd=None})"]},
	"printdir() from the zipfile module": {
		"description": "printdir() from the zipfile module",
		"prefix": "printdir",
		"body": ["printdir(${1:})"]},
	"read() from the zipfile module": {
		"description": "read() from the zipfile module",
		"prefix": "read",
		"body": ["read(${1:name}, ${2:pwd=None})"]},
	"reserved() from the zipfile module": {
		"description": "reserved() from the zipfile module",
		"prefix": "reserved",
		"body": ["reserved()"]},
	"setpassword() from the zipfile module": {
		"description": "setpassword() from the zipfile module",
		"prefix": "setpassword",
		"body": ["setpassword(${1:pwd})"]},
	"testzip() from the zipfile module": {
		"description": "testzip() from the zipfile module",
		"prefix": "testzip",
		"body": ["testzip(${1:})"]},
	"volume() from the zipfile module": {
		"description": "volume() from the zipfile module",
		"prefix": "volume",
		"body": ["volume()"]},
	"write() from the zipfile module": {
		"description": "write() from the zipfile module",
		"prefix": "write",
		"body": ["write(${1:filename}, ${2:arcname=None}, ${3:compress_type=None})"]},
	"writestr() from the zipfile module": {
		"description": "writestr() from the zipfile module",
		"prefix": "writestr",
		"body": ["writestr(${1:zinfo_or_arcname,})"]},
// zipimport completion
	"ZipImportError from the zipimport module": {
		"description": "ZipImportError from the zipimport module",
		"prefix": "ZipImportError",
		"body": ["ZipImportError"]},
	"zipimporter() from the zipimport module": {
		"description": "zipimporter() from the zipimport module",
		"prefix": "zipimporter",
		"body": ["zipimporter(${1:archivepath})"]},
// zlib completion
	"ZLIB_RUNTIME_VERSION from the zlib module": {
		"description": "ZLIB_RUNTIME_VERSION from the zlib module",
		"prefix": "ZLIB_RUNTIME_VERSION",
		"body": ["ZLIB_RUNTIME_VERSION"]},
	"ZLIB_VERSION from the zlib module": {
		"description": "ZLIB_VERSION from the zlib module",
		"prefix": "ZLIB_VERSION",
		"body": ["ZLIB_VERSION"]},
	"adler32() from the zlib module": {
		"description": "adler32() from the zlib module",
		"prefix": "adler32",
		"body": ["adler32(${1:data[}, ${2:value]})"]},
	"compress() from the zlib module": {
		"description": "compress() from the zlib module",
		"prefix": "compress",
		"body": ["compress(${1:data[}, ${2:level]})"]},
	"compress() from the zlib module": {
		"description": "compress() from the zlib module",
		"prefix": "compress",
		"body": ["compress(${1:data})"]},
	"compressobj() from the zlib module": {
		"description": "compressobj() from the zlib module",
		"prefix": "compressobj",
		"body": ["compressobj(${1:level=-1}, ${2:method=DEFLATED}, ${3:wbits=15}, ${4:memLevel=8}, ${5:strategy=Z_DEFAULT_STRATEGY[}, ${6:zdict]})"]},
	"copy() from the zlib module": {
		"description": "copy() from the zlib module",
		"prefix": "copy",
		"body": ["copy(${1:})"]},
	"crc32() from the zlib module": {
		"description": "crc32() from the zlib module",
		"prefix": "crc32",
		"body": ["crc32(${1:data[}, ${2:value]})"]},
	"decompress() from the zlib module": {
		"description": "decompress() from the zlib module",
		"prefix": "decompress",
		"body": ["decompress(${1:data[}, ${2:max_length]})"]},
	"decompress() from the zlib module": {
		"description": "decompress() from the zlib module",
		"prefix": "decompress",
		"body": ["decompress(${1:data[}, ${2:wbits[}, ${3:bufsize]]})"]},
	"decompressobj() from the zlib module": {
		"description": "decompressobj() from the zlib module",
		"prefix": "decompressobj",
		"body": ["decompressobj(${1:wbits=15[}, ${2:zdict]})"]},
	"eof() from the zlib module": {
		"description": "eof() from the zlib module",
		"prefix": "eof",
		"body": ["eof()"]},
	"error() from the zlib module": {
		"description": "error() from the zlib module",
		"prefix": "error",
		"body": ["error()"]},
	"flush() from the zlib module": {
		"description": "flush() from the zlib module",
		"prefix": "flush",
		"body": ["flush(${1:[length]})"]},
	"flush() from the zlib module": {
		"description": "flush() from the zlib module",
		"prefix": "flush",
		"body": ["flush(${1:[mode]})"]},
	"unconsumed_tail() from the zlib module": {
		"description": "unconsumed_tail() from the zlib module",
		"prefix": "unconsumed_tail",
		"body": ["unconsumed_tail()"]},
	"unused_data() from the zlib module": {
		"description": "unused_data() from the zlib module",
		"prefix": "unused_data",
		"body": ["unused_data()"]},
}
